
tools/system.elf:     file format elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
startup_32():
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e8                	mov    %eax,%gs
       b:	8e e0                	mov    %eax,%fs
       d:	8e d0                	mov    %eax,%ss
       f:	bc b5 04 00 00       	mov    $0x4b5,%esp
      14:	e8 46 00 00 00       	call   5f <setup_idt>
      19:	e8 39 00 00 00       	call   57 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	8e d0                	mov    %eax,%ss
      2d:	bc b5 04 00 00       	mov    $0x4b5,%esp

00000032 <startup_32.tmp>:
startup_32.tmp():
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f0                	je     32 <startup_32.tmp>

00000042 <after_page_table>:
after_page_table():
      42:	6a 00                	push   $0x0
      44:	6a 00                	push   $0x0
      46:	6a 00                	push   $0x0
      48:	68 53 00 00 00       	push   $0x53
      4d:	68 d5 14 00 00       	push   $0x14d5
      52:	c3                   	ret    

00000053 <L6>:
L6():
      53:	eb fe                	jmp    53 <L6>

00000055 <setup_page>:
setup_page():
      55:	eb fe                	jmp    55 <setup_page>

00000057 <setup_gdt>:
setup_gdt():
      57:	0f 01 15 95 00 00 00 	lgdtl  0x95
      5e:	c3                   	ret    

0000005f <setup_idt>:
setup_idt():
      5f:	8d 15 9b 00 00 00    	lea    0x9b,%edx
      65:	b8 00 00 08 00       	mov    $0x80000,%eax
      6a:	66 89 d0             	mov    %dx,%ax
      6d:	66 ba 00 8e          	mov    $0x8e00,%dx
      71:	8d 3d b5 04 00 00    	lea    0x4b5,%edi
      77:	b9 00 01 00 00       	mov    $0x100,%ecx

0000007c <rp_sidt>:
rp_sidt():
      7c:	89 07                	mov    %eax,(%edi)
      7e:	89 57 04             	mov    %edx,0x4(%edi)
      81:	83 c7 08             	add    $0x8,%edi
      84:	49                   	dec    %ecx
      85:	75 f5                	jne    7c <rp_sidt>
      87:	0f 01 1d 8f 00 00 00 	lidtl  0x8f
      8e:	c3                   	ret    

0000008f <IDT_PTR>:
IDT_PTR():
      8f:	ff 07                	incl   (%edi)
      91:	b5 04                	mov    $0x4,%ch
	...

00000095 <GDT_PTR>:
GDT_PTR():
      95:	ff 07                	incl   (%edi)
      97:	b5 0c                	mov    $0xc,%ch
	...

0000009b <ignore_int>:
ignore_int():
      9b:	50                   	push   %eax
      9c:	51                   	push   %ecx
      9d:	52                   	push   %edx
      9e:	1e                   	push   %ds
      9f:	06                   	push   %es
      a0:	0f a0                	push   %fs
      a2:	b8 10 00 00 00       	mov    $0x10,%eax
      a7:	8e d8                	mov    %eax,%ds
      a9:	8e c0                	mov    %eax,%es
      ab:	8e e0                	mov    %eax,%fs
      ad:	0f a1                	pop    %fs
      af:	07                   	pop    %es
      b0:	1f                   	pop    %ds
      b1:	5a                   	pop    %edx
      b2:	59                   	pop    %ecx
      b3:	58                   	pop    %eax
      b4:	cf                   	iret   

000000b5 <tmp_STACK>:
	...

000004b5 <idt>:
	...

00000cb5 <gdt>:
	...
gdt():
     cbd:	ff 0f                	decl   (%edi)
     cbf:	00 00                	add    %al,(%eax)
     cc1:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
     cc7:	00 00                	add    %al,(%eax)
     cc9:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
     ccf:	00 00                	add    %al,(%eax)
     cd1:	00 00                	add    %al,(%eax)
     cd3:	00 00                	add    %al,(%eax)
     cd5:	ff                   	(bad)  
     cd6:	ff 00                	incl   (%eax)
     cd8:	80 0b 92             	orb    $0x92,(%ebx)
     cdb:	00 00                	add    %al,(%eax)
     cdd:	ff 00                	incl   (%eax)
     cdf:	00 00                	add    %al,(%eax)
     ce1:	09 92 00 00 00 00    	or     %edx,0x0(%edx)
	...

000014d5 <main>:
main():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:24
extern PCB_List_T PCB_List[NR_TASKS];


void puti(int number) ;

void main() {
    14d5:	55                   	push   %ebp
    14d6:	89 e5                	mov    %esp,%ebp
    14d8:	83 ec 18             	sub    $0x18,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:26
    //BochsBreak();
    trap_init();
    14db:	e8 bc 03 00 00       	call   189c <trap_init>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:27
    init_sys_call();
    14e0:	e8 27 0a 00 00       	call   1f0c <init_sys_call>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:28
    sched_init();
    14e5:	e8 7e 0a 00 00       	call   1f68 <sched_init>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:29
    printks("\nnow in protected mode!\n");
    14ea:	68 ca 29 00 00       	push   $0x29ca
    14ef:	e8 d0 04 00 00       	call   19c4 <printks>
    14f4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:32
    int errno;
    //BochsBreak();
    __asm__ volatile(
    14f7:	b8 00 00 00 00       	mov    $0x0,%eax
    14fc:	cd 80                	int    $0x80
    14fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:37
        "movl $0x0, %%eax\n"
        "int $0x80\n"
        :"=a"(errno):
    );
    char arr[] = "hello!\n";
    1501:	c7 45 e8 68 65 6c 6c 	movl   $0x6c6c6568,-0x18(%ebp)
    1508:	c7 45 ec 6f 21 0a 00 	movl   $0xa216f,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:39

    sti();
    150f:	fb                   	sti    
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:63
    // p(lock);
    // p(lock);
    // p(lock);
    //int mgnum = 1234;
    //int mgnum2 = 5678;
    int id = fork();
    1510:	fa                   	cli    
    1511:	b8 02 00 00 00       	mov    $0x2,%eax
    1516:	cd 80                	int    $0x80
    1518:	89 45 f8             	mov    %eax,-0x8(%ebp)
    151b:	fb                   	sti    
    151c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    151f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:64
    int lock = getsem(0);
    1522:	6a 00                	push   $0x0
    1524:	e8 fe 12 00 00       	call   2827 <getsem>
    1529:	83 c4 04             	add    $0x4,%esp
    152c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:65
    if (id == 1) {
    152f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
    1533:	75 05                	jne    153a <main+0x65>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:66
        testPV();
    1535:	e8 93 00 00 00       	call   15cd <testPV>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:77 (discriminator 1)
        //     printks("222\n");
        //     BochsBreak();
        //     //v(lock);
        // }
    }
    while(1);
    153a:	eb fe                	jmp    153a <main+0x65>

0000153c <test_second_process>:
test_second_process():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:81
    return;
}

void test_second_process() {
    153c:	55                   	push   %ebp
    153d:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:101 (discriminator 1)
    // } else {
    //     wait();
    //     printks("888\n");
    // }
    while(1) {
        printks("bb\n");
    153f:	68 e3 29 00 00       	push   $0x29e3
    1544:	e8 7b 04 00 00       	call   19c4 <printks>
    1549:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:107 (discriminator 1)
        // __asm__(
        //     "movl $0x1, %%eax\n"
        //     "int $0x80\n"
        //     ::
        // );
    }
    154c:	eb f1                	jmp    153f <test_second_process+0x3>

0000154e <next>:
next():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:114
int full_lock;
int empty_lock;
int queue[25];
int beg = 0;
int end = 0;
int next(int i) { return (i + 1) % 20; }
    154e:	55                   	push   %ebp
    154f:	89 e5                	mov    %esp,%ebp
    1551:	8b 45 08             	mov    0x8(%ebp),%eax
    1554:	40                   	inc    %eax
    1555:	b9 14 00 00 00       	mov    $0x14,%ecx
    155a:	99                   	cltd   
    155b:	f7 f9                	idiv   %ecx
    155d:	89 d0                	mov    %edx,%eax
    155f:	5d                   	pop    %ebp
    1560:	c3                   	ret    

00001561 <full>:
full():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:115
int full() {
    1561:	55                   	push   %ebp
    1562:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:116
    return next(end) == beg;
    1564:	a1 44 31 00 00       	mov    0x3144,%eax
    1569:	50                   	push   %eax
    156a:	e8 df ff ff ff       	call   154e <next>
    156f:	83 c4 04             	add    $0x4,%esp
    1572:	89 c2                	mov    %eax,%edx
    1574:	a1 40 31 00 00       	mov    0x3140,%eax
    1579:	39 c2                	cmp    %eax,%edx
    157b:	0f 94 c0             	sete   %al
    157e:	0f b6 c0             	movzbl %al,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:117
}
    1581:	c9                   	leave  
    1582:	c3                   	ret    

00001583 <empty>:
empty():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:118
int empty() {
    1583:	55                   	push   %ebp
    1584:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:119
    return beg == end;
    1586:	8b 15 40 31 00 00    	mov    0x3140,%edx
    158c:	a1 44 31 00 00       	mov    0x3144,%eax
    1591:	39 c2                	cmp    %eax,%edx
    1593:	0f 94 c0             	sete   %al
    1596:	0f b6 c0             	movzbl %al,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:120
}
    1599:	5d                   	pop    %ebp
    159a:	c3                   	ret    

0000159b <push>:
push():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:121
void push() {
    159b:	55                   	push   %ebp
    159c:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:122
    end = next(end);
    159e:	a1 44 31 00 00       	mov    0x3144,%eax
    15a3:	50                   	push   %eax
    15a4:	e8 a5 ff ff ff       	call   154e <next>
    15a9:	83 c4 04             	add    $0x4,%esp
    15ac:	a3 44 31 00 00       	mov    %eax,0x3144
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:123
}
    15b1:	90                   	nop
    15b2:	c9                   	leave  
    15b3:	c3                   	ret    

000015b4 <pop>:
pop():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:124
void pop() {
    15b4:	55                   	push   %ebp
    15b5:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:125
    beg = next(beg);
    15b7:	a1 40 31 00 00       	mov    0x3140,%eax
    15bc:	50                   	push   %eax
    15bd:	e8 8c ff ff ff       	call   154e <next>
    15c2:	83 c4 04             	add    $0x4,%esp
    15c5:	a3 40 31 00 00       	mov    %eax,0x3140
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:126
}
    15ca:	90                   	nop
    15cb:	c9                   	leave  
    15cc:	c3                   	ret    

000015cd <testPV>:
testPV():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:129
//#define D 1000000
#define D 1000
void testPV() {
    15cd:	55                   	push   %ebp
    15ce:	89 e5                	mov    %esp,%ebp
    15d0:	83 ec 10             	sub    $0x10,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:130
    full_lock = getsem(15);
    15d3:	6a 0f                	push   $0xf
    15d5:	e8 4d 12 00 00       	call   2827 <getsem>
    15da:	83 c4 04             	add    $0x4,%esp
    15dd:	a3 04 47 00 00       	mov    %eax,0x4704
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:131
    empty_lock = getsem(0);
    15e2:	6a 00                	push   $0x0
    15e4:	e8 3e 12 00 00       	call   2827 <getsem>
    15e9:	83 c4 04             	add    $0x4,%esp
    15ec:	a3 08 47 00 00       	mov    %eax,0x4708
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:132
    puti(full_lock);
    15f1:	a1 04 47 00 00       	mov    0x4704,%eax
    15f6:	50                   	push   %eax
    15f7:	e8 69 12 00 00       	call   2865 <puti>
    15fc:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:133
    puti(empty_lock);
    15ff:	a1 08 47 00 00       	mov    0x4708,%eax
    1604:	50                   	push   %eax
    1605:	e8 5b 12 00 00       	call   2865 <puti>
    160a:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:134
    beg = end = 0;
    160d:	c7 05 44 31 00 00 00 	movl   $0x0,0x3144
    1614:	00 00 00 
    1617:	a1 44 31 00 00       	mov    0x3144,%eax
    161c:	a3 40 31 00 00       	mov    %eax,0x3140
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:135
    int id = fork();
    1621:	fa                   	cli    
    1622:	b8 02 00 00 00       	mov    $0x2,%eax
    1627:	cd 80                	int    $0x80
    1629:	89 45 f4             	mov    %eax,-0xc(%ebp)
    162c:	fb                   	sti    
    162d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    1630:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:136
    if (id == 1) {
    1633:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
    1637:	75 7b                	jne    16b4 <testPV+0xe7>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139
        //while(1);
        while(1) {
            for (int i = 0; i < D; ++i) {}
    1639:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    1640:	eb 03                	jmp    1645 <testPV+0x78>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139 (discriminator 3)
    1642:	ff 45 fc             	incl   -0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139 (discriminator 1)
    1645:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%ebp)
    164c:	7e f4                	jle    1642 <testPV+0x75>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:140
            p(empty_lock);
    164e:	a1 08 47 00 00       	mov    0x4708,%eax
    1653:	50                   	push   %eax
    1654:	e8 1e 13 00 00       	call   2977 <p>
    1659:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:142

            printks("push ");
    165c:	68 e7 29 00 00       	push   $0x29e7
    1661:	e8 5e 03 00 00       	call   19c4 <printks>
    1666:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:144

            push();
    1669:	e8 2d ff ff ff       	call   159b <push>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:146

            puti(beg);
    166e:	a1 40 31 00 00       	mov    0x3140,%eax
    1673:	50                   	push   %eax
    1674:	e8 ec 11 00 00       	call   2865 <puti>
    1679:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:147
            printks(" ");
    167c:	68 ed 29 00 00       	push   $0x29ed
    1681:	e8 3e 03 00 00       	call   19c4 <printks>
    1686:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:148
            puti(end);
    1689:	a1 44 31 00 00       	mov    0x3144,%eax
    168e:	50                   	push   %eax
    168f:	e8 d1 11 00 00       	call   2865 <puti>
    1694:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:149
            printks("\n");
    1697:	68 ef 29 00 00       	push   $0x29ef
    169c:	e8 23 03 00 00       	call   19c4 <printks>
    16a1:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:151

            v(full_lock);
    16a4:	a1 04 47 00 00       	mov    0x4704,%eax
    16a9:	50                   	push   %eax
    16aa:	e8 e7 12 00 00       	call   2996 <v>
    16af:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:153

        }        
    16b2:	eb 85                	jmp    1639 <testPV+0x6c>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157
    } else {
        //while(1);
        while (1) {
            for (int i = 0; i < D; ++i) {}
    16b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    16bb:	eb 03                	jmp    16c0 <testPV+0xf3>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157 (discriminator 3)
    16bd:	ff 45 f8             	incl   -0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157 (discriminator 1)
    16c0:	81 7d f8 e7 03 00 00 	cmpl   $0x3e7,-0x8(%ebp)
    16c7:	7e f4                	jle    16bd <testPV+0xf0>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:158
            p(full_lock);
    16c9:	a1 04 47 00 00       	mov    0x4704,%eax
    16ce:	50                   	push   %eax
    16cf:	e8 a3 12 00 00       	call   2977 <p>
    16d4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:159
            v(empty_lock);
    16d7:	a1 08 47 00 00       	mov    0x4708,%eax
    16dc:	50                   	push   %eax
    16dd:	e8 b4 12 00 00       	call   2996 <v>
    16e2:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:161

            pop();
    16e5:	e8 ca fe ff ff       	call   15b4 <pop>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:162
            printks("pop ");
    16ea:	68 f1 29 00 00       	push   $0x29f1
    16ef:	e8 d0 02 00 00       	call   19c4 <printks>
    16f4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:163
            puti(beg);
    16f7:	a1 40 31 00 00       	mov    0x3140,%eax
    16fc:	50                   	push   %eax
    16fd:	e8 63 11 00 00       	call   2865 <puti>
    1702:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:164
            printks(" ");
    1705:	68 ed 29 00 00       	push   $0x29ed
    170a:	e8 b5 02 00 00       	call   19c4 <printks>
    170f:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:165
            puti(end);
    1712:	a1 44 31 00 00       	mov    0x3144,%eax
    1717:	50                   	push   %eax
    1718:	e8 48 11 00 00       	call   2865 <puti>
    171d:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:166
            printks("\n");
    1720:	68 ef 29 00 00       	push   $0x29ef
    1725:	e8 9a 02 00 00       	call   19c4 <printks>
    172a:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:167
        }
    172d:	eb 85                	jmp    16b4 <testPV+0xe7>
    172f:	90                   	nop

00001730 <divide_error>:
divide_error():
    1730:	68 dd 17 00 00       	push   $0x17dd

00001735 <no_error_code>:
no_error_code():
    1735:	87 04 24             	xchg   %eax,(%esp)
    1738:	53                   	push   %ebx
    1739:	51                   	push   %ecx
    173a:	52                   	push   %edx
    173b:	57                   	push   %edi
    173c:	56                   	push   %esi
    173d:	55                   	push   %ebp
    173e:	1e                   	push   %ds
    173f:	06                   	push   %es
    1740:	0f a0                	push   %fs
    1742:	6a 00                	push   $0x0
    1744:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    1748:	52                   	push   %edx
    1749:	ba 10 00 00 00       	mov    $0x10,%edx
    174e:	8e da                	mov    %edx,%ds
    1750:	8e c2                	mov    %edx,%es
    1752:	8e e2                	mov    %edx,%fs
    1754:	ff d0                	call   *%eax
    1756:	83 c4 08             	add    $0x8,%esp
    1759:	0f a1                	pop    %fs
    175b:	07                   	pop    %es
    175c:	1f                   	pop    %ds
    175d:	5d                   	pop    %ebp
    175e:	5e                   	pop    %esi
    175f:	5f                   	pop    %edi
    1760:	5a                   	pop    %edx
    1761:	59                   	pop    %ecx
    1762:	5b                   	pop    %ebx
    1763:	58                   	pop    %eax
    1764:	cf                   	iret   

00001765 <debug>:
debug():
    1765:	68 00 18 00 00       	push   $0x1800
    176a:	eb c9                	jmp    1735 <no_error_code>

0000176c <int3>:
int3():
    176c:	68 00 18 00 00       	push   $0x1800
    1771:	eb c2                	jmp    1735 <no_error_code>

00001773 <bounds>:
bounds():
    1773:	68 06 18 00 00       	push   $0x1806
    1778:	eb bb                	jmp    1735 <no_error_code>

0000177a <double_fault>:
double_fault():
    177a:	68 38 18 00 00       	push   $0x1838

0000177f <error_code>:
error_code():
    177f:	87 44 24 04          	xchg   %eax,0x4(%esp)
    1783:	87 1c 24             	xchg   %ebx,(%esp)
    1786:	51                   	push   %ecx
    1787:	52                   	push   %edx
    1788:	57                   	push   %edi
    1789:	56                   	push   %esi
    178a:	55                   	push   %ebp
    178b:	1e                   	push   %ds
    178c:	06                   	push   %es
    178d:	0f a0                	push   %fs
    178f:	50                   	push   %eax
    1790:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    1794:	50                   	push   %eax
    1795:	b8 10 00 00 00       	mov    $0x10,%eax
    179a:	8e d8                	mov    %eax,%ds
    179c:	8e c0                	mov    %eax,%es
    179e:	8e e0                	mov    %eax,%fs
    17a0:	ff d3                	call   *%ebx
    17a2:	83 c4 08             	add    $0x8,%esp
    17a5:	0f a1                	pop    %fs
    17a7:	07                   	pop    %es
    17a8:	1f                   	pop    %ds
    17a9:	5d                   	pop    %ebp
    17aa:	5e                   	pop    %esi
    17ab:	5f                   	pop    %edi
    17ac:	5a                   	pop    %edx
    17ad:	59                   	pop    %ecx
    17ae:	5b                   	pop    %ebx
    17af:	58                   	pop    %eax
    17b0:	cf                   	iret   

000017b1 <general_protection>:
general_protection():
    17b1:	68 1f 18 00 00       	push   $0x181f
    17b6:	eb c7                	jmp    177f <error_code>

000017b8 <invalid_TSS>:
invalid_TSS():
    17b8:	68 51 18 00 00       	push   $0x1851
    17bd:	eb c0                	jmp    177f <error_code>

000017bf <segment_not_present>:
segment_not_present():
    17bf:	68 83 18 00 00       	push   $0x1883
    17c4:	eb b9                	jmp    177f <error_code>

000017c6 <stack_segment>:
stack_segment():
    17c6:	68 6a 18 00 00       	push   $0x186a
    17cb:	eb b2                	jmp    177f <error_code>

000017cd <die>:
die():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:16
void invalid_TSS();
void segment_not_present();
void stack_segment();
int32_t printks(const char* msg);

static void die(char* str, int32_t esp_ptr, int32_t nr) {
    17cd:	55                   	push   %ebp
    17ce:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:18
    //TODO: not implement. do not have printk
    printks(str);
    17d0:	ff 75 08             	pushl  0x8(%ebp)
    17d3:	e8 ec 01 00 00       	call   19c4 <printks>
    17d8:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:20 (discriminator 1)
    //do_exit(11);
    while(1) {} //TODO: should call do_exit. but not implement
    17db:	eb fe                	jmp    17db <die+0xe>

000017dd <do_divide_error>:
do_divide_error():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:27
/**
 * NOTICE: int32_t esp is actually as pointer to esp.
 * but we still use type int32_t, according to how linux wrote.
 * its type will be cast when necessary
 */
void do_divide_error(int32_t esp, int32_t error_code) {
    17dd:	55                   	push   %ebp
    17de:	89 e5                	mov    %esp,%ebp
    17e0:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:28
    int32_t magic = 0x77887788; //magic number to check whether jump is correct
    17e3:	c7 45 fc 88 77 88 77 	movl   $0x77887788,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:29
    die("divide error", esp, error_code);
    17ea:	ff 75 0c             	pushl  0xc(%ebp)
    17ed:	ff 75 08             	pushl  0x8(%ebp)
    17f0:	68 f6 29 00 00       	push   $0x29f6
    17f5:	e8 d3 ff ff ff       	call   17cd <die>
    17fa:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:30
}
    17fd:	90                   	nop
    17fe:	c9                   	leave  
    17ff:	c3                   	ret    

00001800 <do_int3>:
do_int3():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:42
    int32_t esi,
    int32_t edi,
    int32_t edx,
    int32_t ecx,
    int32_t ebx,
    int32_t eax) {
    1800:	55                   	push   %ebp
    1801:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:44
        //TODO: empty so far.
}
    1803:	90                   	nop
    1804:	5d                   	pop    %ebp
    1805:	c3                   	ret    

00001806 <do_bounds>:
do_bounds():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:46

void do_bounds(int32_t esp, int32_t error_code) {
    1806:	55                   	push   %ebp
    1807:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:47
    die("bounds", esp, error_code);
    1809:	ff 75 0c             	pushl  0xc(%ebp)
    180c:	ff 75 08             	pushl  0x8(%ebp)
    180f:	68 03 2a 00 00       	push   $0x2a03
    1814:	e8 b4 ff ff ff       	call   17cd <die>
    1819:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:48
}
    181c:	90                   	nop
    181d:	c9                   	leave  
    181e:	c3                   	ret    

0000181f <do_general_protection>:
do_general_protection():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:50
     
void do_general_protection(int32_t esp, int32_t error_code) {
    181f:	55                   	push   %ebp
    1820:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:51
    die("general protection", esp, error_code);
    1822:	ff 75 0c             	pushl  0xc(%ebp)
    1825:	ff 75 08             	pushl  0x8(%ebp)
    1828:	68 0a 2a 00 00       	push   $0x2a0a
    182d:	e8 9b ff ff ff       	call   17cd <die>
    1832:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:52
}
    1835:	90                   	nop
    1836:	c9                   	leave  
    1837:	c3                   	ret    

00001838 <do_double_fault>:
do_double_fault():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:54
    
void do_double_fault(int32_t esp, int32_t error_code) {
    1838:	55                   	push   %ebp
    1839:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:55
    die("double fault", esp, error_code);
    183b:	ff 75 0c             	pushl  0xc(%ebp)
    183e:	ff 75 08             	pushl  0x8(%ebp)
    1841:	68 1d 2a 00 00       	push   $0x2a1d
    1846:	e8 82 ff ff ff       	call   17cd <die>
    184b:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:56
}
    184e:	90                   	nop
    184f:	c9                   	leave  
    1850:	c3                   	ret    

00001851 <do_invalid_TSS>:
do_invalid_TSS():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:57
void do_invalid_TSS(int32_t esp, int32_t error_code) {
    1851:	55                   	push   %ebp
    1852:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:58
    die("invalid TSS", esp, error_code);
    1854:	ff 75 0c             	pushl  0xc(%ebp)
    1857:	ff 75 08             	pushl  0x8(%ebp)
    185a:	68 2a 2a 00 00       	push   $0x2a2a
    185f:	e8 69 ff ff ff       	call   17cd <die>
    1864:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:59
}
    1867:	90                   	nop
    1868:	c9                   	leave  
    1869:	c3                   	ret    

0000186a <do_stack_segment>:
do_stack_segment():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:60
void do_stack_segment(int32_t esp, int32_t error_code) {
    186a:	55                   	push   %ebp
    186b:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:61
    die("stack segment", esp, error_code);
    186d:	ff 75 0c             	pushl  0xc(%ebp)
    1870:	ff 75 08             	pushl  0x8(%ebp)
    1873:	68 36 2a 00 00       	push   $0x2a36
    1878:	e8 50 ff ff ff       	call   17cd <die>
    187d:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:62
}
    1880:	90                   	nop
    1881:	c9                   	leave  
    1882:	c3                   	ret    

00001883 <do_segment_not_present>:
do_segment_not_present():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:63
void do_segment_not_present(int32_t esp, int32_t error_code) {
    1883:	55                   	push   %ebp
    1884:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:64
    die("segment not present", esp, error_code);
    1886:	ff 75 0c             	pushl  0xc(%ebp)
    1889:	ff 75 08             	pushl  0x8(%ebp)
    188c:	68 44 2a 00 00       	push   $0x2a44
    1891:	e8 37 ff ff ff       	call   17cd <die>
    1896:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:65
}
    1899:	90                   	nop
    189a:	c9                   	leave  
    189b:	c3                   	ret    

0000189c <trap_init>:
trap_init():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:66
void trap_init() {
    189c:	55                   	push   %ebp
    189d:	89 e5                	mov    %esp,%ebp
    189f:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:67
    set_trap_gate(0, &divide_error);
    18a0:	b9 b5 04 00 00       	mov    $0x4b5,%ecx
    18a5:	bb b9 04 00 00       	mov    $0x4b9,%ebx
    18aa:	ba 30 17 00 00       	mov    $0x1730,%edx
    18af:	b8 00 00 08 00       	mov    $0x80000,%eax
    18b4:	66 89 d0             	mov    %dx,%ax
    18b7:	66 ba 00 8f          	mov    $0x8f00,%dx
    18bb:	89 01                	mov    %eax,(%ecx)
    18bd:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:68
    set_trap_gate(1, &debug);
    18bf:	b9 bd 04 00 00       	mov    $0x4bd,%ecx
    18c4:	bb c1 04 00 00       	mov    $0x4c1,%ebx
    18c9:	ba 65 17 00 00       	mov    $0x1765,%edx
    18ce:	b8 00 00 08 00       	mov    $0x80000,%eax
    18d3:	66 89 d0             	mov    %dx,%ax
    18d6:	66 ba 00 8f          	mov    $0x8f00,%dx
    18da:	89 01                	mov    %eax,(%ecx)
    18dc:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:69
    set_trap_gate(3, &int3);
    18de:	b9 cd 04 00 00       	mov    $0x4cd,%ecx
    18e3:	bb d1 04 00 00       	mov    $0x4d1,%ebx
    18e8:	ba 6c 17 00 00       	mov    $0x176c,%edx
    18ed:	b8 00 00 08 00       	mov    $0x80000,%eax
    18f2:	66 89 d0             	mov    %dx,%ax
    18f5:	66 ba 00 8f          	mov    $0x8f00,%dx
    18f9:	89 01                	mov    %eax,(%ecx)
    18fb:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:70
    set_trap_gate(5, &bounds);
    18fd:	b9 dd 04 00 00       	mov    $0x4dd,%ecx
    1902:	bb e1 04 00 00       	mov    $0x4e1,%ebx
    1907:	ba 73 17 00 00       	mov    $0x1773,%edx
    190c:	b8 00 00 08 00       	mov    $0x80000,%eax
    1911:	66 89 d0             	mov    %dx,%ax
    1914:	66 ba 00 8f          	mov    $0x8f00,%dx
    1918:	89 01                	mov    %eax,(%ecx)
    191a:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:71
    set_trap_gate(8, &double_fault);
    191c:	b9 f5 04 00 00       	mov    $0x4f5,%ecx
    1921:	bb f9 04 00 00       	mov    $0x4f9,%ebx
    1926:	ba 7a 17 00 00       	mov    $0x177a,%edx
    192b:	b8 00 00 08 00       	mov    $0x80000,%eax
    1930:	66 89 d0             	mov    %dx,%ax
    1933:	66 ba 00 8f          	mov    $0x8f00,%dx
    1937:	89 01                	mov    %eax,(%ecx)
    1939:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:72
    set_trap_gate(10, &invalid_TSS);
    193b:	b9 05 05 00 00       	mov    $0x505,%ecx
    1940:	bb 09 05 00 00       	mov    $0x509,%ebx
    1945:	ba b8 17 00 00       	mov    $0x17b8,%edx
    194a:	b8 00 00 08 00       	mov    $0x80000,%eax
    194f:	66 89 d0             	mov    %dx,%ax
    1952:	66 ba 00 8f          	mov    $0x8f00,%dx
    1956:	89 01                	mov    %eax,(%ecx)
    1958:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:73
    set_trap_gate(11, &segment_not_present);
    195a:	b9 0d 05 00 00       	mov    $0x50d,%ecx
    195f:	bb 11 05 00 00       	mov    $0x511,%ebx
    1964:	ba bf 17 00 00       	mov    $0x17bf,%edx
    1969:	b8 00 00 08 00       	mov    $0x80000,%eax
    196e:	66 89 d0             	mov    %dx,%ax
    1971:	66 ba 00 8f          	mov    $0x8f00,%dx
    1975:	89 01                	mov    %eax,(%ecx)
    1977:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:74
    set_trap_gate(12, &stack_segment);
    1979:	b9 15 05 00 00       	mov    $0x515,%ecx
    197e:	bb 19 05 00 00       	mov    $0x519,%ebx
    1983:	ba c6 17 00 00       	mov    $0x17c6,%edx
    1988:	b8 00 00 08 00       	mov    $0x80000,%eax
    198d:	66 89 d0             	mov    %dx,%ax
    1990:	66 ba 00 8f          	mov    $0x8f00,%dx
    1994:	89 01                	mov    %eax,(%ecx)
    1996:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:75
    set_trap_gate(13, &general_protection);
    1998:	b9 1d 05 00 00       	mov    $0x51d,%ecx
    199d:	bb 21 05 00 00       	mov    $0x521,%ebx
    19a2:	ba b1 17 00 00       	mov    $0x17b1,%edx
    19a7:	b8 00 00 08 00       	mov    $0x80000,%eax
    19ac:	66 89 d0             	mov    %dx,%ax
    19af:	66 ba 00 8f          	mov    $0x8f00,%dx
    19b3:	89 01                	mov    %eax,(%ecx)
    19b5:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:76
    19b7:	90                   	nop
    19b8:	5b                   	pop    %ebx
    19b9:	5d                   	pop    %ebp
    19ba:	c3                   	ret    
    19bb:	66 90                	xchg   %ax,%ax
    19bd:	66 90                	xchg   %ax,%ax
    19bf:	90                   	nop

000019c0 <test_write>:
test_write():
    19c0:	1e                   	push   %ds
    19c1:	53                   	push   %ebx
    19c2:	1f                   	pop    %ds
    19c3:	c3                   	ret    

000019c4 <printks>:
printks():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:8
 * NOTICE: it is only use as a workaround.
 */
#include <stdint.h>
void putch(char);
void newline();
int32_t printks(const char* str) {
    19c4:	55                   	push   %ebp
    19c5:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:10
 
   while (*str) {
    19c7:	eb 27                	jmp    19f0 <printks+0x2c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:11
        if (*str == '\n') {
    19c9:	8b 45 08             	mov    0x8(%ebp),%eax
    19cc:	0f b6 00             	movzbl (%eax),%eax
    19cf:	3c 0a                	cmp    $0xa,%al
    19d1:	75 07                	jne    19da <printks+0x16>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:12
            newline();
    19d3:	e8 7a 00 00 00       	call   1a52 <newline>
    19d8:	eb 12                	jmp    19ec <printks+0x28>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:15
        }
        else {
            putch(*str);
    19da:	8b 45 08             	mov    0x8(%ebp),%eax
    19dd:	0f b6 00             	movzbl (%eax),%eax
    19e0:	0f be c0             	movsbl %al,%eax
    19e3:	50                   	push   %eax
    19e4:	e8 17 00 00 00       	call   1a00 <putch>
    19e9:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:17
        }
        str++;
    19ec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:10
#include <stdint.h>
void putch(char);
void newline();
int32_t printks(const char* str) {
 
   while (*str) {
    19f0:	8b 45 08             	mov    0x8(%ebp),%eax
    19f3:	0f b6 00             	movzbl (%eax),%eax
    19f6:	84 c0                	test   %al,%al
    19f8:	75 cf                	jne    19c9 <printks+0x5>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:19
        else {
            putch(*str);
        }
        str++;
    }
    19fa:	90                   	nop
    19fb:	c9                   	leave  
    19fc:	c3                   	ret    
    19fd:	66 90                	xchg   %ax,%ax
    19ff:	90                   	nop

00001a00 <putch>:
putch():
    1a00:	c8 00 00 00          	enter  $0x0,$0x0
    1a04:	53                   	push   %ebx
    1a05:	1e                   	push   %ds
    1a06:	66 56                	push   %si
    1a08:	b8 28 00 00 00       	mov    $0x28,%eax
    1a0d:	8e d8                	mov    %eax,%ds
    1a0f:	66 8b 15 00 00 00 00 	mov    0x0,%dx

00001a16 <putch.ts>:
putch.ts():
    1a16:	66 89 d1             	mov    %dx,%cx
    1a19:	66 41                	inc    %cx
    1a1b:	80 f9 50             	cmp    $0x50,%cl
    1a1e:	75 04                	jne    1a24 <putch.writeback>
    1a20:	b1 00                	mov    $0x0,%cl
    1a22:	fe c5                	inc    %ch

00001a24 <putch.writeback>:
putch.writeback():
    1a24:	66 89 0d 00 00 00 00 	mov    %cx,0x0
    1a2b:	88 f0                	mov    %dh,%al
    1a2d:	b4 a0                	mov    $0xa0,%ah
    1a2f:	f6 e4                	mul    %ah
    1a31:	30 f6                	xor    %dh,%dh
    1a33:	66 01 d0             	add    %dx,%ax
    1a36:	66 01 d0             	add    %dx,%ax
    1a39:	66 89 c6             	mov    %ax,%si
    1a3c:	b8 20 00 00 00       	mov    $0x20,%eax
    1a41:	8e d8                	mov    %eax,%ds
    1a43:	8a 5d 08             	mov    0x8(%ebp),%bl
    1a46:	b7 07                	mov    $0x7,%bh
    1a48:	66 67 89 1c          	mov    %bx,(%si)
    1a4c:	66 5e                	pop    %si
    1a4e:	1f                   	pop    %ds
    1a4f:	5b                   	pop    %ebx
    1a50:	c9                   	leave  
    1a51:	c3                   	ret    

00001a52 <newline>:
newline():
    1a52:	c8 00 00 00          	enter  $0x0,$0x0
    1a56:	1e                   	push   %ds
    1a57:	b8 28 00 00 00       	mov    $0x28,%eax
    1a5c:	8e d8                	mov    %eax,%ds
    1a5e:	66 8b 15 00 00 00 00 	mov    0x0,%dx
    1a65:	30 d2                	xor    %dl,%dl
    1a67:	fe c6                	inc    %dh
    1a69:	80 fe 18             	cmp    $0x18,%dh
    1a6c:	75 02                	jne    1a70 <newline.writeback>
    1a6e:	b6 00                	mov    $0x0,%dh

00001a70 <newline.writeback>:
newline.writeback():
    1a70:	66 89 15 00 00 00 00 	mov    %dx,0x0
    1a77:	1f                   	pop    %ds
    1a78:	c9                   	leave  
    1a79:	c3                   	ret    

00001a7a <I_AM_HERE>:
I_AM_HERE():
    1a7a:	c8 00 00 00          	enter  $0x0,$0x0
    1a7e:	53                   	push   %ebx
    1a7f:	1e                   	push   %ds
    1a80:	b8 20 00 00 00       	mov    $0x20,%eax
    1a85:	8e d8                	mov    %eax,%ds
    1a87:	8b 5d 08             	mov    0x8(%ebp),%ebx
    1a8a:	01 db                	add    %ebx,%ebx
    1a8c:	fe 03                	incb   (%ebx)
    1a8e:	fe 43 01             	incb   0x1(%ebx)
    1a91:	1f                   	pop    %ds
    1a92:	5b                   	pop    %ebx
    1a93:	c9                   	leave  
    1a94:	c3                   	ret    
    1a95:	66 90                	xchg   %ax,%ax
    1a97:	66 90                	xchg   %ax,%ax
    1a99:	66 90                	xchg   %ax,%ax
    1a9b:	66 90                	xchg   %ax,%ax
    1a9d:	66 90                	xchg   %ax,%ax
    1a9f:	90                   	nop

00001aa0 <bad_sys_call>:
bad_sys_call():
    1aa0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1aa5:	cf                   	iret   

00001aa6 <system_call>:
system_call():
    1aa6:	83 f8 48             	cmp    $0x48,%eax
    1aa9:	77 f5                	ja     1aa0 <bad_sys_call>
    1aab:	50                   	push   %eax
    1aac:	51                   	push   %ecx
    1aad:	52                   	push   %edx
    1aae:	53                   	push   %ebx
    1aaf:	6a 00                	push   $0x0
    1ab1:	55                   	push   %ebp
    1ab2:	56                   	push   %esi
    1ab3:	57                   	push   %edi
    1ab4:	06                   	push   %es
    1ab5:	16                   	push   %ss
    1ab6:	1e                   	push   %ds
    1ab7:	0f a0                	push   %fs
    1ab9:	0f a8                	push   %gs
    1abb:	83 ec 04             	sub    $0x4,%esp
    1abe:	89 24 24             	mov    %esp,(%esp)
    1ac1:	e8 79 06 00 00       	call   213f <sys_save>
    1ac6:	8b 44 24 34          	mov    0x34(%esp),%eax
    1aca:	ba 10 00 00 00       	mov    $0x10,%edx
    1acf:	8e da                	mov    %edx,%ds
    1ad1:	8e c2                	mov    %edx,%es
    1ad3:	8e e2                	mov    %edx,%fs
    1ad5:	8e ea                	mov    %edx,%gs
    1ad7:	8b 5c 24 28          	mov    0x28(%esp),%ebx
    1adb:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    1adf:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    1ae3:	52                   	push   %edx
    1ae4:	51                   	push   %ecx
    1ae5:	53                   	push   %ebx
    1ae6:	ff 14 85 60 31 00 00 	call   *0x3160(,%eax,4)
    1aed:	83 c4 0c             	add    $0xc,%esp
    1af0:	50                   	push   %eax

00001af1 <system_call.final>:
system_call.final():
    1af1:	58                   	pop    %eax
    1af2:	83 c4 04             	add    $0x4,%esp
    1af5:	0f a9                	pop    %gs
    1af7:	0f a1                	pop    %fs
    1af9:	1f                   	pop    %ds
    1afa:	17                   	pop    %ss
    1afb:	07                   	pop    %es
    1afc:	5f                   	pop    %edi
    1afd:	5e                   	pop    %esi
    1afe:	5d                   	pop    %ebp
    1aff:	83 c4 04             	add    $0x4,%esp
    1b02:	5b                   	pop    %ebx
    1b03:	5a                   	pop    %edx
    1b04:	59                   	pop    %ecx
    1b05:	58                   	pop    %eax
    1b06:	8b 44 24 c4          	mov    -0x3c(%esp),%eax
    1b0a:	cf                   	iret   

00001b0b <timer_interrupt>:
timer_interrupt():
    1b0b:	50                   	push   %eax
    1b0c:	51                   	push   %ecx
    1b0d:	52                   	push   %edx
    1b0e:	53                   	push   %ebx
    1b0f:	6a 00                	push   $0x0
    1b11:	55                   	push   %ebp
    1b12:	56                   	push   %esi
    1b13:	57                   	push   %edi
    1b14:	06                   	push   %es
    1b15:	16                   	push   %ss
    1b16:	1e                   	push   %ds
    1b17:	0f a0                	push   %fs
    1b19:	0f a8                	push   %gs
    1b1b:	b8 10 00 00 00       	mov    $0x10,%eax
    1b20:	8e c0                	mov    %eax,%es
    1b22:	8e d0                	mov    %eax,%ss
    1b24:	8e d8                	mov    %eax,%ds
    1b26:	8e e0                	mov    %eax,%fs
    1b28:	8e e8                	mov    %eax,%gs
    1b2a:	83 ec 04             	sub    $0x4,%esp
    1b2d:	89 24 24             	mov    %esp,(%esp)
    1b30:	e8 0a 06 00 00       	call   213f <sys_save>

00001b35 <return_from_timer_interrupt>:
return_from_timer_interrupt():
    1b35:	6a 14                	push   $0x14
    1b37:	e8 3e ff ff ff       	call   1a7a <I_AM_HERE>
    1b3c:	83 c4 04             	add    $0x4,%esp
    1b3f:	b0 20                	mov    $0x20,%al
    1b41:	e6 20                	out    %al,$0x20
    1b43:	e8 da 07 00 00       	call   2322 <schedule>
    1b48:	50                   	push   %eax
    1b49:	e8 6d 07 00 00       	call   22bb <sys_restart>

00001b4e <return_from_sys_restart>:
return_from_sys_restart():
    1b4e:	83 c4 04             	add    $0x4,%esp
    1b51:	0f a9                	pop    %gs
    1b53:	0f a1                	pop    %fs
    1b55:	1f                   	pop    %ds
    1b56:	17                   	pop    %ss
    1b57:	07                   	pop    %es
    1b58:	5f                   	pop    %edi
    1b59:	5e                   	pop    %esi
    1b5a:	5d                   	pop    %ebp
    1b5b:	83 c4 04             	add    $0x4,%esp
    1b5e:	5b                   	pop    %ebx
    1b5f:	5a                   	pop    %edx
    1b60:	59                   	pop    %ecx
    1b61:	58                   	pop    %eax
    1b62:	cf                   	iret   

00001b63 <test_print>:
test_print():
    1b63:	83 ec 0c             	sub    $0xc,%esp
    1b66:	83 ec 0c             	sub    $0xc,%esp
    1b69:	68 58 2a 00 00       	push   $0x2a58
    1b6e:	e8 51 fe ff ff       	call   19c4 <printks>
    1b73:	83 c4 10             	add    $0x10,%esp
    1b76:	83 ec 0c             	sub    $0xc,%esp
    1b79:	68 6e 2a 00 00       	push   $0x2a6e
    1b7e:	e8 41 fe ff ff       	call   19c4 <printks>
    1b83:	83 c4 10             	add    $0x10,%esp
    1b86:	b8 00 00 00 00       	mov    $0x0,%eax
    1b8b:	83 c4 0c             	add    $0xc,%esp
    1b8e:	c3                   	ret    

00001b8f <print_hello>:
print_hello():
    1b8f:	83 ec 0c             	sub    $0xc,%esp
    1b92:	83 ec 0c             	sub    $0xc,%esp
    1b95:	68 20 30 00 00       	push   $0x3020
    1b9a:	e8 25 fe ff ff       	call   19c4 <printks>
    1b9f:	83 c4 10             	add    $0x10,%esp
    1ba2:	0f b6 05 20 30 00 00 	movzbl 0x3020,%eax
    1ba9:	83 c0 01             	add    $0x1,%eax
    1bac:	a2 20 30 00 00       	mov    %al,0x3020
    1bb1:	b8 00 00 00 00       	mov    $0x0,%eax
    1bb6:	83 c4 0c             	add    $0xc,%esp
    1bb9:	c3                   	ret    

00001bba <sys_fork>:
sys_fork():
    1bba:	83 ec 1c             	sub    $0x1c,%esp
    1bbd:	83 ec 0c             	sub    $0xc,%esp
    1bc0:	68 84 2a 00 00       	push   $0x2a84
    1bc5:	e8 fa fd ff ff       	call   19c4 <printks>
    1bca:	83 c4 10             	add    $0x10,%esp
    1bcd:	e8 68 08 00 00       	call   243a <first_empty_pcb>
    1bd2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1bd6:	83 7c 24 0c ff       	cmpl   $0xffffffff,0xc(%esp)
    1bdb:	75 07                	jne    1be4 <sys_fork+0x2a>
    1bdd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1be2:	eb 2b                	jmp    1c0f <sys_fork+0x55>
    1be4:	a1 80 46 00 00       	mov    0x4680,%eax
    1be9:	83 ec 08             	sub    $0x8,%esp
    1bec:	50                   	push   %eax
    1bed:	ff 74 24 18          	pushl  0x18(%esp)
    1bf1:	e8 a0 08 00 00       	call   2496 <copy_process>
    1bf6:	83 c4 10             	add    $0x10,%esp
    1bf9:	a1 80 46 00 00       	mov    0x4680,%eax
    1bfe:	c1 e0 02             	shl    $0x2,%eax
    1c01:	89 c2                	mov    %eax,%edx
    1c03:	c1 e2 04             	shl    $0x4,%edx
    1c06:	01 d0                	add    %edx,%eax
    1c08:	05 80 35 00 00       	add    $0x3580,%eax
    1c0d:	8b 00                	mov    (%eax),%eax
    1c0f:	83 c4 1c             	add    $0x1c,%esp
    1c12:	c3                   	ret    

00001c13 <sys_wait>:
sys_wait():
    1c13:	a1 80 46 00 00       	mov    0x4680,%eax
    1c18:	c1 e0 02             	shl    $0x2,%eax
    1c1b:	89 c2                	mov    %eax,%edx
    1c1d:	c1 e2 04             	shl    $0x4,%edx
    1c20:	01 d0                	add    %edx,%eax
    1c22:	05 bc 35 00 00       	add    $0x35bc,%eax
    1c27:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    1c2d:	ea 35 1b 00 00 08 00 	ljmp   $0x8,$0x1b35
    1c34:	b8 01 00 00 00       	mov    $0x1,%eax
    1c39:	c3                   	ret    

00001c3a <sys_exit>:
sys_exit():
    1c3a:	83 ec 10             	sub    $0x10,%esp
    1c3d:	a1 80 46 00 00       	mov    0x4680,%eax
    1c42:	c1 e0 02             	shl    $0x2,%eax
    1c45:	89 c2                	mov    %eax,%edx
    1c47:	c1 e2 04             	shl    $0x4,%edx
    1c4a:	01 d0                	add    %edx,%eax
    1c4c:	05 bc 35 00 00       	add    $0x35bc,%eax
    1c51:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1c57:	a1 80 46 00 00       	mov    0x4680,%eax
    1c5c:	c1 e0 02             	shl    $0x2,%eax
    1c5f:	89 c2                	mov    %eax,%edx
    1c61:	c1 e2 04             	shl    $0x4,%edx
    1c64:	01 d0                	add    %edx,%eax
    1c66:	05 c0 35 00 00       	add    $0x35c0,%eax
    1c6b:	8b 00                	mov    (%eax),%eax
    1c6d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1c71:	83 7c 24 0c ff       	cmpl   $0xffffffff,0xc(%esp)
    1c76:	74 33                	je     1cab <sys_exit+0x71>
    1c78:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1c7c:	c1 e0 02             	shl    $0x2,%eax
    1c7f:	89 c2                	mov    %eax,%edx
    1c81:	c1 e2 04             	shl    $0x4,%edx
    1c84:	01 d0                	add    %edx,%eax
    1c86:	05 bc 35 00 00       	add    $0x35bc,%eax
    1c8b:	8b 00                	mov    (%eax),%eax
    1c8d:	83 f8 02             	cmp    $0x2,%eax
    1c90:	75 19                	jne    1cab <sys_exit+0x71>
    1c92:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1c96:	c1 e0 02             	shl    $0x2,%eax
    1c99:	89 c2                	mov    %eax,%edx
    1c9b:	c1 e2 04             	shl    $0x4,%edx
    1c9e:	01 d0                	add    %edx,%eax
    1ca0:	05 bc 35 00 00       	add    $0x35bc,%eax
    1ca5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1cab:	ea 35 1b 00 00 08 00 	ljmp   $0x8,$0x1b35
    1cb2:	b8 01 00 00 00       	mov    $0x1,%eax
    1cb7:	83 c4 10             	add    $0x10,%esp
    1cba:	c3                   	ret    

00001cbb <do_getsem>:
do_getsem():
    1cbb:	83 ec 10             	sub    $0x10,%esp
    1cbe:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    1cc5:	00 
    1cc6:	eb 60                	jmp    1d28 <do_getsem+0x6d>
    1cc8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1ccc:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1cd2:	05 28 48 00 00       	add    $0x4828,%eax
    1cd7:	8b 00                	mov    (%eax),%eax
    1cd9:	85 c0                	test   %eax,%eax
    1cdb:	75 46                	jne    1d23 <do_getsem+0x68>
    1cdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1ce1:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1ce7:	05 28 48 00 00       	add    $0x4828,%eax
    1cec:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1cf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1cf6:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1cfc:	8d 90 20 47 00 00    	lea    0x4720(%eax),%edx
    1d02:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d06:	89 02                	mov    %eax,(%edx)
    1d08:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d0c:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d12:	05 24 48 00 00       	add    $0x4824,%eax
    1d17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    1d1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d21:	eb 14                	jmp    1d37 <do_getsem+0x7c>
    1d23:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    1d28:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
    1d2f:	00 
    1d30:	7e 96                	jle    1cc8 <do_getsem+0xd>
    1d32:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1d37:	83 c4 10             	add    $0x10,%esp
    1d3a:	c3                   	ret    

00001d3b <do_free_sem>:
do_free_sem():
    1d3b:	8b 44 24 04          	mov    0x4(%esp),%eax
    1d3f:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d45:	05 28 48 00 00       	add    $0x4828,%eax
    1d4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    1d50:	b8 00 00 00 00       	mov    $0x0,%eax
    1d55:	c3                   	ret    

00001d56 <do_p>:
do_p():
    1d56:	83 ec 10             	sub    $0x10,%esp
    1d59:	fa                   	cli    
    1d5a:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d5e:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d64:	05 20 47 00 00       	add    $0x4720,%eax
    1d69:	8b 00                	mov    (%eax),%eax
    1d6b:	8d 50 ff             	lea    -0x1(%eax),%edx
    1d6e:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d72:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d78:	05 20 47 00 00       	add    $0x4720,%eax
    1d7d:	89 10                	mov    %edx,(%eax)
    1d7f:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d83:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d89:	05 20 47 00 00       	add    $0x4720,%eax
    1d8e:	8b 00                	mov    (%eax),%eax
    1d90:	85 c0                	test   %eax,%eax
    1d92:	79 60                	jns    1df4 <do_p+0x9e>
    1d94:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d98:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d9e:	05 24 48 00 00       	add    $0x4824,%eax
    1da3:	8b 00                	mov    (%eax),%eax
    1da5:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1da9:	a1 80 46 00 00       	mov    0x4680,%eax
    1dae:	8b 54 24 14          	mov    0x14(%esp),%edx
    1db2:	6b ca 43             	imul   $0x43,%edx,%ecx
    1db5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    1db9:	01 ca                	add    %ecx,%edx
    1dbb:	89 04 95 24 47 00 00 	mov    %eax,0x4724(,%edx,4)
    1dc2:	8b 44 24 14          	mov    0x14(%esp),%eax
    1dc6:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1dcc:	05 24 48 00 00       	add    $0x4824,%eax
    1dd1:	8b 00                	mov    (%eax),%eax
    1dd3:	8d 50 01             	lea    0x1(%eax),%edx
    1dd6:	8b 44 24 14          	mov    0x14(%esp),%eax
    1dda:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1de0:	05 24 48 00 00       	add    $0x4824,%eax
    1de5:	89 10                	mov    %edx,(%eax)
    1de7:	fa                   	cli    
    1de8:	b8 03 00 00 00       	mov    $0x3,%eax
    1ded:	cd 80                	int    $0x80
    1def:	89 44 24 08          	mov    %eax,0x8(%esp)
    1df3:	fb                   	sti    
    1df4:	fb                   	sti    
    1df5:	b8 00 00 00 00       	mov    $0x0,%eax
    1dfa:	83 c4 10             	add    $0x10,%esp
    1dfd:	c3                   	ret    

00001dfe <do_v>:
do_v():
    1dfe:	83 ec 10             	sub    $0x10,%esp
    1e01:	fa                   	cli    
    1e02:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e06:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e0c:	05 20 47 00 00       	add    $0x4720,%eax
    1e11:	8b 00                	mov    (%eax),%eax
    1e13:	8d 50 01             	lea    0x1(%eax),%edx
    1e16:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e1a:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e20:	05 20 47 00 00       	add    $0x4720,%eax
    1e25:	89 10                	mov    %edx,(%eax)
    1e27:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e2b:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e31:	05 20 47 00 00       	add    $0x4720,%eax
    1e36:	8b 00                	mov    (%eax),%eax
    1e38:	89 44 24 08          	mov    %eax,0x8(%esp)
    1e3c:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e40:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e46:	05 20 47 00 00       	add    $0x4720,%eax
    1e4b:	8b 00                	mov    (%eax),%eax
    1e4d:	85 c0                	test   %eax,%eax
    1e4f:	0f 8f ad 00 00 00    	jg     1f02 <do_v+0x104>
    1e55:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e59:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e5f:	05 24 48 00 00       	add    $0x4824,%eax
    1e64:	8b 00                	mov    (%eax),%eax
    1e66:	89 44 24 04          	mov    %eax,0x4(%esp)
    1e6a:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e6e:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e74:	05 24 47 00 00       	add    $0x4724,%eax
    1e79:	8b 00                	mov    (%eax),%eax
    1e7b:	89 04 24             	mov    %eax,(%esp)
    1e7e:	8b 04 24             	mov    (%esp),%eax
    1e81:	c1 e0 02             	shl    $0x2,%eax
    1e84:	89 c2                	mov    %eax,%edx
    1e86:	c1 e2 04             	shl    $0x4,%edx
    1e89:	01 d0                	add    %edx,%eax
    1e8b:	05 bc 35 00 00       	add    $0x35bc,%eax
    1e90:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1e96:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    1e9d:	00 
    1e9e:	eb 30                	jmp    1ed0 <do_v+0xd2>
    1ea0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1ea4:	8d 50 01             	lea    0x1(%eax),%edx
    1ea7:	8b 44 24 14          	mov    0x14(%esp),%eax
    1eab:	6b c0 43             	imul   $0x43,%eax,%eax
    1eae:	01 d0                	add    %edx,%eax
    1eb0:	8b 04 85 24 47 00 00 	mov    0x4724(,%eax,4),%eax
    1eb7:	8b 54 24 14          	mov    0x14(%esp),%edx
    1ebb:	6b ca 43             	imul   $0x43,%edx,%ecx
    1ebe:	8b 54 24 0c          	mov    0xc(%esp),%edx
    1ec2:	01 ca                	add    %ecx,%edx
    1ec4:	89 04 95 24 47 00 00 	mov    %eax,0x4724(,%edx,4)
    1ecb:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    1ed0:	8b 44 24 04          	mov    0x4(%esp),%eax
    1ed4:	83 e8 01             	sub    $0x1,%eax
    1ed7:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    1edb:	7f c3                	jg     1ea0 <do_v+0xa2>
    1edd:	8b 44 24 14          	mov    0x14(%esp),%eax
    1ee1:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1ee7:	05 24 48 00 00       	add    $0x4824,%eax
    1eec:	8b 00                	mov    (%eax),%eax
    1eee:	8d 50 ff             	lea    -0x1(%eax),%edx
    1ef1:	8b 44 24 14          	mov    0x14(%esp),%eax
    1ef5:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1efb:	05 24 48 00 00       	add    $0x4824,%eax
    1f00:	89 10                	mov    %edx,(%eax)
    1f02:	fb                   	sti    
    1f03:	b8 00 00 00 00       	mov    $0x0,%eax
    1f08:	83 c4 10             	add    $0x10,%esp
    1f0b:	c3                   	ret    

00001f0c <init_sys_call>:
init_sys_call():
    1f0c:	c7 05 60 31 00 00 63 	movl   $0x1b63,0x3160
    1f13:	1b 00 00 
    1f16:	c7 05 64 31 00 00 8f 	movl   $0x1b8f,0x3164
    1f1d:	1b 00 00 
    1f20:	c7 05 68 31 00 00 ba 	movl   $0x1bba,0x3168
    1f27:	1b 00 00 
    1f2a:	c7 05 6c 31 00 00 13 	movl   $0x1c13,0x316c
    1f31:	1c 00 00 
    1f34:	c7 05 70 31 00 00 3a 	movl   $0x1c3a,0x3170
    1f3b:	1c 00 00 
    1f3e:	c7 05 74 31 00 00 bb 	movl   $0x1cbb,0x3174
    1f45:	1c 00 00 
    1f48:	c7 05 78 31 00 00 3b 	movl   $0x1d3b,0x3178
    1f4f:	1d 00 00 
    1f52:	c7 05 7c 31 00 00 56 	movl   $0x1d56,0x317c
    1f59:	1d 00 00 
    1f5c:	c7 05 80 31 00 00 fe 	movl   $0x1dfe,0x3180
    1f63:	1d 00 00 
    1f66:	90                   	nop
    1f67:	c3                   	ret    

00001f68 <sched_init>:
sched_init():
    1f68:	55                   	push   %ebp
    1f69:	57                   	push   %edi
    1f6a:	56                   	push   %esi
    1f6b:	53                   	push   %ebx
    1f6c:	83 ec 1c             	sub    $0x1c,%esp
    1f6f:	c7 05 28 30 00 00 02 	movl   $0x2,0x3028
    1f76:	00 00 00 
    1f79:	c7 05 80 46 00 00 00 	movl   $0x0,0x4680
    1f80:	00 00 00 
    1f83:	b8 40 30 00 00       	mov    $0x3040,%eax
    1f88:	ba e5 0c 00 00       	mov    $0xce5,%edx
    1f8d:	b9 e7 0c 00 00       	mov    $0xce7,%ecx
    1f92:	bb e9 0c 00 00       	mov    $0xce9,%ebx
    1f97:	be ea 0c 00 00       	mov    $0xcea,%esi
    1f9c:	bf eb 0c 00 00       	mov    $0xceb,%edi
    1fa1:	bd ec 0c 00 00       	mov    $0xcec,%ebp
    1fa6:	66 c7 02 68 00       	movw   $0x68,(%edx)
    1fab:	66 89 01             	mov    %ax,(%ecx)
    1fae:	c1 c8 10             	ror    $0x10,%eax
    1fb1:	88 03                	mov    %al,(%ebx)
    1fb3:	c6 06 89             	movb   $0x89,(%esi)
    1fb6:	c6 07 00             	movb   $0x0,(%edi)
    1fb9:	88 65 00             	mov    %ah,0x0(%ebp)
    1fbc:	c1 c8 10             	ror    $0x10,%eax
    1fbf:	b8 14 31 00 00       	mov    $0x3114,%eax
    1fc4:	ba ed 0c 00 00       	mov    $0xced,%edx
    1fc9:	b9 ef 0c 00 00       	mov    $0xcef,%ecx
    1fce:	bb f1 0c 00 00       	mov    $0xcf1,%ebx
    1fd3:	be f2 0c 00 00       	mov    $0xcf2,%esi
    1fd8:	bf f3 0c 00 00       	mov    $0xcf3,%edi
    1fdd:	bd f4 0c 00 00       	mov    $0xcf4,%ebp
    1fe2:	66 c7 02 68 00       	movw   $0x68,(%edx)
    1fe7:	66 89 01             	mov    %ax,(%ecx)
    1fea:	c1 c8 10             	ror    $0x10,%eax
    1fed:	88 03                	mov    %al,(%ebx)
    1fef:	c6 06 82             	movb   $0x82,(%esi)
    1ff2:	c6 07 00             	movb   $0x0,(%edi)
    1ff5:	88 65 00             	mov    %ah,0x0(%ebp)
    1ff8:	c1 c8 10             	ror    $0x10,%eax
    1ffb:	c7 44 24 08 f5 0c 00 	movl   $0xcf5,0x8(%esp)
    2002:	00 
    2003:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    200a:	00 
    200b:	eb 58                	jmp    2065 <sched_init+0xfd>
    200d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2011:	c1 e0 02             	shl    $0x2,%eax
    2014:	89 c2                	mov    %eax,%edx
    2016:	c1 e2 04             	shl    $0x4,%edx
    2019:	01 d0                	add    %edx,%eax
    201b:	05 bc 35 00 00       	add    $0x35bc,%eax
    2020:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    2026:	8b 44 24 08          	mov    0x8(%esp),%eax
    202a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    2031:	8b 44 24 08          	mov    0x8(%esp),%eax
    2035:	8b 50 04             	mov    0x4(%eax),%edx
    2038:	8b 44 24 08          	mov    0x8(%esp),%eax
    203c:	89 10                	mov    %edx,(%eax)
    203e:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
    2043:	8b 44 24 08          	mov    0x8(%esp),%eax
    2047:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    204e:	8b 44 24 08          	mov    0x8(%esp),%eax
    2052:	8b 50 04             	mov    0x4(%eax),%edx
    2055:	8b 44 24 08          	mov    0x8(%esp),%eax
    2059:	89 10                	mov    %edx,(%eax)
    205b:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
    2060:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    2065:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    206a:	7e a1                	jle    200d <sched_init+0xa5>
    206c:	9c                   	pushf  
    206d:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    2074:	9d                   	popf   
    2075:	b8 30 00 00 00       	mov    $0x30,%eax
    207a:	0f 00 d8             	ltr    %ax
    207d:	b8 38 00 00 00       	mov    $0x38,%eax
    2082:	0f 00 d0             	lldt   %ax
    2085:	b8 36 00 00 00       	mov    $0x36,%eax
    208a:	ba 43 00 00 00       	mov    $0x43,%edx
    208f:	ee                   	out    %al,(%dx)
    2090:	eb 00                	jmp    2092 <sched_init+0x12a>
    2092:	eb 00                	jmp    2094 <sched_init+0x12c>
    2094:	b8 9b 00 00 00       	mov    $0x9b,%eax
    2099:	ba 40 00 00 00       	mov    $0x40,%edx
    209e:	ee                   	out    %al,(%dx)
    209f:	eb 00                	jmp    20a1 <sched_init+0x139>
    20a1:	eb 00                	jmp    20a3 <sched_init+0x13b>
    20a3:	b8 2e 00 00 00       	mov    $0x2e,%eax
    20a8:	ba 40 00 00 00       	mov    $0x40,%edx
    20ad:	ee                   	out    %al,(%dx)
    20ae:	eb 00                	jmp    20b0 <sched_init+0x148>
    20b0:	eb 00                	jmp    20b2 <sched_init+0x14a>
    20b2:	b9 b5 05 00 00       	mov    $0x5b5,%ecx
    20b7:	bb b9 05 00 00       	mov    $0x5b9,%ebx
    20bc:	ba 0b 1b 00 00       	mov    $0x1b0b,%edx
    20c1:	b8 00 00 08 00       	mov    $0x80000,%eax
    20c6:	66 89 d0             	mov    %dx,%ax
    20c9:	66 ba 00 8e          	mov    $0x8e00,%dx
    20cd:	89 01                	mov    %eax,(%ecx)
    20cf:	89 13                	mov    %edx,(%ebx)
    20d1:	b8 21 00 00 00       	mov    $0x21,%eax
    20d6:	89 c2                	mov    %eax,%edx
    20d8:	ec                   	in     (%dx),%al
    20d9:	eb 00                	jmp    20db <sched_init+0x173>
    20db:	eb 00                	jmp    20dd <sched_init+0x175>
    20dd:	88 44 24 07          	mov    %al,0x7(%esp)
    20e1:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    20e6:	0f b6 c0             	movzbl %al,%eax
    20e9:	83 e0 fe             	and    $0xfffffffe,%eax
    20ec:	ba 21 00 00 00       	mov    $0x21,%edx
    20f1:	ee                   	out    %al,(%dx)
    20f2:	b9 b5 08 00 00       	mov    $0x8b5,%ecx
    20f7:	bb b9 08 00 00       	mov    $0x8b9,%ebx
    20fc:	ba a6 1a 00 00       	mov    $0x1aa6,%edx
    2101:	b8 00 00 08 00       	mov    $0x80000,%eax
    2106:	66 89 d0             	mov    %dx,%ax
    2109:	66 ba 00 ef          	mov    $0xef00,%dx
    210d:	89 01                	mov    %eax,(%ecx)
    210f:	89 13                	mov    %edx,(%ebx)
    2111:	e8 09 00 00 00       	call   211f <init_first_process>
    2116:	90                   	nop
    2117:	83 c4 1c             	add    $0x1c,%esp
    211a:	5b                   	pop    %ebx
    211b:	5e                   	pop    %esi
    211c:	5f                   	pop    %edi
    211d:	5d                   	pop    %ebp
    211e:	c3                   	ret    

0000211f <init_first_process>:
init_first_process():
    211f:	c7 05 b8 35 00 00 00 	movl   $0x0,0x35b8
    2126:	00 00 00 
    2129:	c7 05 bc 35 00 00 00 	movl   $0x0,0x35bc
    2130:	00 00 00 
    2133:	c7 05 c0 35 00 00 ff 	movl   $0xffffffff,0x35c0
    213a:	ff ff ff 
    213d:	90                   	nop
    213e:	c3                   	ret    

0000213f <sys_save>:
sys_save():
    213f:	a1 80 46 00 00       	mov    0x4680,%eax
    2144:	c1 e0 02             	shl    $0x2,%eax
    2147:	89 c2                	mov    %eax,%edx
    2149:	c1 e2 04             	shl    $0x4,%edx
    214c:	01 d0                	add    %edx,%eax
    214e:	8d 90 80 35 00 00    	lea    0x3580(%eax),%edx
    2154:	8b 44 24 38          	mov    0x38(%esp),%eax
    2158:	89 02                	mov    %eax,(%edx)
    215a:	a1 80 46 00 00       	mov    0x4680,%eax
    215f:	c1 e0 02             	shl    $0x2,%eax
    2162:	89 c2                	mov    %eax,%edx
    2164:	c1 e2 04             	shl    $0x4,%edx
    2167:	01 d0                	add    %edx,%eax
    2169:	8d 90 84 35 00 00    	lea    0x3584(%eax),%edx
    216f:	8b 44 24 34          	mov    0x34(%esp),%eax
    2173:	89 02                	mov    %eax,(%edx)
    2175:	a1 80 46 00 00       	mov    0x4680,%eax
    217a:	c1 e0 02             	shl    $0x2,%eax
    217d:	89 c2                	mov    %eax,%edx
    217f:	c1 e2 04             	shl    $0x4,%edx
    2182:	01 d0                	add    %edx,%eax
    2184:	8d 90 88 35 00 00    	lea    0x3588(%eax),%edx
    218a:	8b 44 24 30          	mov    0x30(%esp),%eax
    218e:	89 02                	mov    %eax,(%edx)
    2190:	a1 80 46 00 00       	mov    0x4680,%eax
    2195:	c1 e0 02             	shl    $0x2,%eax
    2198:	89 c2                	mov    %eax,%edx
    219a:	c1 e2 04             	shl    $0x4,%edx
    219d:	01 d0                	add    %edx,%eax
    219f:	8d 90 8c 35 00 00    	lea    0x358c(%eax),%edx
    21a5:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    21a9:	89 02                	mov    %eax,(%edx)
    21ab:	a1 80 46 00 00       	mov    0x4680,%eax
    21b0:	c1 e0 02             	shl    $0x2,%eax
    21b3:	89 c2                	mov    %eax,%edx
    21b5:	c1 e2 04             	shl    $0x4,%edx
    21b8:	01 d0                	add    %edx,%eax
    21ba:	8d 90 94 35 00 00    	lea    0x3594(%eax),%edx
    21c0:	8b 44 24 24          	mov    0x24(%esp),%eax
    21c4:	89 02                	mov    %eax,(%edx)
    21c6:	a1 80 46 00 00       	mov    0x4680,%eax
    21cb:	c1 e0 02             	shl    $0x2,%eax
    21ce:	89 c2                	mov    %eax,%edx
    21d0:	c1 e2 04             	shl    $0x4,%edx
    21d3:	01 d0                	add    %edx,%eax
    21d5:	8d 90 98 35 00 00    	lea    0x3598(%eax),%edx
    21db:	8b 44 24 20          	mov    0x20(%esp),%eax
    21df:	89 02                	mov    %eax,(%edx)
    21e1:	a1 80 46 00 00       	mov    0x4680,%eax
    21e6:	c1 e0 02             	shl    $0x2,%eax
    21e9:	89 c2                	mov    %eax,%edx
    21eb:	c1 e2 04             	shl    $0x4,%edx
    21ee:	01 d0                	add    %edx,%eax
    21f0:	8d 90 9c 35 00 00    	lea    0x359c(%eax),%edx
    21f6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    21fa:	89 02                	mov    %eax,(%edx)
    21fc:	a1 80 46 00 00       	mov    0x4680,%eax
    2201:	c1 e0 02             	shl    $0x2,%eax
    2204:	89 c2                	mov    %eax,%edx
    2206:	c1 e2 04             	shl    $0x4,%edx
    2209:	01 d0                	add    %edx,%eax
    220b:	8d 90 a0 35 00 00    	lea    0x35a0(%eax),%edx
    2211:	8b 44 24 18          	mov    0x18(%esp),%eax
    2215:	89 02                	mov    %eax,(%edx)
    2217:	a1 80 46 00 00       	mov    0x4680,%eax
    221c:	c1 e0 02             	shl    $0x2,%eax
    221f:	89 c2                	mov    %eax,%edx
    2221:	c1 e2 04             	shl    $0x4,%edx
    2224:	01 d0                	add    %edx,%eax
    2226:	8d 90 a4 35 00 00    	lea    0x35a4(%eax),%edx
    222c:	8b 44 24 14          	mov    0x14(%esp),%eax
    2230:	89 02                	mov    %eax,(%edx)
    2232:	a1 80 46 00 00       	mov    0x4680,%eax
    2237:	c1 e0 02             	shl    $0x2,%eax
    223a:	89 c2                	mov    %eax,%edx
    223c:	c1 e2 04             	shl    $0x4,%edx
    223f:	01 d0                	add    %edx,%eax
    2241:	8d 90 a8 35 00 00    	lea    0x35a8(%eax),%edx
    2247:	8b 44 24 10          	mov    0x10(%esp),%eax
    224b:	89 02                	mov    %eax,(%edx)
    224d:	a1 80 46 00 00       	mov    0x4680,%eax
    2252:	c1 e0 02             	shl    $0x2,%eax
    2255:	89 c2                	mov    %eax,%edx
    2257:	c1 e2 04             	shl    $0x4,%edx
    225a:	01 d0                	add    %edx,%eax
    225c:	8d 90 ac 35 00 00    	lea    0x35ac(%eax),%edx
    2262:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2266:	89 02                	mov    %eax,(%edx)
    2268:	a1 80 46 00 00       	mov    0x4680,%eax
    226d:	c1 e0 02             	shl    $0x2,%eax
    2270:	89 c2                	mov    %eax,%edx
    2272:	c1 e2 04             	shl    $0x4,%edx
    2275:	01 d0                	add    %edx,%eax
    2277:	8d 90 b0 35 00 00    	lea    0x35b0(%eax),%edx
    227d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2281:	89 02                	mov    %eax,(%edx)
    2283:	a1 80 46 00 00       	mov    0x4680,%eax
    2288:	c1 e0 02             	shl    $0x2,%eax
    228b:	89 c2                	mov    %eax,%edx
    228d:	c1 e2 04             	shl    $0x4,%edx
    2290:	01 d0                	add    %edx,%eax
    2292:	8d 90 90 35 00 00    	lea    0x3590(%eax),%edx
    2298:	8b 44 24 04          	mov    0x4(%esp),%eax
    229c:	89 02                	mov    %eax,(%edx)
    229e:	a1 80 46 00 00       	mov    0x4680,%eax
    22a3:	c1 e0 02             	shl    $0x2,%eax
    22a6:	89 c2                	mov    %eax,%edx
    22a8:	c1 e2 04             	shl    $0x4,%edx
    22ab:	01 d0                	add    %edx,%eax
    22ad:	8d 90 b4 35 00 00    	lea    0x35b4(%eax),%edx
    22b3:	8b 44 24 40          	mov    0x40(%esp),%eax
    22b7:	89 02                	mov    %eax,(%edx)
    22b9:	90                   	nop
    22ba:	c3                   	ret    

000022bb <sys_restart>:
sys_restart():
    22bb:	83 ec 10             	sub    $0x10,%esp
    22be:	8b 44 24 14          	mov    0x14(%esp),%eax
    22c2:	c1 e0 02             	shl    $0x2,%eax
    22c5:	89 c2                	mov    %eax,%edx
    22c7:	c1 e2 04             	shl    $0x4,%edx
    22ca:	01 d0                	add    %edx,%eax
    22cc:	05 a4 35 00 00       	add    $0x35a4,%eax
    22d1:	8b 00                	mov    (%eax),%eax
    22d3:	89 44 24 0c          	mov    %eax,0xc(%esp)
    22d7:	8b 44 24 14          	mov    0x14(%esp),%eax
    22db:	c1 e0 02             	shl    $0x2,%eax
    22de:	89 c2                	mov    %eax,%edx
    22e0:	c1 e2 04             	shl    $0x4,%edx
    22e3:	01 d0                	add    %edx,%eax
    22e5:	05 90 35 00 00       	add    $0x3590,%eax
    22ea:	8b 00                	mov    (%eax),%eax
    22ec:	89 44 24 08          	mov    %eax,0x8(%esp)
    22f0:	a1 80 46 00 00       	mov    0x4680,%eax
    22f5:	c1 e0 02             	shl    $0x2,%eax
    22f8:	89 c2                	mov    %eax,%edx
    22fa:	c1 e2 04             	shl    $0x4,%edx
    22fd:	01 d0                	add    %edx,%eax
    22ff:	05 bc 35 00 00       	add    $0x35bc,%eax
    2304:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    230a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    230e:	8b 54 24 08          	mov    0x8(%esp),%edx
    2312:	8e d0                	mov    %eax,%ss
    2314:	89 d4                	mov    %edx,%esp
    2316:	ea 4e 1b 00 00 08 00 	ljmp   $0x8,$0x1b4e
    231d:	90                   	nop
    231e:	83 c4 10             	add    $0x10,%esp
    2321:	c3                   	ret    

00002322 <schedule>:
schedule():
    2322:	eb 24                	jmp    2348 <schedule+0x26>
    2324:	a1 80 46 00 00       	mov    0x4680,%eax
    2329:	c1 e0 02             	shl    $0x2,%eax
    232c:	89 c2                	mov    %eax,%edx
    232e:	c1 e2 04             	shl    $0x4,%edx
    2331:	01 d0                	add    %edx,%eax
    2333:	05 bc 35 00 00       	add    $0x35bc,%eax
    2338:	8b 00                	mov    (%eax),%eax
    233a:	83 f8 01             	cmp    $0x1,%eax
    233d:	74 02                	je     2341 <schedule+0x1f>
    233f:	eb 07                	jmp    2348 <schedule+0x26>
    2341:	a1 80 46 00 00       	mov    0x4680,%eax
    2346:	eb 26                	jmp    236e <schedule+0x4c>
    2348:	a1 80 46 00 00       	mov    0x4680,%eax
    234d:	83 c0 01             	add    $0x1,%eax
    2350:	a3 80 46 00 00       	mov    %eax,0x4680
    2355:	a1 80 46 00 00       	mov    0x4680,%eax
    235a:	83 f8 3f             	cmp    $0x3f,%eax
    235d:	7e c5                	jle    2324 <schedule+0x2>
    235f:	c7 05 80 46 00 00 00 	movl   $0x0,0x4680
    2366:	00 00 00 
    2369:	b8 00 00 00 00       	mov    $0x0,%eax
    236e:	c3                   	ret    

0000236f <temp_generate_second_process>:
temp_generate_second_process():
    236f:	83 ec 10             	sub    $0x10,%esp
    2372:	c7 05 f8 35 00 00 08 	movl   $0x8,0x35f8
    2379:	00 00 00 
    237c:	c7 05 e8 35 00 00 10 	movl   $0x10,0x35e8
    2383:	00 00 00 
    2386:	c7 44 24 0c bc 03 02 	movl   $0x203bc,0xc(%esp)
    238d:	00 
    238e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2392:	a3 d4 35 00 00       	mov    %eax,0x35d4
    2397:	8b 44 24 0c          	mov    0xc(%esp),%eax
    239b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    23a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23a5:	83 c0 04             	add    $0x4,%eax
    23a8:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23b2:	83 c0 08             	add    $0x8,%eax
    23b5:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23bf:	83 c0 0c             	add    $0xc,%eax
    23c2:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23cc:	83 c0 10             	add    $0x10,%eax
    23cf:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23d9:	83 c0 14             	add    $0x14,%eax
    23dc:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23e6:	83 c0 38             	add    $0x38,%eax
    23e9:	ba 3c 15 00 00       	mov    $0x153c,%edx
    23ee:	89 10                	mov    %edx,(%eax)
    23f0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23f4:	83 c0 3c             	add    $0x3c,%eax
    23f7:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
    23fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2401:	83 c0 40             	add    $0x40,%eax
    2404:	c7 00 06 02 00 00    	movl   $0x206,(%eax)
    240a:	c7 05 00 36 00 00 01 	movl   $0x1,0x3600
    2411:	00 00 00 
    2414:	c7 05 fc 35 00 00 02 	movl   $0x2,0x35fc
    241b:	00 00 00 
    241e:	c7 05 04 36 00 00 ff 	movl   $0xffffffff,0x3604
    2425:	ff ff ff 
    2428:	a1 28 30 00 00       	mov    0x3028,%eax
    242d:	83 c0 01             	add    $0x1,%eax
    2430:	a3 28 30 00 00       	mov    %eax,0x3028
    2435:	90                   	nop
    2436:	83 c4 10             	add    $0x10,%esp
    2439:	c3                   	ret    

0000243a <first_empty_pcb>:
first_empty_pcb():
    243a:	83 ec 10             	sub    $0x10,%esp
    243d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    2444:	00 
    2445:	eb 3f                	jmp    2486 <first_empty_pcb+0x4c>
    2447:	8b 44 24 0c          	mov    0xc(%esp),%eax
    244b:	c1 e0 02             	shl    $0x2,%eax
    244e:	89 c2                	mov    %eax,%edx
    2450:	c1 e2 04             	shl    $0x4,%edx
    2453:	01 d0                	add    %edx,%eax
    2455:	05 bc 35 00 00       	add    $0x35bc,%eax
    245a:	8b 00                	mov    (%eax),%eax
    245c:	83 f8 03             	cmp    $0x3,%eax
    245f:	74 1a                	je     247b <first_empty_pcb+0x41>
    2461:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2465:	c1 e0 02             	shl    $0x2,%eax
    2468:	89 c2                	mov    %eax,%edx
    246a:	c1 e2 04             	shl    $0x4,%edx
    246d:	01 d0                	add    %edx,%eax
    246f:	05 bc 35 00 00       	add    $0x35bc,%eax
    2474:	8b 00                	mov    (%eax),%eax
    2476:	83 f8 ff             	cmp    $0xffffffff,%eax
    2479:	75 06                	jne    2481 <first_empty_pcb+0x47>
    247b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    247f:	eb 11                	jmp    2492 <first_empty_pcb+0x58>
    2481:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    2486:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    248b:	7e ba                	jle    2447 <first_empty_pcb+0xd>
    248d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    2492:	83 c4 10             	add    $0x10,%esp
    2495:	c3                   	ret    

00002496 <copy_process>:
copy_process():
    2496:	83 ec 2c             	sub    $0x2c,%esp
    2499:	8b 44 24 30          	mov    0x30(%esp),%eax
    249d:	c1 e0 02             	shl    $0x2,%eax
    24a0:	89 c2                	mov    %eax,%edx
    24a2:	c1 e2 04             	shl    $0x4,%edx
    24a5:	01 d0                	add    %edx,%eax
    24a7:	05 80 35 00 00       	add    $0x3580,%eax
    24ac:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    24b0:	8b 44 24 34          	mov    0x34(%esp),%eax
    24b4:	c1 e0 02             	shl    $0x2,%eax
    24b7:	89 c2                	mov    %eax,%edx
    24b9:	c1 e2 04             	shl    $0x4,%edx
    24bc:	01 d0                	add    %edx,%eax
    24be:	05 80 35 00 00       	add    $0x3580,%eax
    24c3:	89 44 24 18          	mov    %eax,0x18(%esp)
    24c7:	a1 28 30 00 00       	mov    0x3028,%eax
    24cc:	8d 50 01             	lea    0x1(%eax),%edx
    24cf:	89 15 28 30 00 00    	mov    %edx,0x3028
    24d5:	89 44 24 14          	mov    %eax,0x14(%esp)
    24d9:	8b 44 24 18          	mov    0x18(%esp),%eax
    24dd:	8b 54 24 14          	mov    0x14(%esp),%edx
    24e1:	89 10                	mov    %edx,(%eax)
    24e3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24e7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    24ed:	8b 44 24 18          	mov    0x18(%esp),%eax
    24f1:	8b 50 04             	mov    0x4(%eax),%edx
    24f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24f8:	89 50 04             	mov    %edx,0x4(%eax)
    24fb:	8b 44 24 18          	mov    0x18(%esp),%eax
    24ff:	8b 50 08             	mov    0x8(%eax),%edx
    2502:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2506:	89 50 08             	mov    %edx,0x8(%eax)
    2509:	8b 44 24 18          	mov    0x18(%esp),%eax
    250d:	8b 50 0c             	mov    0xc(%eax),%edx
    2510:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2514:	89 50 0c             	mov    %edx,0xc(%eax)
    2517:	8b 44 24 18          	mov    0x18(%esp),%eax
    251b:	8b 50 18             	mov    0x18(%eax),%edx
    251e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2522:	89 50 18             	mov    %edx,0x18(%eax)
    2525:	8b 44 24 18          	mov    0x18(%esp),%eax
    2529:	8b 50 1c             	mov    0x1c(%eax),%edx
    252c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2530:	89 50 1c             	mov    %edx,0x1c(%eax)
    2533:	8b 44 24 18          	mov    0x18(%esp),%eax
    2537:	8b 50 20             	mov    0x20(%eax),%edx
    253a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    253e:	89 50 20             	mov    %edx,0x20(%eax)
    2541:	8b 44 24 18          	mov    0x18(%esp),%eax
    2545:	8b 50 24             	mov    0x24(%eax),%edx
    2548:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    254c:	89 50 24             	mov    %edx,0x24(%eax)
    254f:	8b 44 24 18          	mov    0x18(%esp),%eax
    2553:	8b 50 28             	mov    0x28(%eax),%edx
    2556:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    255a:	89 50 28             	mov    %edx,0x28(%eax)
    255d:	8b 44 24 18          	mov    0x18(%esp),%eax
    2561:	8b 50 2c             	mov    0x2c(%eax),%edx
    2564:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2568:	89 50 2c             	mov    %edx,0x2c(%eax)
    256b:	8b 44 24 18          	mov    0x18(%esp),%eax
    256f:	8b 50 30             	mov    0x30(%eax),%edx
    2572:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2576:	89 50 30             	mov    %edx,0x30(%eax)
    2579:	8b 44 24 18          	mov    0x18(%esp),%eax
    257d:	8b 50 34             	mov    0x34(%eax),%edx
    2580:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2584:	89 50 34             	mov    %edx,0x34(%eax)
    2587:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    258c:	74 0e                	je     259c <copy_process+0x106>
    258e:	8b 44 24 34          	mov    0x34(%esp),%eax
    2592:	83 e8 80             	sub    $0xffffff80,%eax
    2595:	c1 e0 0a             	shl    $0xa,%eax
    2598:	89 c2                	mov    %eax,%edx
    259a:	eb 05                	jmp    25a1 <copy_process+0x10b>
    259c:	ba b5 04 00 00       	mov    $0x4b5,%edx
    25a1:	8b 44 24 18          	mov    0x18(%esp),%eax
    25a5:	8b 40 10             	mov    0x10(%eax),%eax
    25a8:	29 c2                	sub    %eax,%edx
    25aa:	89 d0                	mov    %edx,%eax
    25ac:	89 44 24 10          	mov    %eax,0x10(%esp)
    25b0:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    25b5:	74 0e                	je     25c5 <copy_process+0x12f>
    25b7:	8b 44 24 34          	mov    0x34(%esp),%eax
    25bb:	83 e8 80             	sub    $0xffffff80,%eax
    25be:	c1 e0 0a             	shl    $0xa,%eax
    25c1:	89 c2                	mov    %eax,%edx
    25c3:	eb 05                	jmp    25ca <copy_process+0x134>
    25c5:	ba b5 04 00 00       	mov    $0x4b5,%edx
    25ca:	8b 44 24 18          	mov    0x18(%esp),%eax
    25ce:	8b 40 14             	mov    0x14(%eax),%eax
    25d1:	29 c2                	sub    %eax,%edx
    25d3:	89 d0                	mov    %edx,%eax
    25d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
    25d9:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    25de:	74 0e                	je     25ee <copy_process+0x158>
    25e0:	8b 44 24 34          	mov    0x34(%esp),%eax
    25e4:	83 e8 80             	sub    $0xffffff80,%eax
    25e7:	c1 e0 0a             	shl    $0xa,%eax
    25ea:	89 c2                	mov    %eax,%edx
    25ec:	eb 05                	jmp    25f3 <copy_process+0x15d>
    25ee:	ba b5 04 00 00       	mov    $0x4b5,%edx
    25f3:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    25f8:	74 0c                	je     2606 <copy_process+0x170>
    25fa:	8b 44 24 30          	mov    0x30(%esp),%eax
    25fe:	83 e8 80             	sub    $0xffffff80,%eax
    2601:	c1 e0 0a             	shl    $0xa,%eax
    2604:	eb 05                	jmp    260b <copy_process+0x175>
    2606:	b8 b5 04 00 00       	mov    $0x4b5,%eax
    260b:	83 ec 04             	sub    $0x4,%esp
    260e:	68 00 04 00 00       	push   $0x400
    2613:	52                   	push   %edx
    2614:	50                   	push   %eax
    2615:	e8 84 01 00 00       	call   279e <_rev_memcpy>
    261a:	83 c4 10             	add    $0x10,%esp
    261d:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    2622:	74 0e                	je     2632 <copy_process+0x19c>
    2624:	8b 44 24 30          	mov    0x30(%esp),%eax
    2628:	83 e8 80             	sub    $0xffffff80,%eax
    262b:	c1 e0 0a             	shl    $0xa,%eax
    262e:	89 c2                	mov    %eax,%edx
    2630:	eb 05                	jmp    2637 <copy_process+0x1a1>
    2632:	ba b5 04 00 00       	mov    $0x4b5,%edx
    2637:	8b 44 24 10          	mov    0x10(%esp),%eax
    263b:	29 c2                	sub    %eax,%edx
    263d:	89 d0                	mov    %edx,%eax
    263f:	89 c2                	mov    %eax,%edx
    2641:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2645:	89 50 10             	mov    %edx,0x10(%eax)
    2648:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    264d:	74 0e                	je     265d <copy_process+0x1c7>
    264f:	8b 44 24 30          	mov    0x30(%esp),%eax
    2653:	83 e8 80             	sub    $0xffffff80,%eax
    2656:	c1 e0 0a             	shl    $0xa,%eax
    2659:	89 c2                	mov    %eax,%edx
    265b:	eb 05                	jmp    2662 <copy_process+0x1cc>
    265d:	ba b5 04 00 00       	mov    $0x4b5,%edx
    2662:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2666:	29 c2                	sub    %eax,%edx
    2668:	89 d0                	mov    %edx,%eax
    266a:	89 c2                	mov    %eax,%edx
    266c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2670:	89 50 14             	mov    %edx,0x14(%eax)
    2673:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2677:	8b 40 10             	mov    0x10(%eax),%eax
    267a:	89 44 24 08          	mov    %eax,0x8(%esp)
    267e:	8b 44 24 08          	mov    0x8(%esp),%eax
    2682:	8d 50 34             	lea    0x34(%eax),%edx
    2685:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2689:	8b 00                	mov    (%eax),%eax
    268b:	89 02                	mov    %eax,(%edx)
    268d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2691:	8d 50 04             	lea    0x4(%eax),%edx
    2694:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2698:	8b 40 30             	mov    0x30(%eax),%eax
    269b:	89 02                	mov    %eax,(%edx)
    269d:	8b 44 24 08          	mov    0x8(%esp),%eax
    26a1:	8d 50 08             	lea    0x8(%eax),%edx
    26a4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26a8:	8b 40 2c             	mov    0x2c(%eax),%eax
    26ab:	89 02                	mov    %eax,(%edx)
    26ad:	8b 44 24 08          	mov    0x8(%esp),%eax
    26b1:	8d 50 0c             	lea    0xc(%eax),%edx
    26b4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26b8:	8b 40 28             	mov    0x28(%eax),%eax
    26bb:	89 02                	mov    %eax,(%edx)
    26bd:	8b 44 24 08          	mov    0x8(%esp),%eax
    26c1:	8d 50 10             	lea    0x10(%eax),%edx
    26c4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26c8:	8b 40 24             	mov    0x24(%eax),%eax
    26cb:	89 02                	mov    %eax,(%edx)
    26cd:	8b 44 24 08          	mov    0x8(%esp),%eax
    26d1:	8d 50 14             	lea    0x14(%eax),%edx
    26d4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26d8:	8b 40 20             	mov    0x20(%eax),%eax
    26db:	89 02                	mov    %eax,(%edx)
    26dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    26e1:	8d 50 18             	lea    0x18(%eax),%edx
    26e4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26e8:	8b 40 1c             	mov    0x1c(%eax),%eax
    26eb:	89 02                	mov    %eax,(%edx)
    26ed:	8b 44 24 08          	mov    0x8(%esp),%eax
    26f1:	8d 50 1c             	lea    0x1c(%eax),%edx
    26f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26f8:	8b 40 18             	mov    0x18(%eax),%eax
    26fb:	89 02                	mov    %eax,(%edx)
    26fd:	8b 44 24 08          	mov    0x8(%esp),%eax
    2701:	8d 50 20             	lea    0x20(%eax),%edx
    2704:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2708:	8b 40 14             	mov    0x14(%eax),%eax
    270b:	89 02                	mov    %eax,(%edx)
    270d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2711:	8d 50 28             	lea    0x28(%eax),%edx
    2714:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2718:	8b 40 0c             	mov    0xc(%eax),%eax
    271b:	89 02                	mov    %eax,(%edx)
    271d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2721:	8d 50 2c             	lea    0x2c(%eax),%edx
    2724:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2728:	8b 40 08             	mov    0x8(%eax),%eax
    272b:	89 02                	mov    %eax,(%edx)
    272d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2731:	8d 50 30             	lea    0x30(%eax),%edx
    2734:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2738:	8b 40 04             	mov    0x4(%eax),%eax
    273b:	89 02                	mov    %eax,(%edx)
    273d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2741:	8d 50 34             	lea    0x34(%eax),%edx
    2744:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2748:	8b 00                	mov    (%eax),%eax
    274a:	89 02                	mov    %eax,(%edx)
    274c:	8b 44 24 30          	mov    0x30(%esp),%eax
    2750:	c1 e0 02             	shl    $0x2,%eax
    2753:	89 c2                	mov    %eax,%edx
    2755:	c1 e2 04             	shl    $0x4,%edx
    2758:	01 d0                	add    %edx,%eax
    275a:	05 bc 35 00 00       	add    $0x35bc,%eax
    275f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    2765:	8b 44 24 30          	mov    0x30(%esp),%eax
    2769:	c1 e0 02             	shl    $0x2,%eax
    276c:	89 c2                	mov    %eax,%edx
    276e:	c1 e2 04             	shl    $0x4,%edx
    2771:	01 d0                	add    %edx,%eax
    2773:	8d 90 b8 35 00 00    	lea    0x35b8(%eax),%edx
    2779:	8b 44 24 14          	mov    0x14(%esp),%eax
    277d:	89 02                	mov    %eax,(%edx)
    277f:	8b 44 24 30          	mov    0x30(%esp),%eax
    2783:	c1 e0 02             	shl    $0x2,%eax
    2786:	89 c2                	mov    %eax,%edx
    2788:	c1 e2 04             	shl    $0x4,%edx
    278b:	01 d0                	add    %edx,%eax
    278d:	8d 90 c0 35 00 00    	lea    0x35c0(%eax),%edx
    2793:	8b 44 24 34          	mov    0x34(%esp),%eax
    2797:	89 02                	mov    %eax,(%edx)
    2799:	90                   	nop
    279a:	83 c4 2c             	add    $0x2c,%esp
    279d:	c3                   	ret    

0000279e <_rev_memcpy>:
_rev_memcpy():
    279e:	83 ec 10             	sub    $0x10,%esp
    27a1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    27a8:	00 
    27a9:	eb 26                	jmp    27d1 <_rev_memcpy+0x33>
    27ab:	8b 44 24 0c          	mov    0xc(%esp),%eax
    27af:	f7 d0                	not    %eax
    27b1:	89 c2                	mov    %eax,%edx
    27b3:	8b 44 24 14          	mov    0x14(%esp),%eax
    27b7:	01 c2                	add    %eax,%edx
    27b9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    27bd:	f7 d0                	not    %eax
    27bf:	89 c1                	mov    %eax,%ecx
    27c1:	8b 44 24 18          	mov    0x18(%esp),%eax
    27c5:	01 c8                	add    %ecx,%eax
    27c7:	0f b6 00             	movzbl (%eax),%eax
    27ca:	88 02                	mov    %al,(%edx)
    27cc:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    27d1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    27d5:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
    27d9:	7c d0                	jl     27ab <_rev_memcpy+0xd>
    27db:	90                   	nop
    27dc:	83 c4 10             	add    $0x10,%esp
    27df:	c3                   	ret    

000027e0 <init_semaphore>:
init_semaphore():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:12
extern PCB_List_T PCB_List[NR_TASKS];
int printks(const char*);

Semaphone semaphone_list[NR_SEMAPHORE];

void init_semaphore() {
    27e0:	55                   	push   %ebp
    27e1:	89 e5                	mov    %esp,%ebp
    27e3:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13
    for (int i = 0; i < NR_SEMAPHORE; ++i) {
    27e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    27ed:	eb 2c                	jmp    281b <init_semaphore+0x3b>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:14 (discriminator 3)
        semaphone_list[i].bsize = 0;
    27ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
    27f2:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    27f8:	05 24 48 00 00       	add    $0x4824,%eax
    27fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:15 (discriminator 3)
        semaphone_list[i].used = 0; // false
    2803:	8b 45 fc             	mov    -0x4(%ebp),%eax
    2806:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    280c:	05 28 48 00 00       	add    $0x4828,%eax
    2811:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13 (discriminator 3)
int printks(const char*);

Semaphone semaphone_list[NR_SEMAPHORE];

void init_semaphore() {
    for (int i = 0; i < NR_SEMAPHORE; ++i) {
    2817:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13 (discriminator 1)
    281b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
    2822:	7e cb                	jle    27ef <init_semaphore+0xf>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:17
        semaphone_list[i].bsize = 0;
        semaphone_list[i].used = 0; // false
    }
}
    2824:	90                   	nop
    2825:	c9                   	leave  
    2826:	c3                   	ret    

00002827 <getsem>:
getsem():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:19

int getsem(int value) {
    2827:	55                   	push   %ebp
    2828:	89 e5                	mov    %esp,%ebp
    282a:	53                   	push   %ebx
    282b:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:30
    //         return i;
    //     }
    // }
    // return -1;
    int ret;
    __asm__(
    282e:	8b 45 08             	mov    0x8(%ebp),%eax
    2831:	89 c3                	mov    %eax,%ebx
    2833:	b8 05 00 00 00       	mov    $0x5,%eax
    2838:	cd 80                	int    $0x80
    283a:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:36
        "movl $0x05, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(value)
    );
    return ret;
    283d:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:37
}
    2840:	83 c4 04             	add    $0x4,%esp
    2843:	5b                   	pop    %ebx
    2844:	5d                   	pop    %ebp
    2845:	c3                   	ret    

00002846 <freesem>:
freesem():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:39

int freesem(int id) {
    2846:	55                   	push   %ebp
    2847:	89 e5                	mov    %esp,%ebp
    2849:	53                   	push   %ebx
    284a:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:42
    //TODO: should be refine
    int ret;
    __asm__(
    284d:	8b 45 08             	mov    0x8(%ebp),%eax
    2850:	89 c3                	mov    %eax,%ebx
    2852:	b8 06 00 00 00       	mov    $0x6,%eax
    2857:	cd 80                	int    $0x80
    2859:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:48
        "movl $0x06, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    285c:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:49
}
    285f:	83 c4 04             	add    $0x4,%esp
    2862:	5b                   	pop    %ebx
    2863:	5d                   	pop    %ebp
    2864:	c3                   	ret    

00002865 <puti>:
puti():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:50
void puti(int number) {
    2865:	55                   	push   %ebp
    2866:	89 e5                	mov    %esp,%ebp
    2868:	53                   	push   %ebx
    2869:	83 ec 28             	sub    $0x28,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:52
    char buffer[20];
    int length = 0;
    286c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:53
    int num = number < 0 ? -number : number;
    2873:	8b 45 08             	mov    0x8(%ebp),%eax
    2876:	c1 f8 1f             	sar    $0x1f,%eax
    2879:	89 c2                	mov    %eax,%edx
    287b:	33 55 08             	xor    0x8(%ebp),%edx
    287e:	29 c2                	sub    %eax,%edx
    2880:	89 d0                	mov    %edx,%eax
    2882:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:54
    while (num) {
    2885:	eb 50                	jmp    28d7 <puti+0x72>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:55
        buffer[length++] = (num % 10) + '0';
    2887:	8b 5d f8             	mov    -0x8(%ebp),%ebx
    288a:	8d 43 01             	lea    0x1(%ebx),%eax
    288d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    2890:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    2893:	ba 67 66 66 66       	mov    $0x66666667,%edx
    2898:	89 c8                	mov    %ecx,%eax
    289a:	f7 ea                	imul   %edx
    289c:	c1 fa 02             	sar    $0x2,%edx
    289f:	89 c8                	mov    %ecx,%eax
    28a1:	c1 f8 1f             	sar    $0x1f,%eax
    28a4:	29 c2                	sub    %eax,%edx
    28a6:	89 d0                	mov    %edx,%eax
    28a8:	c1 e0 02             	shl    $0x2,%eax
    28ab:	01 d0                	add    %edx,%eax
    28ad:	01 c0                	add    %eax,%eax
    28af:	29 c1                	sub    %eax,%ecx
    28b1:	89 ca                	mov    %ecx,%edx
    28b3:	89 d0                	mov    %edx,%eax
    28b5:	83 c0 30             	add    $0x30,%eax
    28b8:	88 44 1d d4          	mov    %al,-0x2c(%ebp,%ebx,1)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:56
        num /= 10;
    28bc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    28bf:	ba 67 66 66 66       	mov    $0x66666667,%edx
    28c4:	89 c8                	mov    %ecx,%eax
    28c6:	f7 ea                	imul   %edx
    28c8:	c1 fa 02             	sar    $0x2,%edx
    28cb:	89 c8                	mov    %ecx,%eax
    28cd:	c1 f8 1f             	sar    $0x1f,%eax
    28d0:	29 c2                	sub    %eax,%edx
    28d2:	89 d0                	mov    %edx,%eax
    28d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:54
}
void puti(int number) {
    char buffer[20];
    int length = 0;
    int num = number < 0 ? -number : number;
    while (num) {
    28d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
    28db:	75 aa                	jne    2887 <puti+0x22>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:58
        buffer[length++] = (num % 10) + '0';
        num /= 10;
    }
    buffer[length] = 0;
    28dd:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    28e0:	8b 45 f8             	mov    -0x8(%ebp),%eax
    28e3:	01 d0                	add    %edx,%eax
    28e5:	c6 00 00             	movb   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:59
    int i = 0;
    28e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:60
    int j = length - 1;
    28ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
    28f2:	83 e8 01             	sub    $0x1,%eax
    28f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:61
    while (i < j) {
    28f8:	eb 3d                	jmp    2937 <puti+0xd2>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:62
        int tmp = buffer[i];
    28fa:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    28fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
    2900:	01 d0                	add    %edx,%eax
    2902:	0f b6 00             	movzbl (%eax),%eax
    2905:	0f be c0             	movsbl %al,%eax
    2908:	89 45 e8             	mov    %eax,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:63
        buffer[i] = buffer[j];
    290b:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    290e:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2911:	01 d0                	add    %edx,%eax
    2913:	0f b6 00             	movzbl (%eax),%eax
    2916:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
    2919:	8b 55 f0             	mov    -0x10(%ebp),%edx
    291c:	01 ca                	add    %ecx,%edx
    291e:	88 02                	mov    %al,(%edx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:64
        buffer[j] = tmp;
    2920:	8b 45 e8             	mov    -0x18(%ebp),%eax
    2923:	89 c1                	mov    %eax,%ecx
    2925:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    2928:	8b 45 ec             	mov    -0x14(%ebp),%eax
    292b:	01 d0                	add    %edx,%eax
    292d:	88 08                	mov    %cl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:65
        i++;
    292f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:66
        j--;
    2933:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:61
        num /= 10;
    }
    buffer[length] = 0;
    int i = 0;
    int j = length - 1;
    while (i < j) {
    2937:	8b 45 f0             	mov    -0x10(%ebp),%eax
    293a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
    293d:	7c bb                	jl     28fa <puti+0x95>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:68
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        i++;
        j--;
    }
    if (number <0) {
    293f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
    2943:	79 0d                	jns    2952 <puti+0xed>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:69
        printks("-");
    2945:	68 91 2a 00 00       	push   $0x2a91
    294a:	e8 75 f0 ff ff       	call   19c4 <printks>
    294f:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:71
    }
    printks(buffer);
    2952:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    2955:	50                   	push   %eax
    2956:	e8 69 f0 ff ff       	call   19c4 <printks>
    295b:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:72
    if (number == 0) {
    295e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
    2962:	75 0d                	jne    2971 <puti+0x10c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:73
        printks("0");
    2964:	68 93 2a 00 00       	push   $0x2a93
    2969:	e8 56 f0 ff ff       	call   19c4 <printks>
    296e:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:75
    }
}
    2971:	90                   	nop
    2972:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    2975:	c9                   	leave  
    2976:	c3                   	ret    

00002977 <p>:
p():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:76
int p(int id) {
    2977:	55                   	push   %ebp
    2978:	89 e5                	mov    %esp,%ebp
    297a:	53                   	push   %ebx
    297b:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:78
    int ret;
    __asm__(
    297e:	8b 45 08             	mov    0x8(%ebp),%eax
    2981:	89 c3                	mov    %eax,%ebx
    2983:	b8 07 00 00 00       	mov    $0x7,%eax
    2988:	cd 80                	int    $0x80
    298a:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:84
        "movl $0x07, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    298d:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:85
}
    2990:	83 c4 04             	add    $0x4,%esp
    2993:	5b                   	pop    %ebx
    2994:	5d                   	pop    %ebp
    2995:	c3                   	ret    

00002996 <v>:
v():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:87

int v(int id) {
    2996:	55                   	push   %ebp
    2997:	89 e5                	mov    %esp,%ebp
    2999:	53                   	push   %ebx
    299a:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:89
    int ret;
    __asm__(
    299d:	8b 45 08             	mov    0x8(%ebp),%eax
    29a0:	89 c3                	mov    %eax,%ebx
    29a2:	b8 08 00 00 00       	mov    $0x8,%eax
    29a7:	cd 80                	int    $0x80
    29a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:95
        "movl $0x08, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    29ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:96
    29af:	83 c4 04             	add    $0x4,%esp
    29b2:	5b                   	pop    %ebx
    29b3:	5d                   	pop    %ebp
    29b4:	c3                   	ret    
