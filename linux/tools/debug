
tools/system.elf:     file format elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
startup_32():
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e8                	mov    %eax,%gs
       b:	8e e0                	mov    %eax,%fs
       d:	8e d0                	mov    %eax,%ss
       f:	bc b5 04 00 00       	mov    $0x4b5,%esp
      14:	e8 46 00 00 00       	call   5f <setup_idt>
      19:	e8 39 00 00 00       	call   57 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	8e d0                	mov    %eax,%ss
      2d:	bc b5 04 00 00       	mov    $0x4b5,%esp

00000032 <startup_32.tmp>:
startup_32.tmp():
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f0                	je     32 <startup_32.tmp>

00000042 <after_page_table>:
after_page_table():
      42:	6a 00                	push   $0x0
      44:	6a 00                	push   $0x0
      46:	6a 00                	push   $0x0
      48:	68 53 00 00 00       	push   $0x53
      4d:	68 d5 14 00 00       	push   $0x14d5
      52:	c3                   	ret    

00000053 <L6>:
L6():
      53:	eb fe                	jmp    53 <L6>

00000055 <setup_page>:
setup_page():
      55:	eb fe                	jmp    55 <setup_page>

00000057 <setup_gdt>:
setup_gdt():
      57:	0f 01 15 95 00 00 00 	lgdtl  0x95
      5e:	c3                   	ret    

0000005f <setup_idt>:
setup_idt():
      5f:	8d 15 9b 00 00 00    	lea    0x9b,%edx
      65:	b8 00 00 08 00       	mov    $0x80000,%eax
      6a:	66 89 d0             	mov    %dx,%ax
      6d:	66 ba 00 8e          	mov    $0x8e00,%dx
      71:	8d 3d b5 04 00 00    	lea    0x4b5,%edi
      77:	b9 00 01 00 00       	mov    $0x100,%ecx

0000007c <rp_sidt>:
rp_sidt():
      7c:	89 07                	mov    %eax,(%edi)
      7e:	89 57 04             	mov    %edx,0x4(%edi)
      81:	83 c7 08             	add    $0x8,%edi
      84:	49                   	dec    %ecx
      85:	75 f5                	jne    7c <rp_sidt>
      87:	0f 01 1d 8f 00 00 00 	lidtl  0x8f
      8e:	c3                   	ret    

0000008f <IDT_PTR>:
IDT_PTR():
      8f:	ff 07                	incl   (%edi)
      91:	b5 04                	mov    $0x4,%ch
	...

00000095 <GDT_PTR>:
GDT_PTR():
      95:	ff 07                	incl   (%edi)
      97:	b5 0c                	mov    $0xc,%ch
	...

0000009b <ignore_int>:
ignore_int():
      9b:	50                   	push   %eax
      9c:	51                   	push   %ecx
      9d:	52                   	push   %edx
      9e:	1e                   	push   %ds
      9f:	06                   	push   %es
      a0:	0f a0                	push   %fs
      a2:	b8 10 00 00 00       	mov    $0x10,%eax
      a7:	8e d8                	mov    %eax,%ds
      a9:	8e c0                	mov    %eax,%es
      ab:	8e e0                	mov    %eax,%fs
      ad:	0f a1                	pop    %fs
      af:	07                   	pop    %es
      b0:	1f                   	pop    %ds
      b1:	5a                   	pop    %edx
      b2:	59                   	pop    %ecx
      b3:	58                   	pop    %eax
      b4:	cf                   	iret   

000000b5 <tmp_STACK>:
	...

000004b5 <idt>:
	...

00000cb5 <gdt>:
	...
gdt():
     cbd:	ff 0f                	decl   (%edi)
     cbf:	00 00                	add    %al,(%eax)
     cc1:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
     cc7:	00 00                	add    %al,(%eax)
     cc9:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
     ccf:	00 00                	add    %al,(%eax)
     cd1:	00 00                	add    %al,(%eax)
     cd3:	00 00                	add    %al,(%eax)
     cd5:	ff                   	(bad)  
     cd6:	ff 00                	incl   (%eax)
     cd8:	80 0b 92             	orb    $0x92,(%ebx)
     cdb:	00 00                	add    %al,(%eax)
     cdd:	ff 00                	incl   (%eax)
     cdf:	00 00                	add    %al,(%eax)
     ce1:	09 92 00 00 00 00    	or     %edx,0x0(%edx)
	...

000014d5 <main>:
main():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:24
extern PCB_List_T PCB_List[NR_TASKS];


void puti(int number) ;

void main() {
    14d5:	55                   	push   %ebp
    14d6:	89 e5                	mov    %esp,%ebp
    14d8:	83 ec 18             	sub    $0x18,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:26
    //BochsBreak();
    trap_init();
    14db:	e8 bc 03 00 00       	call   189c <trap_init>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:27
    init_sys_call();
    14e0:	e8 e1 09 00 00       	call   1ec6 <init_sys_call>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:28
    sched_init();
    14e5:	e8 38 0a 00 00       	call   1f22 <sched_init>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:29
    printks("\nnow in protected mode!\n");
    14ea:	68 84 29 00 00       	push   $0x2984
    14ef:	e8 d0 04 00 00       	call   19c4 <printks>
    14f4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:32
    int errno;
    //BochsBreak();
    __asm__ volatile(
    14f7:	b8 00 00 00 00       	mov    $0x0,%eax
    14fc:	cd 80                	int    $0x80
    14fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:37
        "movl $0x0, %%eax\n"
        "int $0x80\n"
        :"=a"(errno):
    );
    char arr[] = "hello!\n";
    1501:	c7 45 e8 68 65 6c 6c 	movl   $0x6c6c6568,-0x18(%ebp)
    1508:	c7 45 ec 6f 21 0a 00 	movl   $0xa216f,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:39

    sti();
    150f:	fb                   	sti    
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:63
    // p(lock);
    // p(lock);
    // p(lock);
    //int mgnum = 1234;
    //int mgnum2 = 5678;
    int id = fork();
    1510:	fa                   	cli    
    1511:	b8 02 00 00 00       	mov    $0x2,%eax
    1516:	cd 80                	int    $0x80
    1518:	89 45 f8             	mov    %eax,-0x8(%ebp)
    151b:	fb                   	sti    
    151c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    151f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:64
    int lock = getsem(0);
    1522:	6a 00                	push   $0x0
    1524:	e8 b8 12 00 00       	call   27e1 <getsem>
    1529:	83 c4 04             	add    $0x4,%esp
    152c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:65
    if (id == 1) {
    152f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
    1533:	75 05                	jne    153a <main+0x65>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:66
        testPV();
    1535:	e8 93 00 00 00       	call   15cd <testPV>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:77 (discriminator 1)
        //     printks("222\n");
        //     BochsBreak();
        //     //v(lock);
        // }
    }
    while(1);
    153a:	eb fe                	jmp    153a <main+0x65>

0000153c <test_second_process>:
test_second_process():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:81
    return;
}

void test_second_process() {
    153c:	55                   	push   %ebp
    153d:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:101 (discriminator 1)
    // } else {
    //     wait();
    //     printks("888\n");
    // }
    while(1) {
        printks("bb\n");
    153f:	68 9d 29 00 00       	push   $0x299d
    1544:	e8 7b 04 00 00       	call   19c4 <printks>
    1549:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:107 (discriminator 1)
        // __asm__(
        //     "movl $0x1, %%eax\n"
        //     "int $0x80\n"
        //     ::
        // );
    }
    154c:	eb f1                	jmp    153f <test_second_process+0x3>

0000154e <next>:
next():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:114
int full_lock;
int empty_lock;
int queue[25];
int beg = 0;
int end = 0;
int next(int i) { return (i + 1) % 20; }
    154e:	55                   	push   %ebp
    154f:	89 e5                	mov    %esp,%ebp
    1551:	8b 45 08             	mov    0x8(%ebp),%eax
    1554:	40                   	inc    %eax
    1555:	b9 14 00 00 00       	mov    $0x14,%ecx
    155a:	99                   	cltd   
    155b:	f7 f9                	idiv   %ecx
    155d:	89 d0                	mov    %edx,%eax
    155f:	5d                   	pop    %ebp
    1560:	c3                   	ret    

00001561 <full>:
full():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:115
int full() {
    1561:	55                   	push   %ebp
    1562:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:116
    return next(end) == beg;
    1564:	a1 04 31 00 00       	mov    0x3104,%eax
    1569:	50                   	push   %eax
    156a:	e8 df ff ff ff       	call   154e <next>
    156f:	83 c4 04             	add    $0x4,%esp
    1572:	89 c2                	mov    %eax,%edx
    1574:	a1 00 31 00 00       	mov    0x3100,%eax
    1579:	39 c2                	cmp    %eax,%edx
    157b:	0f 94 c0             	sete   %al
    157e:	0f b6 c0             	movzbl %al,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:117
}
    1581:	c9                   	leave  
    1582:	c3                   	ret    

00001583 <empty>:
empty():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:118
int empty() {
    1583:	55                   	push   %ebp
    1584:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:119
    return beg == end;
    1586:	8b 15 00 31 00 00    	mov    0x3100,%edx
    158c:	a1 04 31 00 00       	mov    0x3104,%eax
    1591:	39 c2                	cmp    %eax,%edx
    1593:	0f 94 c0             	sete   %al
    1596:	0f b6 c0             	movzbl %al,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:120
}
    1599:	5d                   	pop    %ebp
    159a:	c3                   	ret    

0000159b <push>:
push():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:121
void push() {
    159b:	55                   	push   %ebp
    159c:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:122
    end = next(end);
    159e:	a1 04 31 00 00       	mov    0x3104,%eax
    15a3:	50                   	push   %eax
    15a4:	e8 a5 ff ff ff       	call   154e <next>
    15a9:	83 c4 04             	add    $0x4,%esp
    15ac:	a3 04 31 00 00       	mov    %eax,0x3104
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:123
}
    15b1:	90                   	nop
    15b2:	c9                   	leave  
    15b3:	c3                   	ret    

000015b4 <pop>:
pop():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:124
void pop() {
    15b4:	55                   	push   %ebp
    15b5:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:125
    beg = next(beg);
    15b7:	a1 00 31 00 00       	mov    0x3100,%eax
    15bc:	50                   	push   %eax
    15bd:	e8 8c ff ff ff       	call   154e <next>
    15c2:	83 c4 04             	add    $0x4,%esp
    15c5:	a3 00 31 00 00       	mov    %eax,0x3100
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:126
}
    15ca:	90                   	nop
    15cb:	c9                   	leave  
    15cc:	c3                   	ret    

000015cd <testPV>:
testPV():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:129
//#define D 1000000
#define D 1000
void testPV() {
    15cd:	55                   	push   %ebp
    15ce:	89 e5                	mov    %esp,%ebp
    15d0:	83 ec 10             	sub    $0x10,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:130
    full_lock = getsem(15);
    15d3:	6a 0f                	push   $0xf
    15d5:	e8 07 12 00 00       	call   27e1 <getsem>
    15da:	83 c4 04             	add    $0x4,%esp
    15dd:	a3 c4 46 00 00       	mov    %eax,0x46c4
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:131
    empty_lock = getsem(0);
    15e2:	6a 00                	push   $0x0
    15e4:	e8 f8 11 00 00       	call   27e1 <getsem>
    15e9:	83 c4 04             	add    $0x4,%esp
    15ec:	a3 c8 46 00 00       	mov    %eax,0x46c8
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:132
    puti(full_lock);
    15f1:	a1 c4 46 00 00       	mov    0x46c4,%eax
    15f6:	50                   	push   %eax
    15f7:	e8 23 12 00 00       	call   281f <puti>
    15fc:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:133
    puti(empty_lock);
    15ff:	a1 c8 46 00 00       	mov    0x46c8,%eax
    1604:	50                   	push   %eax
    1605:	e8 15 12 00 00       	call   281f <puti>
    160a:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:134
    beg = end = 0;
    160d:	c7 05 04 31 00 00 00 	movl   $0x0,0x3104
    1614:	00 00 00 
    1617:	a1 04 31 00 00       	mov    0x3104,%eax
    161c:	a3 00 31 00 00       	mov    %eax,0x3100
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:135
    int id = fork();
    1621:	fa                   	cli    
    1622:	b8 02 00 00 00       	mov    $0x2,%eax
    1627:	cd 80                	int    $0x80
    1629:	89 45 f4             	mov    %eax,-0xc(%ebp)
    162c:	fb                   	sti    
    162d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    1630:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:136
    if (id == 1) {
    1633:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
    1637:	75 7b                	jne    16b4 <testPV+0xe7>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139
        //while(1);
        while(1) {
            for (int i = 0; i < D; ++i) {}
    1639:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    1640:	eb 03                	jmp    1645 <testPV+0x78>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139 (discriminator 3)
    1642:	ff 45 fc             	incl   -0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139 (discriminator 1)
    1645:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%ebp)
    164c:	7e f4                	jle    1642 <testPV+0x75>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:140
            p(empty_lock);
    164e:	a1 c8 46 00 00       	mov    0x46c8,%eax
    1653:	50                   	push   %eax
    1654:	e8 d8 12 00 00       	call   2931 <p>
    1659:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:142

            printks("push ");
    165c:	68 a1 29 00 00       	push   $0x29a1
    1661:	e8 5e 03 00 00       	call   19c4 <printks>
    1666:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:144

            push();
    1669:	e8 2d ff ff ff       	call   159b <push>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:146

            puti(beg);
    166e:	a1 00 31 00 00       	mov    0x3100,%eax
    1673:	50                   	push   %eax
    1674:	e8 a6 11 00 00       	call   281f <puti>
    1679:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:147
            printks(" ");
    167c:	68 a7 29 00 00       	push   $0x29a7
    1681:	e8 3e 03 00 00       	call   19c4 <printks>
    1686:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:148
            puti(end);
    1689:	a1 04 31 00 00       	mov    0x3104,%eax
    168e:	50                   	push   %eax
    168f:	e8 8b 11 00 00       	call   281f <puti>
    1694:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:149
            printks("\n");
    1697:	68 a9 29 00 00       	push   $0x29a9
    169c:	e8 23 03 00 00       	call   19c4 <printks>
    16a1:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:151

            v(full_lock);
    16a4:	a1 c4 46 00 00       	mov    0x46c4,%eax
    16a9:	50                   	push   %eax
    16aa:	e8 a1 12 00 00       	call   2950 <v>
    16af:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:153

        }        
    16b2:	eb 85                	jmp    1639 <testPV+0x6c>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157
    } else {
        //while(1);
        while (1) {
            for (int i = 0; i < D; ++i) {}
    16b4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    16bb:	eb 03                	jmp    16c0 <testPV+0xf3>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157 (discriminator 3)
    16bd:	ff 45 f8             	incl   -0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157 (discriminator 1)
    16c0:	81 7d f8 e7 03 00 00 	cmpl   $0x3e7,-0x8(%ebp)
    16c7:	7e f4                	jle    16bd <testPV+0xf0>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:158
            p(full_lock);
    16c9:	a1 c4 46 00 00       	mov    0x46c4,%eax
    16ce:	50                   	push   %eax
    16cf:	e8 5d 12 00 00       	call   2931 <p>
    16d4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:159
            v(empty_lock);
    16d7:	a1 c8 46 00 00       	mov    0x46c8,%eax
    16dc:	50                   	push   %eax
    16dd:	e8 6e 12 00 00       	call   2950 <v>
    16e2:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:161

            pop();
    16e5:	e8 ca fe ff ff       	call   15b4 <pop>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:162
            printks("pop ");
    16ea:	68 ab 29 00 00       	push   $0x29ab
    16ef:	e8 d0 02 00 00       	call   19c4 <printks>
    16f4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:163
            puti(beg);
    16f7:	a1 00 31 00 00       	mov    0x3100,%eax
    16fc:	50                   	push   %eax
    16fd:	e8 1d 11 00 00       	call   281f <puti>
    1702:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:164
            printks(" ");
    1705:	68 a7 29 00 00       	push   $0x29a7
    170a:	e8 b5 02 00 00       	call   19c4 <printks>
    170f:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:165
            puti(end);
    1712:	a1 04 31 00 00       	mov    0x3104,%eax
    1717:	50                   	push   %eax
    1718:	e8 02 11 00 00       	call   281f <puti>
    171d:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:166
            printks("\n");
    1720:	68 a9 29 00 00       	push   $0x29a9
    1725:	e8 9a 02 00 00       	call   19c4 <printks>
    172a:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:167
        }
    172d:	eb 85                	jmp    16b4 <testPV+0xe7>
    172f:	90                   	nop

00001730 <divide_error>:
divide_error():
    1730:	68 dd 17 00 00       	push   $0x17dd

00001735 <no_error_code>:
no_error_code():
    1735:	87 04 24             	xchg   %eax,(%esp)
    1738:	53                   	push   %ebx
    1739:	51                   	push   %ecx
    173a:	52                   	push   %edx
    173b:	57                   	push   %edi
    173c:	56                   	push   %esi
    173d:	55                   	push   %ebp
    173e:	1e                   	push   %ds
    173f:	06                   	push   %es
    1740:	0f a0                	push   %fs
    1742:	6a 00                	push   $0x0
    1744:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    1748:	52                   	push   %edx
    1749:	ba 10 00 00 00       	mov    $0x10,%edx
    174e:	8e da                	mov    %edx,%ds
    1750:	8e c2                	mov    %edx,%es
    1752:	8e e2                	mov    %edx,%fs
    1754:	ff d0                	call   *%eax
    1756:	83 c4 08             	add    $0x8,%esp
    1759:	0f a1                	pop    %fs
    175b:	07                   	pop    %es
    175c:	1f                   	pop    %ds
    175d:	5d                   	pop    %ebp
    175e:	5e                   	pop    %esi
    175f:	5f                   	pop    %edi
    1760:	5a                   	pop    %edx
    1761:	59                   	pop    %ecx
    1762:	5b                   	pop    %ebx
    1763:	58                   	pop    %eax
    1764:	cf                   	iret   

00001765 <debug>:
debug():
    1765:	68 00 18 00 00       	push   $0x1800
    176a:	eb c9                	jmp    1735 <no_error_code>

0000176c <int3>:
int3():
    176c:	68 00 18 00 00       	push   $0x1800
    1771:	eb c2                	jmp    1735 <no_error_code>

00001773 <bounds>:
bounds():
    1773:	68 06 18 00 00       	push   $0x1806
    1778:	eb bb                	jmp    1735 <no_error_code>

0000177a <double_fault>:
double_fault():
    177a:	68 38 18 00 00       	push   $0x1838

0000177f <error_code>:
error_code():
    177f:	87 44 24 04          	xchg   %eax,0x4(%esp)
    1783:	87 1c 24             	xchg   %ebx,(%esp)
    1786:	51                   	push   %ecx
    1787:	52                   	push   %edx
    1788:	57                   	push   %edi
    1789:	56                   	push   %esi
    178a:	55                   	push   %ebp
    178b:	1e                   	push   %ds
    178c:	06                   	push   %es
    178d:	0f a0                	push   %fs
    178f:	50                   	push   %eax
    1790:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    1794:	50                   	push   %eax
    1795:	b8 10 00 00 00       	mov    $0x10,%eax
    179a:	8e d8                	mov    %eax,%ds
    179c:	8e c0                	mov    %eax,%es
    179e:	8e e0                	mov    %eax,%fs
    17a0:	ff d3                	call   *%ebx
    17a2:	83 c4 08             	add    $0x8,%esp
    17a5:	0f a1                	pop    %fs
    17a7:	07                   	pop    %es
    17a8:	1f                   	pop    %ds
    17a9:	5d                   	pop    %ebp
    17aa:	5e                   	pop    %esi
    17ab:	5f                   	pop    %edi
    17ac:	5a                   	pop    %edx
    17ad:	59                   	pop    %ecx
    17ae:	5b                   	pop    %ebx
    17af:	58                   	pop    %eax
    17b0:	cf                   	iret   

000017b1 <general_protection>:
general_protection():
    17b1:	68 1f 18 00 00       	push   $0x181f
    17b6:	eb c7                	jmp    177f <error_code>

000017b8 <invalid_TSS>:
invalid_TSS():
    17b8:	68 51 18 00 00       	push   $0x1851
    17bd:	eb c0                	jmp    177f <error_code>

000017bf <segment_not_present>:
segment_not_present():
    17bf:	68 83 18 00 00       	push   $0x1883
    17c4:	eb b9                	jmp    177f <error_code>

000017c6 <stack_segment>:
stack_segment():
    17c6:	68 6a 18 00 00       	push   $0x186a
    17cb:	eb b2                	jmp    177f <error_code>

000017cd <die>:
die():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:16
void invalid_TSS();
void segment_not_present();
void stack_segment();
int32_t printks(const char* msg);

static void die(char* str, int32_t esp_ptr, int32_t nr) {
    17cd:	55                   	push   %ebp
    17ce:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:18
    //TODO: not implement. do not have printk
    printks(str);
    17d0:	ff 75 08             	pushl  0x8(%ebp)
    17d3:	e8 ec 01 00 00       	call   19c4 <printks>
    17d8:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:20 (discriminator 1)
    //do_exit(11);
    while(1) {} //TODO: should call do_exit. but not implement
    17db:	eb fe                	jmp    17db <die+0xe>

000017dd <do_divide_error>:
do_divide_error():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:27
/**
 * NOTICE: int32_t esp is actually as pointer to esp.
 * but we still use type int32_t, according to how linux wrote.
 * its type will be cast when necessary
 */
void do_divide_error(int32_t esp, int32_t error_code) {
    17dd:	55                   	push   %ebp
    17de:	89 e5                	mov    %esp,%ebp
    17e0:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:28
    int32_t magic = 0x77887788; //magic number to check whether jump is correct
    17e3:	c7 45 fc 88 77 88 77 	movl   $0x77887788,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:29
    die("divide error", esp, error_code);
    17ea:	ff 75 0c             	pushl  0xc(%ebp)
    17ed:	ff 75 08             	pushl  0x8(%ebp)
    17f0:	68 b0 29 00 00       	push   $0x29b0
    17f5:	e8 d3 ff ff ff       	call   17cd <die>
    17fa:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:30
}
    17fd:	90                   	nop
    17fe:	c9                   	leave  
    17ff:	c3                   	ret    

00001800 <do_int3>:
do_int3():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:42
    int32_t esi,
    int32_t edi,
    int32_t edx,
    int32_t ecx,
    int32_t ebx,
    int32_t eax) {
    1800:	55                   	push   %ebp
    1801:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:44
        //TODO: empty so far.
}
    1803:	90                   	nop
    1804:	5d                   	pop    %ebp
    1805:	c3                   	ret    

00001806 <do_bounds>:
do_bounds():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:46

void do_bounds(int32_t esp, int32_t error_code) {
    1806:	55                   	push   %ebp
    1807:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:47
    die("bounds", esp, error_code);
    1809:	ff 75 0c             	pushl  0xc(%ebp)
    180c:	ff 75 08             	pushl  0x8(%ebp)
    180f:	68 bd 29 00 00       	push   $0x29bd
    1814:	e8 b4 ff ff ff       	call   17cd <die>
    1819:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:48
}
    181c:	90                   	nop
    181d:	c9                   	leave  
    181e:	c3                   	ret    

0000181f <do_general_protection>:
do_general_protection():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:50
     
void do_general_protection(int32_t esp, int32_t error_code) {
    181f:	55                   	push   %ebp
    1820:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:51
    die("general protection", esp, error_code);
    1822:	ff 75 0c             	pushl  0xc(%ebp)
    1825:	ff 75 08             	pushl  0x8(%ebp)
    1828:	68 c4 29 00 00       	push   $0x29c4
    182d:	e8 9b ff ff ff       	call   17cd <die>
    1832:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:52
}
    1835:	90                   	nop
    1836:	c9                   	leave  
    1837:	c3                   	ret    

00001838 <do_double_fault>:
do_double_fault():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:54
    
void do_double_fault(int32_t esp, int32_t error_code) {
    1838:	55                   	push   %ebp
    1839:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:55
    die("double fault", esp, error_code);
    183b:	ff 75 0c             	pushl  0xc(%ebp)
    183e:	ff 75 08             	pushl  0x8(%ebp)
    1841:	68 d7 29 00 00       	push   $0x29d7
    1846:	e8 82 ff ff ff       	call   17cd <die>
    184b:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:56
}
    184e:	90                   	nop
    184f:	c9                   	leave  
    1850:	c3                   	ret    

00001851 <do_invalid_TSS>:
do_invalid_TSS():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:57
void do_invalid_TSS(int32_t esp, int32_t error_code) {
    1851:	55                   	push   %ebp
    1852:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:58
    die("invalid TSS", esp, error_code);
    1854:	ff 75 0c             	pushl  0xc(%ebp)
    1857:	ff 75 08             	pushl  0x8(%ebp)
    185a:	68 e4 29 00 00       	push   $0x29e4
    185f:	e8 69 ff ff ff       	call   17cd <die>
    1864:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:59
}
    1867:	90                   	nop
    1868:	c9                   	leave  
    1869:	c3                   	ret    

0000186a <do_stack_segment>:
do_stack_segment():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:60
void do_stack_segment(int32_t esp, int32_t error_code) {
    186a:	55                   	push   %ebp
    186b:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:61
    die("stack segment", esp, error_code);
    186d:	ff 75 0c             	pushl  0xc(%ebp)
    1870:	ff 75 08             	pushl  0x8(%ebp)
    1873:	68 f0 29 00 00       	push   $0x29f0
    1878:	e8 50 ff ff ff       	call   17cd <die>
    187d:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:62
}
    1880:	90                   	nop
    1881:	c9                   	leave  
    1882:	c3                   	ret    

00001883 <do_segment_not_present>:
do_segment_not_present():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:63
void do_segment_not_present(int32_t esp, int32_t error_code) {
    1883:	55                   	push   %ebp
    1884:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:64
    die("segment not present", esp, error_code);
    1886:	ff 75 0c             	pushl  0xc(%ebp)
    1889:	ff 75 08             	pushl  0x8(%ebp)
    188c:	68 fe 29 00 00       	push   $0x29fe
    1891:	e8 37 ff ff ff       	call   17cd <die>
    1896:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:65
}
    1899:	90                   	nop
    189a:	c9                   	leave  
    189b:	c3                   	ret    

0000189c <trap_init>:
trap_init():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:66
void trap_init() {
    189c:	55                   	push   %ebp
    189d:	89 e5                	mov    %esp,%ebp
    189f:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:67
    set_trap_gate(0, &divide_error);
    18a0:	b9 b5 04 00 00       	mov    $0x4b5,%ecx
    18a5:	bb b9 04 00 00       	mov    $0x4b9,%ebx
    18aa:	ba 30 17 00 00       	mov    $0x1730,%edx
    18af:	b8 00 00 08 00       	mov    $0x80000,%eax
    18b4:	66 89 d0             	mov    %dx,%ax
    18b7:	66 ba 00 8f          	mov    $0x8f00,%dx
    18bb:	89 01                	mov    %eax,(%ecx)
    18bd:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:68
    set_trap_gate(1, &debug);
    18bf:	b9 bd 04 00 00       	mov    $0x4bd,%ecx
    18c4:	bb c1 04 00 00       	mov    $0x4c1,%ebx
    18c9:	ba 65 17 00 00       	mov    $0x1765,%edx
    18ce:	b8 00 00 08 00       	mov    $0x80000,%eax
    18d3:	66 89 d0             	mov    %dx,%ax
    18d6:	66 ba 00 8f          	mov    $0x8f00,%dx
    18da:	89 01                	mov    %eax,(%ecx)
    18dc:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:69
    set_trap_gate(3, &int3);
    18de:	b9 cd 04 00 00       	mov    $0x4cd,%ecx
    18e3:	bb d1 04 00 00       	mov    $0x4d1,%ebx
    18e8:	ba 6c 17 00 00       	mov    $0x176c,%edx
    18ed:	b8 00 00 08 00       	mov    $0x80000,%eax
    18f2:	66 89 d0             	mov    %dx,%ax
    18f5:	66 ba 00 8f          	mov    $0x8f00,%dx
    18f9:	89 01                	mov    %eax,(%ecx)
    18fb:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:70
    set_trap_gate(5, &bounds);
    18fd:	b9 dd 04 00 00       	mov    $0x4dd,%ecx
    1902:	bb e1 04 00 00       	mov    $0x4e1,%ebx
    1907:	ba 73 17 00 00       	mov    $0x1773,%edx
    190c:	b8 00 00 08 00       	mov    $0x80000,%eax
    1911:	66 89 d0             	mov    %dx,%ax
    1914:	66 ba 00 8f          	mov    $0x8f00,%dx
    1918:	89 01                	mov    %eax,(%ecx)
    191a:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:71
    set_trap_gate(8, &double_fault);
    191c:	b9 f5 04 00 00       	mov    $0x4f5,%ecx
    1921:	bb f9 04 00 00       	mov    $0x4f9,%ebx
    1926:	ba 7a 17 00 00       	mov    $0x177a,%edx
    192b:	b8 00 00 08 00       	mov    $0x80000,%eax
    1930:	66 89 d0             	mov    %dx,%ax
    1933:	66 ba 00 8f          	mov    $0x8f00,%dx
    1937:	89 01                	mov    %eax,(%ecx)
    1939:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:72
    set_trap_gate(10, &invalid_TSS);
    193b:	b9 05 05 00 00       	mov    $0x505,%ecx
    1940:	bb 09 05 00 00       	mov    $0x509,%ebx
    1945:	ba b8 17 00 00       	mov    $0x17b8,%edx
    194a:	b8 00 00 08 00       	mov    $0x80000,%eax
    194f:	66 89 d0             	mov    %dx,%ax
    1952:	66 ba 00 8f          	mov    $0x8f00,%dx
    1956:	89 01                	mov    %eax,(%ecx)
    1958:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:73
    set_trap_gate(11, &segment_not_present);
    195a:	b9 0d 05 00 00       	mov    $0x50d,%ecx
    195f:	bb 11 05 00 00       	mov    $0x511,%ebx
    1964:	ba bf 17 00 00       	mov    $0x17bf,%edx
    1969:	b8 00 00 08 00       	mov    $0x80000,%eax
    196e:	66 89 d0             	mov    %dx,%ax
    1971:	66 ba 00 8f          	mov    $0x8f00,%dx
    1975:	89 01                	mov    %eax,(%ecx)
    1977:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:74
    set_trap_gate(12, &stack_segment);
    1979:	b9 15 05 00 00       	mov    $0x515,%ecx
    197e:	bb 19 05 00 00       	mov    $0x519,%ebx
    1983:	ba c6 17 00 00       	mov    $0x17c6,%edx
    1988:	b8 00 00 08 00       	mov    $0x80000,%eax
    198d:	66 89 d0             	mov    %dx,%ax
    1990:	66 ba 00 8f          	mov    $0x8f00,%dx
    1994:	89 01                	mov    %eax,(%ecx)
    1996:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:75
    set_trap_gate(13, &general_protection);
    1998:	b9 1d 05 00 00       	mov    $0x51d,%ecx
    199d:	bb 21 05 00 00       	mov    $0x521,%ebx
    19a2:	ba b1 17 00 00       	mov    $0x17b1,%edx
    19a7:	b8 00 00 08 00       	mov    $0x80000,%eax
    19ac:	66 89 d0             	mov    %dx,%ax
    19af:	66 ba 00 8f          	mov    $0x8f00,%dx
    19b3:	89 01                	mov    %eax,(%ecx)
    19b5:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:76
    19b7:	90                   	nop
    19b8:	5b                   	pop    %ebx
    19b9:	5d                   	pop    %ebp
    19ba:	c3                   	ret    
    19bb:	66 90                	xchg   %ax,%ax
    19bd:	66 90                	xchg   %ax,%ax
    19bf:	90                   	nop

000019c0 <test_write>:
test_write():
    19c0:	1e                   	push   %ds
    19c1:	53                   	push   %ebx
    19c2:	1f                   	pop    %ds
    19c3:	c3                   	ret    

000019c4 <printks>:
printks():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:8
 * NOTICE: it is only use as a workaround.
 */
#include <stdint.h>
void putch(char);
void newline();
int32_t printks(const char* str) {
    19c4:	55                   	push   %ebp
    19c5:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:10
 
   while (*str) {
    19c7:	eb 27                	jmp    19f0 <printks+0x2c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:11
        if (*str == '\n') {
    19c9:	8b 45 08             	mov    0x8(%ebp),%eax
    19cc:	0f b6 00             	movzbl (%eax),%eax
    19cf:	3c 0a                	cmp    $0xa,%al
    19d1:	75 07                	jne    19da <printks+0x16>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:12
            newline();
    19d3:	e8 7a 00 00 00       	call   1a52 <newline>
    19d8:	eb 12                	jmp    19ec <printks+0x28>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:15
        }
        else {
            putch(*str);
    19da:	8b 45 08             	mov    0x8(%ebp),%eax
    19dd:	0f b6 00             	movzbl (%eax),%eax
    19e0:	0f be c0             	movsbl %al,%eax
    19e3:	50                   	push   %eax
    19e4:	e8 17 00 00 00       	call   1a00 <putch>
    19e9:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:17
        }
        str++;
    19ec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:10
#include <stdint.h>
void putch(char);
void newline();
int32_t printks(const char* str) {
 
   while (*str) {
    19f0:	8b 45 08             	mov    0x8(%ebp),%eax
    19f3:	0f b6 00             	movzbl (%eax),%eax
    19f6:	84 c0                	test   %al,%al
    19f8:	75 cf                	jne    19c9 <printks+0x5>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:19
        else {
            putch(*str);
        }
        str++;
    }
    19fa:	90                   	nop
    19fb:	c9                   	leave  
    19fc:	c3                   	ret    
    19fd:	66 90                	xchg   %ax,%ax
    19ff:	90                   	nop

00001a00 <putch>:
putch():
    1a00:	c8 00 00 00          	enter  $0x0,$0x0
    1a04:	53                   	push   %ebx
    1a05:	1e                   	push   %ds
    1a06:	66 56                	push   %si
    1a08:	b8 28 00 00 00       	mov    $0x28,%eax
    1a0d:	8e d8                	mov    %eax,%ds
    1a0f:	66 8b 15 00 00 00 00 	mov    0x0,%dx

00001a16 <putch.ts>:
putch.ts():
    1a16:	66 89 d1             	mov    %dx,%cx
    1a19:	66 41                	inc    %cx
    1a1b:	80 f9 50             	cmp    $0x50,%cl
    1a1e:	75 04                	jne    1a24 <putch.writeback>
    1a20:	b1 00                	mov    $0x0,%cl
    1a22:	fe c5                	inc    %ch

00001a24 <putch.writeback>:
putch.writeback():
    1a24:	66 89 0d 00 00 00 00 	mov    %cx,0x0
    1a2b:	88 f0                	mov    %dh,%al
    1a2d:	b4 a0                	mov    $0xa0,%ah
    1a2f:	f6 e4                	mul    %ah
    1a31:	30 f6                	xor    %dh,%dh
    1a33:	66 01 d0             	add    %dx,%ax
    1a36:	66 01 d0             	add    %dx,%ax
    1a39:	66 89 c6             	mov    %ax,%si
    1a3c:	b8 20 00 00 00       	mov    $0x20,%eax
    1a41:	8e d8                	mov    %eax,%ds
    1a43:	8a 5d 08             	mov    0x8(%ebp),%bl
    1a46:	b7 07                	mov    $0x7,%bh
    1a48:	66 67 89 1c          	mov    %bx,(%si)
    1a4c:	66 5e                	pop    %si
    1a4e:	1f                   	pop    %ds
    1a4f:	5b                   	pop    %ebx
    1a50:	c9                   	leave  
    1a51:	c3                   	ret    

00001a52 <newline>:
newline():
    1a52:	c8 00 00 00          	enter  $0x0,$0x0
    1a56:	1e                   	push   %ds
    1a57:	b8 28 00 00 00       	mov    $0x28,%eax
    1a5c:	8e d8                	mov    %eax,%ds
    1a5e:	66 8b 15 00 00 00 00 	mov    0x0,%dx
    1a65:	30 d2                	xor    %dl,%dl
    1a67:	fe c6                	inc    %dh
    1a69:	80 fe 18             	cmp    $0x18,%dh
    1a6c:	75 02                	jne    1a70 <newline.writeback>
    1a6e:	b6 00                	mov    $0x0,%dh

00001a70 <newline.writeback>:
newline.writeback():
    1a70:	66 89 15 00 00 00 00 	mov    %dx,0x0
    1a77:	1f                   	pop    %ds
    1a78:	c9                   	leave  
    1a79:	c3                   	ret    

00001a7a <I_AM_HERE>:
I_AM_HERE():
    1a7a:	c8 00 00 00          	enter  $0x0,$0x0
    1a7e:	53                   	push   %ebx
    1a7f:	1e                   	push   %ds
    1a80:	b8 20 00 00 00       	mov    $0x20,%eax
    1a85:	8e d8                	mov    %eax,%ds
    1a87:	8b 5d 08             	mov    0x8(%ebp),%ebx
    1a8a:	01 db                	add    %ebx,%ebx
    1a8c:	fe 03                	incb   (%ebx)
    1a8e:	fe 43 01             	incb   0x1(%ebx)
    1a91:	1f                   	pop    %ds
    1a92:	5b                   	pop    %ebx
    1a93:	c9                   	leave  
    1a94:	c3                   	ret    
    1a95:	66 90                	xchg   %ax,%ax
    1a97:	66 90                	xchg   %ax,%ax
    1a99:	66 90                	xchg   %ax,%ax
    1a9b:	66 90                	xchg   %ax,%ax
    1a9d:	66 90                	xchg   %ax,%ax
    1a9f:	90                   	nop

00001aa0 <bad_sys_call>:
bad_sys_call():
    1aa0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1aa5:	cf                   	iret   

00001aa6 <system_call>:
system_call():
    1aa6:	83 f8 48             	cmp    $0x48,%eax
    1aa9:	77 f5                	ja     1aa0 <bad_sys_call>
    1aab:	50                   	push   %eax
    1aac:	51                   	push   %ecx
    1aad:	52                   	push   %edx
    1aae:	53                   	push   %ebx
    1aaf:	6a 00                	push   $0x0
    1ab1:	55                   	push   %ebp
    1ab2:	56                   	push   %esi
    1ab3:	57                   	push   %edi
    1ab4:	06                   	push   %es
    1ab5:	16                   	push   %ss
    1ab6:	1e                   	push   %ds
    1ab7:	0f a0                	push   %fs
    1ab9:	0f a8                	push   %gs
    1abb:	83 ec 04             	sub    $0x4,%esp
    1abe:	89 24 24             	mov    %esp,(%esp)
    1ac1:	e8 33 06 00 00       	call   20f9 <sys_save>
    1ac6:	8b 44 24 34          	mov    0x34(%esp),%eax
    1aca:	ba 10 00 00 00       	mov    $0x10,%edx
    1acf:	8e da                	mov    %edx,%ds
    1ad1:	8e c2                	mov    %edx,%es
    1ad3:	8e e2                	mov    %edx,%fs
    1ad5:	8e ea                	mov    %edx,%gs
    1ad7:	8b 5c 24 28          	mov    0x28(%esp),%ebx
    1adb:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    1adf:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    1ae3:	52                   	push   %edx
    1ae4:	51                   	push   %ecx
    1ae5:	53                   	push   %ebx
    1ae6:	ff 14 85 20 31 00 00 	call   *0x3120(,%eax,4)
    1aed:	83 c4 0c             	add    $0xc,%esp
    1af0:	50                   	push   %eax

00001af1 <system_call.final>:
system_call.final():
    1af1:	58                   	pop    %eax
    1af2:	83 c4 04             	add    $0x4,%esp
    1af5:	0f a9                	pop    %gs
    1af7:	0f a1                	pop    %fs
    1af9:	1f                   	pop    %ds
    1afa:	17                   	pop    %ss
    1afb:	07                   	pop    %es
    1afc:	5f                   	pop    %edi
    1afd:	5e                   	pop    %esi
    1afe:	5d                   	pop    %ebp
    1aff:	83 c4 04             	add    $0x4,%esp
    1b02:	5b                   	pop    %ebx
    1b03:	5a                   	pop    %edx
    1b04:	59                   	pop    %ecx
    1b05:	58                   	pop    %eax
    1b06:	8b 44 24 c4          	mov    -0x3c(%esp),%eax
    1b0a:	cf                   	iret   

00001b0b <timer_interrupt>:
timer_interrupt():
    1b0b:	50                   	push   %eax
    1b0c:	51                   	push   %ecx
    1b0d:	52                   	push   %edx
    1b0e:	53                   	push   %ebx
    1b0f:	6a 00                	push   $0x0
    1b11:	55                   	push   %ebp
    1b12:	56                   	push   %esi
    1b13:	57                   	push   %edi
    1b14:	06                   	push   %es
    1b15:	16                   	push   %ss
    1b16:	1e                   	push   %ds
    1b17:	0f a0                	push   %fs
    1b19:	0f a8                	push   %gs
    1b1b:	b8 10 00 00 00       	mov    $0x10,%eax
    1b20:	8e c0                	mov    %eax,%es
    1b22:	8e d0                	mov    %eax,%ss
    1b24:	8e d8                	mov    %eax,%ds
    1b26:	8e e0                	mov    %eax,%fs
    1b28:	8e e8                	mov    %eax,%gs
    1b2a:	83 ec 04             	sub    $0x4,%esp
    1b2d:	89 24 24             	mov    %esp,(%esp)
    1b30:	e8 c4 05 00 00       	call   20f9 <sys_save>

00001b35 <return_from_timer_interrupt>:
return_from_timer_interrupt():
    1b35:	6a 14                	push   $0x14
    1b37:	e8 3e ff ff ff       	call   1a7a <I_AM_HERE>
    1b3c:	83 c4 04             	add    $0x4,%esp
    1b3f:	b0 20                	mov    $0x20,%al
    1b41:	e6 20                	out    %al,$0x20
    1b43:	e8 94 07 00 00       	call   22dc <schedule>
    1b48:	50                   	push   %eax
    1b49:	e8 27 07 00 00       	call   2275 <sys_restart>

00001b4e <return_from_sys_restart>:
return_from_sys_restart():
    1b4e:	83 c4 04             	add    $0x4,%esp
    1b51:	0f a9                	pop    %gs
    1b53:	0f a1                	pop    %fs
    1b55:	1f                   	pop    %ds
    1b56:	17                   	pop    %ss
    1b57:	07                   	pop    %es
    1b58:	5f                   	pop    %edi
    1b59:	5e                   	pop    %esi
    1b5a:	5d                   	pop    %ebp
    1b5b:	83 c4 04             	add    $0x4,%esp
    1b5e:	5b                   	pop    %ebx
    1b5f:	5a                   	pop    %edx
    1b60:	59                   	pop    %ecx
    1b61:	58                   	pop    %eax
    1b62:	cf                   	iret   

00001b63 <test_print>:
test_print():
    1b63:	83 ec 0c             	sub    $0xc,%esp
    1b66:	83 ec 0c             	sub    $0xc,%esp
    1b69:	68 12 2a 00 00       	push   $0x2a12
    1b6e:	e8 51 fe ff ff       	call   19c4 <printks>
    1b73:	83 c4 10             	add    $0x10,%esp
    1b76:	83 ec 0c             	sub    $0xc,%esp
    1b79:	68 28 2a 00 00       	push   $0x2a28
    1b7e:	e8 41 fe ff ff       	call   19c4 <printks>
    1b83:	83 c4 10             	add    $0x10,%esp
    1b86:	b8 00 00 00 00       	mov    $0x0,%eax
    1b8b:	83 c4 0c             	add    $0xc,%esp
    1b8e:	c3                   	ret    

00001b8f <print_hello>:
print_hello():
    1b8f:	83 ec 0c             	sub    $0xc,%esp
    1b92:	83 ec 0c             	sub    $0xc,%esp
    1b95:	68 e0 2f 00 00       	push   $0x2fe0
    1b9a:	e8 25 fe ff ff       	call   19c4 <printks>
    1b9f:	83 c4 10             	add    $0x10,%esp
    1ba2:	0f b6 05 e0 2f 00 00 	movzbl 0x2fe0,%eax
    1ba9:	83 c0 01             	add    $0x1,%eax
    1bac:	a2 e0 2f 00 00       	mov    %al,0x2fe0
    1bb1:	b8 00 00 00 00       	mov    $0x0,%eax
    1bb6:	83 c4 0c             	add    $0xc,%esp
    1bb9:	c3                   	ret    

00001bba <sys_fork>:
sys_fork():
    1bba:	83 ec 1c             	sub    $0x1c,%esp
    1bbd:	83 ec 0c             	sub    $0xc,%esp
    1bc0:	68 3e 2a 00 00       	push   $0x2a3e
    1bc5:	e8 fa fd ff ff       	call   19c4 <printks>
    1bca:	83 c4 10             	add    $0x10,%esp
    1bcd:	e8 22 08 00 00       	call   23f4 <first_empty_pcb>
    1bd2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1bd6:	83 7c 24 0c ff       	cmpl   $0xffffffff,0xc(%esp)
    1bdb:	75 07                	jne    1be4 <sys_fork+0x2a>
    1bdd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1be2:	eb 2b                	jmp    1c0f <sys_fork+0x55>
    1be4:	a1 40 46 00 00       	mov    0x4640,%eax
    1be9:	83 ec 08             	sub    $0x8,%esp
    1bec:	50                   	push   %eax
    1bed:	ff 74 24 18          	pushl  0x18(%esp)
    1bf1:	e8 5a 08 00 00       	call   2450 <copy_process>
    1bf6:	83 c4 10             	add    $0x10,%esp
    1bf9:	a1 40 46 00 00       	mov    0x4640,%eax
    1bfe:	c1 e0 02             	shl    $0x2,%eax
    1c01:	89 c2                	mov    %eax,%edx
    1c03:	c1 e2 04             	shl    $0x4,%edx
    1c06:	01 d0                	add    %edx,%eax
    1c08:	05 40 35 00 00       	add    $0x3540,%eax
    1c0d:	8b 00                	mov    (%eax),%eax
    1c0f:	83 c4 1c             	add    $0x1c,%esp
    1c12:	c3                   	ret    

00001c13 <sys_wait>:
sys_wait():
    1c13:	a1 40 46 00 00       	mov    0x4640,%eax
    1c18:	c1 e0 02             	shl    $0x2,%eax
    1c1b:	89 c2                	mov    %eax,%edx
    1c1d:	c1 e2 04             	shl    $0x4,%edx
    1c20:	01 d0                	add    %edx,%eax
    1c22:	05 7c 35 00 00       	add    $0x357c,%eax
    1c27:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    1c2d:	ea 35 1b 00 00 08 00 	ljmp   $0x8,$0x1b35
    1c34:	b8 01 00 00 00       	mov    $0x1,%eax
    1c39:	c3                   	ret    

00001c3a <sys_exit>:
sys_exit():
    1c3a:	83 ec 10             	sub    $0x10,%esp
    1c3d:	a1 40 46 00 00       	mov    0x4640,%eax
    1c42:	c1 e0 02             	shl    $0x2,%eax
    1c45:	89 c2                	mov    %eax,%edx
    1c47:	c1 e2 04             	shl    $0x4,%edx
    1c4a:	01 d0                	add    %edx,%eax
    1c4c:	05 7c 35 00 00       	add    $0x357c,%eax
    1c51:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1c57:	a1 40 46 00 00       	mov    0x4640,%eax
    1c5c:	c1 e0 02             	shl    $0x2,%eax
    1c5f:	89 c2                	mov    %eax,%edx
    1c61:	c1 e2 04             	shl    $0x4,%edx
    1c64:	01 d0                	add    %edx,%eax
    1c66:	05 80 35 00 00       	add    $0x3580,%eax
    1c6b:	8b 00                	mov    (%eax),%eax
    1c6d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1c71:	83 7c 24 0c ff       	cmpl   $0xffffffff,0xc(%esp)
    1c76:	74 33                	je     1cab <sys_exit+0x71>
    1c78:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1c7c:	c1 e0 02             	shl    $0x2,%eax
    1c7f:	89 c2                	mov    %eax,%edx
    1c81:	c1 e2 04             	shl    $0x4,%edx
    1c84:	01 d0                	add    %edx,%eax
    1c86:	05 7c 35 00 00       	add    $0x357c,%eax
    1c8b:	8b 00                	mov    (%eax),%eax
    1c8d:	83 f8 02             	cmp    $0x2,%eax
    1c90:	75 19                	jne    1cab <sys_exit+0x71>
    1c92:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1c96:	c1 e0 02             	shl    $0x2,%eax
    1c99:	89 c2                	mov    %eax,%edx
    1c9b:	c1 e2 04             	shl    $0x4,%edx
    1c9e:	01 d0                	add    %edx,%eax
    1ca0:	05 7c 35 00 00       	add    $0x357c,%eax
    1ca5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1cab:	ea 35 1b 00 00 08 00 	ljmp   $0x8,$0x1b35
    1cb2:	b8 01 00 00 00       	mov    $0x1,%eax
    1cb7:	83 c4 10             	add    $0x10,%esp
    1cba:	c3                   	ret    

00001cbb <do_getsem>:
do_getsem():
    1cbb:	83 ec 10             	sub    $0x10,%esp
    1cbe:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    1cc5:	00 
    1cc6:	eb 60                	jmp    1d28 <do_getsem+0x6d>
    1cc8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1ccc:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1cd2:	05 e8 47 00 00       	add    $0x47e8,%eax
    1cd7:	8b 00                	mov    (%eax),%eax
    1cd9:	85 c0                	test   %eax,%eax
    1cdb:	75 46                	jne    1d23 <do_getsem+0x68>
    1cdd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1ce1:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1ce7:	05 e8 47 00 00       	add    $0x47e8,%eax
    1cec:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1cf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1cf6:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1cfc:	8d 90 e0 46 00 00    	lea    0x46e0(%eax),%edx
    1d02:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d06:	89 02                	mov    %eax,(%edx)
    1d08:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d0c:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d12:	05 e4 47 00 00       	add    $0x47e4,%eax
    1d17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    1d1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d21:	eb 14                	jmp    1d37 <do_getsem+0x7c>
    1d23:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    1d28:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
    1d2f:	00 
    1d30:	7e 96                	jle    1cc8 <do_getsem+0xd>
    1d32:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1d37:	83 c4 10             	add    $0x10,%esp
    1d3a:	c3                   	ret    

00001d3b <do_free_sem>:
do_free_sem():
    1d3b:	8b 44 24 04          	mov    0x4(%esp),%eax
    1d3f:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d45:	05 e8 47 00 00       	add    $0x47e8,%eax
    1d4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    1d50:	b8 00 00 00 00       	mov    $0x0,%eax
    1d55:	c3                   	ret    

00001d56 <do_p>:
do_p():
    1d56:	83 ec 10             	sub    $0x10,%esp
    1d59:	fa                   	cli    
    1d5a:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d5e:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d64:	05 e0 46 00 00       	add    $0x46e0,%eax
    1d69:	8b 00                	mov    (%eax),%eax
    1d6b:	8d 50 ff             	lea    -0x1(%eax),%edx
    1d6e:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d72:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d78:	05 e0 46 00 00       	add    $0x46e0,%eax
    1d7d:	89 10                	mov    %edx,(%eax)
    1d7f:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d83:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d89:	05 e0 46 00 00       	add    $0x46e0,%eax
    1d8e:	8b 00                	mov    (%eax),%eax
    1d90:	85 c0                	test   %eax,%eax
    1d92:	79 60                	jns    1df4 <do_p+0x9e>
    1d94:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d98:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d9e:	05 e4 47 00 00       	add    $0x47e4,%eax
    1da3:	8b 00                	mov    (%eax),%eax
    1da5:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1da9:	a1 40 46 00 00       	mov    0x4640,%eax
    1dae:	8b 54 24 14          	mov    0x14(%esp),%edx
    1db2:	6b ca 43             	imul   $0x43,%edx,%ecx
    1db5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    1db9:	01 ca                	add    %ecx,%edx
    1dbb:	89 04 95 e4 46 00 00 	mov    %eax,0x46e4(,%edx,4)
    1dc2:	8b 44 24 14          	mov    0x14(%esp),%eax
    1dc6:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1dcc:	05 e4 47 00 00       	add    $0x47e4,%eax
    1dd1:	8b 00                	mov    (%eax),%eax
    1dd3:	8d 50 01             	lea    0x1(%eax),%edx
    1dd6:	8b 44 24 14          	mov    0x14(%esp),%eax
    1dda:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1de0:	05 e4 47 00 00       	add    $0x47e4,%eax
    1de5:	89 10                	mov    %edx,(%eax)
    1de7:	fa                   	cli    
    1de8:	b8 03 00 00 00       	mov    $0x3,%eax
    1ded:	cd 80                	int    $0x80
    1def:	89 44 24 08          	mov    %eax,0x8(%esp)
    1df3:	fb                   	sti    
    1df4:	fb                   	sti    
    1df5:	b8 00 00 00 00       	mov    $0x0,%eax
    1dfa:	83 c4 10             	add    $0x10,%esp
    1dfd:	c3                   	ret    

00001dfe <do_v>:
do_v():
    1dfe:	83 ec 10             	sub    $0x10,%esp
    1e01:	fa                   	cli    
    1e02:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e06:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e0c:	05 e0 46 00 00       	add    $0x46e0,%eax
    1e11:	8b 00                	mov    (%eax),%eax
    1e13:	8d 50 01             	lea    0x1(%eax),%edx
    1e16:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e1a:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e20:	05 e0 46 00 00       	add    $0x46e0,%eax
    1e25:	89 10                	mov    %edx,(%eax)
    1e27:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e2b:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e31:	05 e0 46 00 00       	add    $0x46e0,%eax
    1e36:	8b 00                	mov    (%eax),%eax
    1e38:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1e3c:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e40:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e46:	05 e0 46 00 00       	add    $0x46e0,%eax
    1e4b:	8b 00                	mov    (%eax),%eax
    1e4d:	85 c0                	test   %eax,%eax
    1e4f:	7f 6b                	jg     1ebc <do_v+0xbe>
    1e51:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e55:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e5b:	05 e4 47 00 00       	add    $0x47e4,%eax
    1e60:	8b 00                	mov    (%eax),%eax
    1e62:	8d 50 ff             	lea    -0x1(%eax),%edx
    1e65:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e69:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e6f:	05 e4 47 00 00       	add    $0x47e4,%eax
    1e74:	89 10                	mov    %edx,(%eax)
    1e76:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e7a:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e80:	05 e4 47 00 00       	add    $0x47e4,%eax
    1e85:	8b 00                	mov    (%eax),%eax
    1e87:	89 44 24 08          	mov    %eax,0x8(%esp)
    1e8b:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e8f:	6b d0 43             	imul   $0x43,%eax,%edx
    1e92:	8b 44 24 08          	mov    0x8(%esp),%eax
    1e96:	01 d0                	add    %edx,%eax
    1e98:	8b 04 85 e4 46 00 00 	mov    0x46e4(,%eax,4),%eax
    1e9f:	89 44 24 04          	mov    %eax,0x4(%esp)
    1ea3:	8b 44 24 04          	mov    0x4(%esp),%eax
    1ea7:	c1 e0 02             	shl    $0x2,%eax
    1eaa:	89 c2                	mov    %eax,%edx
    1eac:	c1 e2 04             	shl    $0x4,%edx
    1eaf:	01 d0                	add    %edx,%eax
    1eb1:	05 7c 35 00 00       	add    $0x357c,%eax
    1eb6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1ebc:	fb                   	sti    
    1ebd:	b8 00 00 00 00       	mov    $0x0,%eax
    1ec2:	83 c4 10             	add    $0x10,%esp
    1ec5:	c3                   	ret    

00001ec6 <init_sys_call>:
init_sys_call():
    1ec6:	c7 05 20 31 00 00 63 	movl   $0x1b63,0x3120
    1ecd:	1b 00 00 
    1ed0:	c7 05 24 31 00 00 8f 	movl   $0x1b8f,0x3124
    1ed7:	1b 00 00 
    1eda:	c7 05 28 31 00 00 ba 	movl   $0x1bba,0x3128
    1ee1:	1b 00 00 
    1ee4:	c7 05 2c 31 00 00 13 	movl   $0x1c13,0x312c
    1eeb:	1c 00 00 
    1eee:	c7 05 30 31 00 00 3a 	movl   $0x1c3a,0x3130
    1ef5:	1c 00 00 
    1ef8:	c7 05 34 31 00 00 bb 	movl   $0x1cbb,0x3134
    1eff:	1c 00 00 
    1f02:	c7 05 38 31 00 00 3b 	movl   $0x1d3b,0x3138
    1f09:	1d 00 00 
    1f0c:	c7 05 3c 31 00 00 56 	movl   $0x1d56,0x313c
    1f13:	1d 00 00 
    1f16:	c7 05 40 31 00 00 fe 	movl   $0x1dfe,0x3140
    1f1d:	1d 00 00 
    1f20:	90                   	nop
    1f21:	c3                   	ret    

00001f22 <sched_init>:
sched_init():
    1f22:	55                   	push   %ebp
    1f23:	57                   	push   %edi
    1f24:	56                   	push   %esi
    1f25:	53                   	push   %ebx
    1f26:	83 ec 1c             	sub    $0x1c,%esp
    1f29:	c7 05 e8 2f 00 00 02 	movl   $0x2,0x2fe8
    1f30:	00 00 00 
    1f33:	c7 05 40 46 00 00 00 	movl   $0x0,0x4640
    1f3a:	00 00 00 
    1f3d:	b8 00 30 00 00       	mov    $0x3000,%eax
    1f42:	ba e5 0c 00 00       	mov    $0xce5,%edx
    1f47:	b9 e7 0c 00 00       	mov    $0xce7,%ecx
    1f4c:	bb e9 0c 00 00       	mov    $0xce9,%ebx
    1f51:	be ea 0c 00 00       	mov    $0xcea,%esi
    1f56:	bf eb 0c 00 00       	mov    $0xceb,%edi
    1f5b:	bd ec 0c 00 00       	mov    $0xcec,%ebp
    1f60:	66 c7 02 68 00       	movw   $0x68,(%edx)
    1f65:	66 89 01             	mov    %ax,(%ecx)
    1f68:	c1 c8 10             	ror    $0x10,%eax
    1f6b:	88 03                	mov    %al,(%ebx)
    1f6d:	c6 06 89             	movb   $0x89,(%esi)
    1f70:	c6 07 00             	movb   $0x0,(%edi)
    1f73:	88 65 00             	mov    %ah,0x0(%ebp)
    1f76:	c1 c8 10             	ror    $0x10,%eax
    1f79:	b8 d4 30 00 00       	mov    $0x30d4,%eax
    1f7e:	ba ed 0c 00 00       	mov    $0xced,%edx
    1f83:	b9 ef 0c 00 00       	mov    $0xcef,%ecx
    1f88:	bb f1 0c 00 00       	mov    $0xcf1,%ebx
    1f8d:	be f2 0c 00 00       	mov    $0xcf2,%esi
    1f92:	bf f3 0c 00 00       	mov    $0xcf3,%edi
    1f97:	bd f4 0c 00 00       	mov    $0xcf4,%ebp
    1f9c:	66 c7 02 68 00       	movw   $0x68,(%edx)
    1fa1:	66 89 01             	mov    %ax,(%ecx)
    1fa4:	c1 c8 10             	ror    $0x10,%eax
    1fa7:	88 03                	mov    %al,(%ebx)
    1fa9:	c6 06 82             	movb   $0x82,(%esi)
    1fac:	c6 07 00             	movb   $0x0,(%edi)
    1faf:	88 65 00             	mov    %ah,0x0(%ebp)
    1fb2:	c1 c8 10             	ror    $0x10,%eax
    1fb5:	c7 44 24 08 f5 0c 00 	movl   $0xcf5,0x8(%esp)
    1fbc:	00 
    1fbd:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    1fc4:	00 
    1fc5:	eb 58                	jmp    201f <sched_init+0xfd>
    1fc7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1fcb:	c1 e0 02             	shl    $0x2,%eax
    1fce:	89 c2                	mov    %eax,%edx
    1fd0:	c1 e2 04             	shl    $0x4,%edx
    1fd3:	01 d0                	add    %edx,%eax
    1fd5:	05 7c 35 00 00       	add    $0x357c,%eax
    1fda:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1fe0:	8b 44 24 08          	mov    0x8(%esp),%eax
    1fe4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    1feb:	8b 44 24 08          	mov    0x8(%esp),%eax
    1fef:	8b 50 04             	mov    0x4(%eax),%edx
    1ff2:	8b 44 24 08          	mov    0x8(%esp),%eax
    1ff6:	89 10                	mov    %edx,(%eax)
    1ff8:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
    1ffd:	8b 44 24 08          	mov    0x8(%esp),%eax
    2001:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    2008:	8b 44 24 08          	mov    0x8(%esp),%eax
    200c:	8b 50 04             	mov    0x4(%eax),%edx
    200f:	8b 44 24 08          	mov    0x8(%esp),%eax
    2013:	89 10                	mov    %edx,(%eax)
    2015:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
    201a:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    201f:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    2024:	7e a1                	jle    1fc7 <sched_init+0xa5>
    2026:	9c                   	pushf  
    2027:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    202e:	9d                   	popf   
    202f:	b8 30 00 00 00       	mov    $0x30,%eax
    2034:	0f 00 d8             	ltr    %ax
    2037:	b8 38 00 00 00       	mov    $0x38,%eax
    203c:	0f 00 d0             	lldt   %ax
    203f:	b8 36 00 00 00       	mov    $0x36,%eax
    2044:	ba 43 00 00 00       	mov    $0x43,%edx
    2049:	ee                   	out    %al,(%dx)
    204a:	eb 00                	jmp    204c <sched_init+0x12a>
    204c:	eb 00                	jmp    204e <sched_init+0x12c>
    204e:	b8 9b 00 00 00       	mov    $0x9b,%eax
    2053:	ba 40 00 00 00       	mov    $0x40,%edx
    2058:	ee                   	out    %al,(%dx)
    2059:	eb 00                	jmp    205b <sched_init+0x139>
    205b:	eb 00                	jmp    205d <sched_init+0x13b>
    205d:	b8 2e 00 00 00       	mov    $0x2e,%eax
    2062:	ba 40 00 00 00       	mov    $0x40,%edx
    2067:	ee                   	out    %al,(%dx)
    2068:	eb 00                	jmp    206a <sched_init+0x148>
    206a:	eb 00                	jmp    206c <sched_init+0x14a>
    206c:	b9 b5 05 00 00       	mov    $0x5b5,%ecx
    2071:	bb b9 05 00 00       	mov    $0x5b9,%ebx
    2076:	ba 0b 1b 00 00       	mov    $0x1b0b,%edx
    207b:	b8 00 00 08 00       	mov    $0x80000,%eax
    2080:	66 89 d0             	mov    %dx,%ax
    2083:	66 ba 00 8e          	mov    $0x8e00,%dx
    2087:	89 01                	mov    %eax,(%ecx)
    2089:	89 13                	mov    %edx,(%ebx)
    208b:	b8 21 00 00 00       	mov    $0x21,%eax
    2090:	89 c2                	mov    %eax,%edx
    2092:	ec                   	in     (%dx),%al
    2093:	eb 00                	jmp    2095 <sched_init+0x173>
    2095:	eb 00                	jmp    2097 <sched_init+0x175>
    2097:	88 44 24 07          	mov    %al,0x7(%esp)
    209b:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    20a0:	0f b6 c0             	movzbl %al,%eax
    20a3:	83 e0 fe             	and    $0xfffffffe,%eax
    20a6:	ba 21 00 00 00       	mov    $0x21,%edx
    20ab:	ee                   	out    %al,(%dx)
    20ac:	b9 b5 08 00 00       	mov    $0x8b5,%ecx
    20b1:	bb b9 08 00 00       	mov    $0x8b9,%ebx
    20b6:	ba a6 1a 00 00       	mov    $0x1aa6,%edx
    20bb:	b8 00 00 08 00       	mov    $0x80000,%eax
    20c0:	66 89 d0             	mov    %dx,%ax
    20c3:	66 ba 00 ef          	mov    $0xef00,%dx
    20c7:	89 01                	mov    %eax,(%ecx)
    20c9:	89 13                	mov    %edx,(%ebx)
    20cb:	e8 09 00 00 00       	call   20d9 <init_first_process>
    20d0:	90                   	nop
    20d1:	83 c4 1c             	add    $0x1c,%esp
    20d4:	5b                   	pop    %ebx
    20d5:	5e                   	pop    %esi
    20d6:	5f                   	pop    %edi
    20d7:	5d                   	pop    %ebp
    20d8:	c3                   	ret    

000020d9 <init_first_process>:
init_first_process():
    20d9:	c7 05 78 35 00 00 00 	movl   $0x0,0x3578
    20e0:	00 00 00 
    20e3:	c7 05 7c 35 00 00 00 	movl   $0x0,0x357c
    20ea:	00 00 00 
    20ed:	c7 05 80 35 00 00 ff 	movl   $0xffffffff,0x3580
    20f4:	ff ff ff 
    20f7:	90                   	nop
    20f8:	c3                   	ret    

000020f9 <sys_save>:
sys_save():
    20f9:	a1 40 46 00 00       	mov    0x4640,%eax
    20fe:	c1 e0 02             	shl    $0x2,%eax
    2101:	89 c2                	mov    %eax,%edx
    2103:	c1 e2 04             	shl    $0x4,%edx
    2106:	01 d0                	add    %edx,%eax
    2108:	8d 90 40 35 00 00    	lea    0x3540(%eax),%edx
    210e:	8b 44 24 38          	mov    0x38(%esp),%eax
    2112:	89 02                	mov    %eax,(%edx)
    2114:	a1 40 46 00 00       	mov    0x4640,%eax
    2119:	c1 e0 02             	shl    $0x2,%eax
    211c:	89 c2                	mov    %eax,%edx
    211e:	c1 e2 04             	shl    $0x4,%edx
    2121:	01 d0                	add    %edx,%eax
    2123:	8d 90 44 35 00 00    	lea    0x3544(%eax),%edx
    2129:	8b 44 24 34          	mov    0x34(%esp),%eax
    212d:	89 02                	mov    %eax,(%edx)
    212f:	a1 40 46 00 00       	mov    0x4640,%eax
    2134:	c1 e0 02             	shl    $0x2,%eax
    2137:	89 c2                	mov    %eax,%edx
    2139:	c1 e2 04             	shl    $0x4,%edx
    213c:	01 d0                	add    %edx,%eax
    213e:	8d 90 48 35 00 00    	lea    0x3548(%eax),%edx
    2144:	8b 44 24 30          	mov    0x30(%esp),%eax
    2148:	89 02                	mov    %eax,(%edx)
    214a:	a1 40 46 00 00       	mov    0x4640,%eax
    214f:	c1 e0 02             	shl    $0x2,%eax
    2152:	89 c2                	mov    %eax,%edx
    2154:	c1 e2 04             	shl    $0x4,%edx
    2157:	01 d0                	add    %edx,%eax
    2159:	8d 90 4c 35 00 00    	lea    0x354c(%eax),%edx
    215f:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    2163:	89 02                	mov    %eax,(%edx)
    2165:	a1 40 46 00 00       	mov    0x4640,%eax
    216a:	c1 e0 02             	shl    $0x2,%eax
    216d:	89 c2                	mov    %eax,%edx
    216f:	c1 e2 04             	shl    $0x4,%edx
    2172:	01 d0                	add    %edx,%eax
    2174:	8d 90 54 35 00 00    	lea    0x3554(%eax),%edx
    217a:	8b 44 24 24          	mov    0x24(%esp),%eax
    217e:	89 02                	mov    %eax,(%edx)
    2180:	a1 40 46 00 00       	mov    0x4640,%eax
    2185:	c1 e0 02             	shl    $0x2,%eax
    2188:	89 c2                	mov    %eax,%edx
    218a:	c1 e2 04             	shl    $0x4,%edx
    218d:	01 d0                	add    %edx,%eax
    218f:	8d 90 58 35 00 00    	lea    0x3558(%eax),%edx
    2195:	8b 44 24 20          	mov    0x20(%esp),%eax
    2199:	89 02                	mov    %eax,(%edx)
    219b:	a1 40 46 00 00       	mov    0x4640,%eax
    21a0:	c1 e0 02             	shl    $0x2,%eax
    21a3:	89 c2                	mov    %eax,%edx
    21a5:	c1 e2 04             	shl    $0x4,%edx
    21a8:	01 d0                	add    %edx,%eax
    21aa:	8d 90 5c 35 00 00    	lea    0x355c(%eax),%edx
    21b0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    21b4:	89 02                	mov    %eax,(%edx)
    21b6:	a1 40 46 00 00       	mov    0x4640,%eax
    21bb:	c1 e0 02             	shl    $0x2,%eax
    21be:	89 c2                	mov    %eax,%edx
    21c0:	c1 e2 04             	shl    $0x4,%edx
    21c3:	01 d0                	add    %edx,%eax
    21c5:	8d 90 60 35 00 00    	lea    0x3560(%eax),%edx
    21cb:	8b 44 24 18          	mov    0x18(%esp),%eax
    21cf:	89 02                	mov    %eax,(%edx)
    21d1:	a1 40 46 00 00       	mov    0x4640,%eax
    21d6:	c1 e0 02             	shl    $0x2,%eax
    21d9:	89 c2                	mov    %eax,%edx
    21db:	c1 e2 04             	shl    $0x4,%edx
    21de:	01 d0                	add    %edx,%eax
    21e0:	8d 90 64 35 00 00    	lea    0x3564(%eax),%edx
    21e6:	8b 44 24 14          	mov    0x14(%esp),%eax
    21ea:	89 02                	mov    %eax,(%edx)
    21ec:	a1 40 46 00 00       	mov    0x4640,%eax
    21f1:	c1 e0 02             	shl    $0x2,%eax
    21f4:	89 c2                	mov    %eax,%edx
    21f6:	c1 e2 04             	shl    $0x4,%edx
    21f9:	01 d0                	add    %edx,%eax
    21fb:	8d 90 68 35 00 00    	lea    0x3568(%eax),%edx
    2201:	8b 44 24 10          	mov    0x10(%esp),%eax
    2205:	89 02                	mov    %eax,(%edx)
    2207:	a1 40 46 00 00       	mov    0x4640,%eax
    220c:	c1 e0 02             	shl    $0x2,%eax
    220f:	89 c2                	mov    %eax,%edx
    2211:	c1 e2 04             	shl    $0x4,%edx
    2214:	01 d0                	add    %edx,%eax
    2216:	8d 90 6c 35 00 00    	lea    0x356c(%eax),%edx
    221c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2220:	89 02                	mov    %eax,(%edx)
    2222:	a1 40 46 00 00       	mov    0x4640,%eax
    2227:	c1 e0 02             	shl    $0x2,%eax
    222a:	89 c2                	mov    %eax,%edx
    222c:	c1 e2 04             	shl    $0x4,%edx
    222f:	01 d0                	add    %edx,%eax
    2231:	8d 90 70 35 00 00    	lea    0x3570(%eax),%edx
    2237:	8b 44 24 08          	mov    0x8(%esp),%eax
    223b:	89 02                	mov    %eax,(%edx)
    223d:	a1 40 46 00 00       	mov    0x4640,%eax
    2242:	c1 e0 02             	shl    $0x2,%eax
    2245:	89 c2                	mov    %eax,%edx
    2247:	c1 e2 04             	shl    $0x4,%edx
    224a:	01 d0                	add    %edx,%eax
    224c:	8d 90 50 35 00 00    	lea    0x3550(%eax),%edx
    2252:	8b 44 24 04          	mov    0x4(%esp),%eax
    2256:	89 02                	mov    %eax,(%edx)
    2258:	a1 40 46 00 00       	mov    0x4640,%eax
    225d:	c1 e0 02             	shl    $0x2,%eax
    2260:	89 c2                	mov    %eax,%edx
    2262:	c1 e2 04             	shl    $0x4,%edx
    2265:	01 d0                	add    %edx,%eax
    2267:	8d 90 74 35 00 00    	lea    0x3574(%eax),%edx
    226d:	8b 44 24 40          	mov    0x40(%esp),%eax
    2271:	89 02                	mov    %eax,(%edx)
    2273:	90                   	nop
    2274:	c3                   	ret    

00002275 <sys_restart>:
sys_restart():
    2275:	83 ec 10             	sub    $0x10,%esp
    2278:	8b 44 24 14          	mov    0x14(%esp),%eax
    227c:	c1 e0 02             	shl    $0x2,%eax
    227f:	89 c2                	mov    %eax,%edx
    2281:	c1 e2 04             	shl    $0x4,%edx
    2284:	01 d0                	add    %edx,%eax
    2286:	05 64 35 00 00       	add    $0x3564,%eax
    228b:	8b 00                	mov    (%eax),%eax
    228d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    2291:	8b 44 24 14          	mov    0x14(%esp),%eax
    2295:	c1 e0 02             	shl    $0x2,%eax
    2298:	89 c2                	mov    %eax,%edx
    229a:	c1 e2 04             	shl    $0x4,%edx
    229d:	01 d0                	add    %edx,%eax
    229f:	05 50 35 00 00       	add    $0x3550,%eax
    22a4:	8b 00                	mov    (%eax),%eax
    22a6:	89 44 24 08          	mov    %eax,0x8(%esp)
    22aa:	a1 40 46 00 00       	mov    0x4640,%eax
    22af:	c1 e0 02             	shl    $0x2,%eax
    22b2:	89 c2                	mov    %eax,%edx
    22b4:	c1 e2 04             	shl    $0x4,%edx
    22b7:	01 d0                	add    %edx,%eax
    22b9:	05 7c 35 00 00       	add    $0x357c,%eax
    22be:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    22c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    22c8:	8b 54 24 08          	mov    0x8(%esp),%edx
    22cc:	8e d0                	mov    %eax,%ss
    22ce:	89 d4                	mov    %edx,%esp
    22d0:	ea 4e 1b 00 00 08 00 	ljmp   $0x8,$0x1b4e
    22d7:	90                   	nop
    22d8:	83 c4 10             	add    $0x10,%esp
    22db:	c3                   	ret    

000022dc <schedule>:
schedule():
    22dc:	eb 24                	jmp    2302 <schedule+0x26>
    22de:	a1 40 46 00 00       	mov    0x4640,%eax
    22e3:	c1 e0 02             	shl    $0x2,%eax
    22e6:	89 c2                	mov    %eax,%edx
    22e8:	c1 e2 04             	shl    $0x4,%edx
    22eb:	01 d0                	add    %edx,%eax
    22ed:	05 7c 35 00 00       	add    $0x357c,%eax
    22f2:	8b 00                	mov    (%eax),%eax
    22f4:	83 f8 01             	cmp    $0x1,%eax
    22f7:	74 02                	je     22fb <schedule+0x1f>
    22f9:	eb 07                	jmp    2302 <schedule+0x26>
    22fb:	a1 40 46 00 00       	mov    0x4640,%eax
    2300:	eb 26                	jmp    2328 <schedule+0x4c>
    2302:	a1 40 46 00 00       	mov    0x4640,%eax
    2307:	83 c0 01             	add    $0x1,%eax
    230a:	a3 40 46 00 00       	mov    %eax,0x4640
    230f:	a1 40 46 00 00       	mov    0x4640,%eax
    2314:	83 f8 3f             	cmp    $0x3f,%eax
    2317:	7e c5                	jle    22de <schedule+0x2>
    2319:	c7 05 40 46 00 00 00 	movl   $0x0,0x4640
    2320:	00 00 00 
    2323:	b8 00 00 00 00       	mov    $0x0,%eax
    2328:	c3                   	ret    

00002329 <temp_generate_second_process>:
temp_generate_second_process():
    2329:	83 ec 10             	sub    $0x10,%esp
    232c:	c7 05 b8 35 00 00 08 	movl   $0x8,0x35b8
    2333:	00 00 00 
    2336:	c7 05 a8 35 00 00 10 	movl   $0x10,0x35a8
    233d:	00 00 00 
    2340:	c7 44 24 0c bc 03 02 	movl   $0x203bc,0xc(%esp)
    2347:	00 
    2348:	8b 44 24 0c          	mov    0xc(%esp),%eax
    234c:	a3 94 35 00 00       	mov    %eax,0x3594
    2351:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2355:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    235b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    235f:	83 c0 04             	add    $0x4,%eax
    2362:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    2368:	8b 44 24 0c          	mov    0xc(%esp),%eax
    236c:	83 c0 08             	add    $0x8,%eax
    236f:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    2375:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2379:	83 c0 0c             	add    $0xc,%eax
    237c:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    2382:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2386:	83 c0 10             	add    $0x10,%eax
    2389:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    238f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2393:	83 c0 14             	add    $0x14,%eax
    2396:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    239c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23a0:	83 c0 38             	add    $0x38,%eax
    23a3:	ba 3c 15 00 00       	mov    $0x153c,%edx
    23a8:	89 10                	mov    %edx,(%eax)
    23aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23ae:	83 c0 3c             	add    $0x3c,%eax
    23b1:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
    23b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23bb:	83 c0 40             	add    $0x40,%eax
    23be:	c7 00 06 02 00 00    	movl   $0x206,(%eax)
    23c4:	c7 05 c0 35 00 00 01 	movl   $0x1,0x35c0
    23cb:	00 00 00 
    23ce:	c7 05 bc 35 00 00 02 	movl   $0x2,0x35bc
    23d5:	00 00 00 
    23d8:	c7 05 c4 35 00 00 ff 	movl   $0xffffffff,0x35c4
    23df:	ff ff ff 
    23e2:	a1 e8 2f 00 00       	mov    0x2fe8,%eax
    23e7:	83 c0 01             	add    $0x1,%eax
    23ea:	a3 e8 2f 00 00       	mov    %eax,0x2fe8
    23ef:	90                   	nop
    23f0:	83 c4 10             	add    $0x10,%esp
    23f3:	c3                   	ret    

000023f4 <first_empty_pcb>:
first_empty_pcb():
    23f4:	83 ec 10             	sub    $0x10,%esp
    23f7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    23fe:	00 
    23ff:	eb 3f                	jmp    2440 <first_empty_pcb+0x4c>
    2401:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2405:	c1 e0 02             	shl    $0x2,%eax
    2408:	89 c2                	mov    %eax,%edx
    240a:	c1 e2 04             	shl    $0x4,%edx
    240d:	01 d0                	add    %edx,%eax
    240f:	05 7c 35 00 00       	add    $0x357c,%eax
    2414:	8b 00                	mov    (%eax),%eax
    2416:	83 f8 03             	cmp    $0x3,%eax
    2419:	74 1a                	je     2435 <first_empty_pcb+0x41>
    241b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    241f:	c1 e0 02             	shl    $0x2,%eax
    2422:	89 c2                	mov    %eax,%edx
    2424:	c1 e2 04             	shl    $0x4,%edx
    2427:	01 d0                	add    %edx,%eax
    2429:	05 7c 35 00 00       	add    $0x357c,%eax
    242e:	8b 00                	mov    (%eax),%eax
    2430:	83 f8 ff             	cmp    $0xffffffff,%eax
    2433:	75 06                	jne    243b <first_empty_pcb+0x47>
    2435:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2439:	eb 11                	jmp    244c <first_empty_pcb+0x58>
    243b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    2440:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    2445:	7e ba                	jle    2401 <first_empty_pcb+0xd>
    2447:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    244c:	83 c4 10             	add    $0x10,%esp
    244f:	c3                   	ret    

00002450 <copy_process>:
copy_process():
    2450:	83 ec 2c             	sub    $0x2c,%esp
    2453:	8b 44 24 30          	mov    0x30(%esp),%eax
    2457:	c1 e0 02             	shl    $0x2,%eax
    245a:	89 c2                	mov    %eax,%edx
    245c:	c1 e2 04             	shl    $0x4,%edx
    245f:	01 d0                	add    %edx,%eax
    2461:	05 40 35 00 00       	add    $0x3540,%eax
    2466:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    246a:	8b 44 24 34          	mov    0x34(%esp),%eax
    246e:	c1 e0 02             	shl    $0x2,%eax
    2471:	89 c2                	mov    %eax,%edx
    2473:	c1 e2 04             	shl    $0x4,%edx
    2476:	01 d0                	add    %edx,%eax
    2478:	05 40 35 00 00       	add    $0x3540,%eax
    247d:	89 44 24 18          	mov    %eax,0x18(%esp)
    2481:	a1 e8 2f 00 00       	mov    0x2fe8,%eax
    2486:	8d 50 01             	lea    0x1(%eax),%edx
    2489:	89 15 e8 2f 00 00    	mov    %edx,0x2fe8
    248f:	89 44 24 14          	mov    %eax,0x14(%esp)
    2493:	8b 44 24 18          	mov    0x18(%esp),%eax
    2497:	8b 54 24 14          	mov    0x14(%esp),%edx
    249b:	89 10                	mov    %edx,(%eax)
    249d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24a1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    24a7:	8b 44 24 18          	mov    0x18(%esp),%eax
    24ab:	8b 50 04             	mov    0x4(%eax),%edx
    24ae:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24b2:	89 50 04             	mov    %edx,0x4(%eax)
    24b5:	8b 44 24 18          	mov    0x18(%esp),%eax
    24b9:	8b 50 08             	mov    0x8(%eax),%edx
    24bc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24c0:	89 50 08             	mov    %edx,0x8(%eax)
    24c3:	8b 44 24 18          	mov    0x18(%esp),%eax
    24c7:	8b 50 0c             	mov    0xc(%eax),%edx
    24ca:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24ce:	89 50 0c             	mov    %edx,0xc(%eax)
    24d1:	8b 44 24 18          	mov    0x18(%esp),%eax
    24d5:	8b 50 18             	mov    0x18(%eax),%edx
    24d8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24dc:	89 50 18             	mov    %edx,0x18(%eax)
    24df:	8b 44 24 18          	mov    0x18(%esp),%eax
    24e3:	8b 50 1c             	mov    0x1c(%eax),%edx
    24e6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24ea:	89 50 1c             	mov    %edx,0x1c(%eax)
    24ed:	8b 44 24 18          	mov    0x18(%esp),%eax
    24f1:	8b 50 20             	mov    0x20(%eax),%edx
    24f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    24f8:	89 50 20             	mov    %edx,0x20(%eax)
    24fb:	8b 44 24 18          	mov    0x18(%esp),%eax
    24ff:	8b 50 24             	mov    0x24(%eax),%edx
    2502:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2506:	89 50 24             	mov    %edx,0x24(%eax)
    2509:	8b 44 24 18          	mov    0x18(%esp),%eax
    250d:	8b 50 28             	mov    0x28(%eax),%edx
    2510:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2514:	89 50 28             	mov    %edx,0x28(%eax)
    2517:	8b 44 24 18          	mov    0x18(%esp),%eax
    251b:	8b 50 2c             	mov    0x2c(%eax),%edx
    251e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2522:	89 50 2c             	mov    %edx,0x2c(%eax)
    2525:	8b 44 24 18          	mov    0x18(%esp),%eax
    2529:	8b 50 30             	mov    0x30(%eax),%edx
    252c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2530:	89 50 30             	mov    %edx,0x30(%eax)
    2533:	8b 44 24 18          	mov    0x18(%esp),%eax
    2537:	8b 50 34             	mov    0x34(%eax),%edx
    253a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    253e:	89 50 34             	mov    %edx,0x34(%eax)
    2541:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    2546:	74 0e                	je     2556 <copy_process+0x106>
    2548:	8b 44 24 34          	mov    0x34(%esp),%eax
    254c:	83 e8 80             	sub    $0xffffff80,%eax
    254f:	c1 e0 0a             	shl    $0xa,%eax
    2552:	89 c2                	mov    %eax,%edx
    2554:	eb 05                	jmp    255b <copy_process+0x10b>
    2556:	ba b5 04 00 00       	mov    $0x4b5,%edx
    255b:	8b 44 24 18          	mov    0x18(%esp),%eax
    255f:	8b 40 10             	mov    0x10(%eax),%eax
    2562:	29 c2                	sub    %eax,%edx
    2564:	89 d0                	mov    %edx,%eax
    2566:	89 44 24 10          	mov    %eax,0x10(%esp)
    256a:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    256f:	74 0e                	je     257f <copy_process+0x12f>
    2571:	8b 44 24 34          	mov    0x34(%esp),%eax
    2575:	83 e8 80             	sub    $0xffffff80,%eax
    2578:	c1 e0 0a             	shl    $0xa,%eax
    257b:	89 c2                	mov    %eax,%edx
    257d:	eb 05                	jmp    2584 <copy_process+0x134>
    257f:	ba b5 04 00 00       	mov    $0x4b5,%edx
    2584:	8b 44 24 18          	mov    0x18(%esp),%eax
    2588:	8b 40 14             	mov    0x14(%eax),%eax
    258b:	29 c2                	sub    %eax,%edx
    258d:	89 d0                	mov    %edx,%eax
    258f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    2593:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    2598:	74 0e                	je     25a8 <copy_process+0x158>
    259a:	8b 44 24 34          	mov    0x34(%esp),%eax
    259e:	83 e8 80             	sub    $0xffffff80,%eax
    25a1:	c1 e0 0a             	shl    $0xa,%eax
    25a4:	89 c2                	mov    %eax,%edx
    25a6:	eb 05                	jmp    25ad <copy_process+0x15d>
    25a8:	ba b5 04 00 00       	mov    $0x4b5,%edx
    25ad:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    25b2:	74 0c                	je     25c0 <copy_process+0x170>
    25b4:	8b 44 24 30          	mov    0x30(%esp),%eax
    25b8:	83 e8 80             	sub    $0xffffff80,%eax
    25bb:	c1 e0 0a             	shl    $0xa,%eax
    25be:	eb 05                	jmp    25c5 <copy_process+0x175>
    25c0:	b8 b5 04 00 00       	mov    $0x4b5,%eax
    25c5:	83 ec 04             	sub    $0x4,%esp
    25c8:	68 00 04 00 00       	push   $0x400
    25cd:	52                   	push   %edx
    25ce:	50                   	push   %eax
    25cf:	e8 84 01 00 00       	call   2758 <_rev_memcpy>
    25d4:	83 c4 10             	add    $0x10,%esp
    25d7:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    25dc:	74 0e                	je     25ec <copy_process+0x19c>
    25de:	8b 44 24 30          	mov    0x30(%esp),%eax
    25e2:	83 e8 80             	sub    $0xffffff80,%eax
    25e5:	c1 e0 0a             	shl    $0xa,%eax
    25e8:	89 c2                	mov    %eax,%edx
    25ea:	eb 05                	jmp    25f1 <copy_process+0x1a1>
    25ec:	ba b5 04 00 00       	mov    $0x4b5,%edx
    25f1:	8b 44 24 10          	mov    0x10(%esp),%eax
    25f5:	29 c2                	sub    %eax,%edx
    25f7:	89 d0                	mov    %edx,%eax
    25f9:	89 c2                	mov    %eax,%edx
    25fb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    25ff:	89 50 10             	mov    %edx,0x10(%eax)
    2602:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    2607:	74 0e                	je     2617 <copy_process+0x1c7>
    2609:	8b 44 24 30          	mov    0x30(%esp),%eax
    260d:	83 e8 80             	sub    $0xffffff80,%eax
    2610:	c1 e0 0a             	shl    $0xa,%eax
    2613:	89 c2                	mov    %eax,%edx
    2615:	eb 05                	jmp    261c <copy_process+0x1cc>
    2617:	ba b5 04 00 00       	mov    $0x4b5,%edx
    261c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2620:	29 c2                	sub    %eax,%edx
    2622:	89 d0                	mov    %edx,%eax
    2624:	89 c2                	mov    %eax,%edx
    2626:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    262a:	89 50 14             	mov    %edx,0x14(%eax)
    262d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2631:	8b 40 10             	mov    0x10(%eax),%eax
    2634:	89 44 24 08          	mov    %eax,0x8(%esp)
    2638:	8b 44 24 08          	mov    0x8(%esp),%eax
    263c:	8d 50 34             	lea    0x34(%eax),%edx
    263f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2643:	8b 00                	mov    (%eax),%eax
    2645:	89 02                	mov    %eax,(%edx)
    2647:	8b 44 24 08          	mov    0x8(%esp),%eax
    264b:	8d 50 04             	lea    0x4(%eax),%edx
    264e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2652:	8b 40 30             	mov    0x30(%eax),%eax
    2655:	89 02                	mov    %eax,(%edx)
    2657:	8b 44 24 08          	mov    0x8(%esp),%eax
    265b:	8d 50 08             	lea    0x8(%eax),%edx
    265e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2662:	8b 40 2c             	mov    0x2c(%eax),%eax
    2665:	89 02                	mov    %eax,(%edx)
    2667:	8b 44 24 08          	mov    0x8(%esp),%eax
    266b:	8d 50 0c             	lea    0xc(%eax),%edx
    266e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2672:	8b 40 28             	mov    0x28(%eax),%eax
    2675:	89 02                	mov    %eax,(%edx)
    2677:	8b 44 24 08          	mov    0x8(%esp),%eax
    267b:	8d 50 10             	lea    0x10(%eax),%edx
    267e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2682:	8b 40 24             	mov    0x24(%eax),%eax
    2685:	89 02                	mov    %eax,(%edx)
    2687:	8b 44 24 08          	mov    0x8(%esp),%eax
    268b:	8d 50 14             	lea    0x14(%eax),%edx
    268e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2692:	8b 40 20             	mov    0x20(%eax),%eax
    2695:	89 02                	mov    %eax,(%edx)
    2697:	8b 44 24 08          	mov    0x8(%esp),%eax
    269b:	8d 50 18             	lea    0x18(%eax),%edx
    269e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26a2:	8b 40 1c             	mov    0x1c(%eax),%eax
    26a5:	89 02                	mov    %eax,(%edx)
    26a7:	8b 44 24 08          	mov    0x8(%esp),%eax
    26ab:	8d 50 1c             	lea    0x1c(%eax),%edx
    26ae:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26b2:	8b 40 18             	mov    0x18(%eax),%eax
    26b5:	89 02                	mov    %eax,(%edx)
    26b7:	8b 44 24 08          	mov    0x8(%esp),%eax
    26bb:	8d 50 20             	lea    0x20(%eax),%edx
    26be:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26c2:	8b 40 14             	mov    0x14(%eax),%eax
    26c5:	89 02                	mov    %eax,(%edx)
    26c7:	8b 44 24 08          	mov    0x8(%esp),%eax
    26cb:	8d 50 28             	lea    0x28(%eax),%edx
    26ce:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26d2:	8b 40 0c             	mov    0xc(%eax),%eax
    26d5:	89 02                	mov    %eax,(%edx)
    26d7:	8b 44 24 08          	mov    0x8(%esp),%eax
    26db:	8d 50 2c             	lea    0x2c(%eax),%edx
    26de:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26e2:	8b 40 08             	mov    0x8(%eax),%eax
    26e5:	89 02                	mov    %eax,(%edx)
    26e7:	8b 44 24 08          	mov    0x8(%esp),%eax
    26eb:	8d 50 30             	lea    0x30(%eax),%edx
    26ee:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26f2:	8b 40 04             	mov    0x4(%eax),%eax
    26f5:	89 02                	mov    %eax,(%edx)
    26f7:	8b 44 24 08          	mov    0x8(%esp),%eax
    26fb:	8d 50 34             	lea    0x34(%eax),%edx
    26fe:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2702:	8b 00                	mov    (%eax),%eax
    2704:	89 02                	mov    %eax,(%edx)
    2706:	8b 44 24 30          	mov    0x30(%esp),%eax
    270a:	c1 e0 02             	shl    $0x2,%eax
    270d:	89 c2                	mov    %eax,%edx
    270f:	c1 e2 04             	shl    $0x4,%edx
    2712:	01 d0                	add    %edx,%eax
    2714:	05 7c 35 00 00       	add    $0x357c,%eax
    2719:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    271f:	8b 44 24 30          	mov    0x30(%esp),%eax
    2723:	c1 e0 02             	shl    $0x2,%eax
    2726:	89 c2                	mov    %eax,%edx
    2728:	c1 e2 04             	shl    $0x4,%edx
    272b:	01 d0                	add    %edx,%eax
    272d:	8d 90 78 35 00 00    	lea    0x3578(%eax),%edx
    2733:	8b 44 24 14          	mov    0x14(%esp),%eax
    2737:	89 02                	mov    %eax,(%edx)
    2739:	8b 44 24 30          	mov    0x30(%esp),%eax
    273d:	c1 e0 02             	shl    $0x2,%eax
    2740:	89 c2                	mov    %eax,%edx
    2742:	c1 e2 04             	shl    $0x4,%edx
    2745:	01 d0                	add    %edx,%eax
    2747:	8d 90 80 35 00 00    	lea    0x3580(%eax),%edx
    274d:	8b 44 24 34          	mov    0x34(%esp),%eax
    2751:	89 02                	mov    %eax,(%edx)
    2753:	90                   	nop
    2754:	83 c4 2c             	add    $0x2c,%esp
    2757:	c3                   	ret    

00002758 <_rev_memcpy>:
_rev_memcpy():
    2758:	83 ec 10             	sub    $0x10,%esp
    275b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    2762:	00 
    2763:	eb 26                	jmp    278b <_rev_memcpy+0x33>
    2765:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2769:	f7 d0                	not    %eax
    276b:	89 c2                	mov    %eax,%edx
    276d:	8b 44 24 14          	mov    0x14(%esp),%eax
    2771:	01 c2                	add    %eax,%edx
    2773:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2777:	f7 d0                	not    %eax
    2779:	89 c1                	mov    %eax,%ecx
    277b:	8b 44 24 18          	mov    0x18(%esp),%eax
    277f:	01 c8                	add    %ecx,%eax
    2781:	0f b6 00             	movzbl (%eax),%eax
    2784:	88 02                	mov    %al,(%edx)
    2786:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    278b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    278f:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
    2793:	7c d0                	jl     2765 <_rev_memcpy+0xd>
    2795:	90                   	nop
    2796:	83 c4 10             	add    $0x10,%esp
    2799:	c3                   	ret    

0000279a <init_semaphore>:
init_semaphore():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:12
extern PCB_List_T PCB_List[NR_TASKS];
int printks(const char*);

Semaphone semaphone_list[NR_SEMAPHORE];

void init_semaphore() {
    279a:	55                   	push   %ebp
    279b:	89 e5                	mov    %esp,%ebp
    279d:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13
    for (int i = 0; i < NR_SEMAPHORE; ++i) {
    27a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    27a7:	eb 2c                	jmp    27d5 <init_semaphore+0x3b>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:14 (discriminator 3)
        semaphone_list[i].bsize = 0;
    27a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    27ac:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    27b2:	05 e4 47 00 00       	add    $0x47e4,%eax
    27b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:15 (discriminator 3)
        semaphone_list[i].used = 0; // false
    27bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
    27c0:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    27c6:	05 e8 47 00 00       	add    $0x47e8,%eax
    27cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13 (discriminator 3)
int printks(const char*);

Semaphone semaphone_list[NR_SEMAPHORE];

void init_semaphore() {
    for (int i = 0; i < NR_SEMAPHORE; ++i) {
    27d1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13 (discriminator 1)
    27d5:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
    27dc:	7e cb                	jle    27a9 <init_semaphore+0xf>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:17
        semaphone_list[i].bsize = 0;
        semaphone_list[i].used = 0; // false
    }
}
    27de:	90                   	nop
    27df:	c9                   	leave  
    27e0:	c3                   	ret    

000027e1 <getsem>:
getsem():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:19

int getsem(int value) {
    27e1:	55                   	push   %ebp
    27e2:	89 e5                	mov    %esp,%ebp
    27e4:	53                   	push   %ebx
    27e5:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:30
    //         return i;
    //     }
    // }
    // return -1;
    int ret;
    __asm__(
    27e8:	8b 45 08             	mov    0x8(%ebp),%eax
    27eb:	89 c3                	mov    %eax,%ebx
    27ed:	b8 05 00 00 00       	mov    $0x5,%eax
    27f2:	cd 80                	int    $0x80
    27f4:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:36
        "movl $0x05, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(value)
    );
    return ret;
    27f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:37
}
    27fa:	83 c4 04             	add    $0x4,%esp
    27fd:	5b                   	pop    %ebx
    27fe:	5d                   	pop    %ebp
    27ff:	c3                   	ret    

00002800 <freesem>:
freesem():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:39

int freesem(int id) {
    2800:	55                   	push   %ebp
    2801:	89 e5                	mov    %esp,%ebp
    2803:	53                   	push   %ebx
    2804:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:42
    //TODO: should be refine
    int ret;
    __asm__(
    2807:	8b 45 08             	mov    0x8(%ebp),%eax
    280a:	89 c3                	mov    %eax,%ebx
    280c:	b8 06 00 00 00       	mov    $0x6,%eax
    2811:	cd 80                	int    $0x80
    2813:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:48
        "movl $0x06, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    2816:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:49
}
    2819:	83 c4 04             	add    $0x4,%esp
    281c:	5b                   	pop    %ebx
    281d:	5d                   	pop    %ebp
    281e:	c3                   	ret    

0000281f <puti>:
puti():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:50
void puti(int number) {
    281f:	55                   	push   %ebp
    2820:	89 e5                	mov    %esp,%ebp
    2822:	53                   	push   %ebx
    2823:	83 ec 28             	sub    $0x28,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:52
    char buffer[20];
    int length = 0;
    2826:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:53
    int num = number < 0 ? -number : number;
    282d:	8b 45 08             	mov    0x8(%ebp),%eax
    2830:	c1 f8 1f             	sar    $0x1f,%eax
    2833:	89 c2                	mov    %eax,%edx
    2835:	33 55 08             	xor    0x8(%ebp),%edx
    2838:	29 c2                	sub    %eax,%edx
    283a:	89 d0                	mov    %edx,%eax
    283c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:54
    while (num) {
    283f:	eb 50                	jmp    2891 <puti+0x72>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:55
        buffer[length++] = (num % 10) + '0';
    2841:	8b 5d f8             	mov    -0x8(%ebp),%ebx
    2844:	8d 43 01             	lea    0x1(%ebx),%eax
    2847:	89 45 f8             	mov    %eax,-0x8(%ebp)
    284a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    284d:	ba 67 66 66 66       	mov    $0x66666667,%edx
    2852:	89 c8                	mov    %ecx,%eax
    2854:	f7 ea                	imul   %edx
    2856:	c1 fa 02             	sar    $0x2,%edx
    2859:	89 c8                	mov    %ecx,%eax
    285b:	c1 f8 1f             	sar    $0x1f,%eax
    285e:	29 c2                	sub    %eax,%edx
    2860:	89 d0                	mov    %edx,%eax
    2862:	c1 e0 02             	shl    $0x2,%eax
    2865:	01 d0                	add    %edx,%eax
    2867:	01 c0                	add    %eax,%eax
    2869:	29 c1                	sub    %eax,%ecx
    286b:	89 ca                	mov    %ecx,%edx
    286d:	89 d0                	mov    %edx,%eax
    286f:	83 c0 30             	add    $0x30,%eax
    2872:	88 44 1d d4          	mov    %al,-0x2c(%ebp,%ebx,1)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:56
        num /= 10;
    2876:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    2879:	ba 67 66 66 66       	mov    $0x66666667,%edx
    287e:	89 c8                	mov    %ecx,%eax
    2880:	f7 ea                	imul   %edx
    2882:	c1 fa 02             	sar    $0x2,%edx
    2885:	89 c8                	mov    %ecx,%eax
    2887:	c1 f8 1f             	sar    $0x1f,%eax
    288a:	29 c2                	sub    %eax,%edx
    288c:	89 d0                	mov    %edx,%eax
    288e:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:54
}
void puti(int number) {
    char buffer[20];
    int length = 0;
    int num = number < 0 ? -number : number;
    while (num) {
    2891:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
    2895:	75 aa                	jne    2841 <puti+0x22>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:58
        buffer[length++] = (num % 10) + '0';
        num /= 10;
    }
    buffer[length] = 0;
    2897:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    289a:	8b 45 f8             	mov    -0x8(%ebp),%eax
    289d:	01 d0                	add    %edx,%eax
    289f:	c6 00 00             	movb   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:59
    int i = 0;
    28a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:60
    int j = length - 1;
    28a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
    28ac:	83 e8 01             	sub    $0x1,%eax
    28af:	89 45 ec             	mov    %eax,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:61
    while (i < j) {
    28b2:	eb 3d                	jmp    28f1 <puti+0xd2>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:62
        int tmp = buffer[i];
    28b4:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    28b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
    28ba:	01 d0                	add    %edx,%eax
    28bc:	0f b6 00             	movzbl (%eax),%eax
    28bf:	0f be c0             	movsbl %al,%eax
    28c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:63
        buffer[i] = buffer[j];
    28c5:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    28c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
    28cb:	01 d0                	add    %edx,%eax
    28cd:	0f b6 00             	movzbl (%eax),%eax
    28d0:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
    28d3:	8b 55 f0             	mov    -0x10(%ebp),%edx
    28d6:	01 ca                	add    %ecx,%edx
    28d8:	88 02                	mov    %al,(%edx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:64
        buffer[j] = tmp;
    28da:	8b 45 e8             	mov    -0x18(%ebp),%eax
    28dd:	89 c1                	mov    %eax,%ecx
    28df:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    28e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
    28e5:	01 d0                	add    %edx,%eax
    28e7:	88 08                	mov    %cl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:65
        i++;
    28e9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:66
        j--;
    28ed:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:61
        num /= 10;
    }
    buffer[length] = 0;
    int i = 0;
    int j = length - 1;
    while (i < j) {
    28f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    28f4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
    28f7:	7c bb                	jl     28b4 <puti+0x95>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:68
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        i++;
        j--;
    }
    if (number <0) {
    28f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
    28fd:	79 0d                	jns    290c <puti+0xed>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:69
        printks("-");
    28ff:	68 4b 2a 00 00       	push   $0x2a4b
    2904:	e8 bb f0 ff ff       	call   19c4 <printks>
    2909:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:71
    }
    printks(buffer);
    290c:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    290f:	50                   	push   %eax
    2910:	e8 af f0 ff ff       	call   19c4 <printks>
    2915:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:72
    if (number == 0) {
    2918:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
    291c:	75 0d                	jne    292b <puti+0x10c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:73
        printks("0");
    291e:	68 4d 2a 00 00       	push   $0x2a4d
    2923:	e8 9c f0 ff ff       	call   19c4 <printks>
    2928:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:75
    }
}
    292b:	90                   	nop
    292c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    292f:	c9                   	leave  
    2930:	c3                   	ret    

00002931 <p>:
p():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:76
int p(int id) {
    2931:	55                   	push   %ebp
    2932:	89 e5                	mov    %esp,%ebp
    2934:	53                   	push   %ebx
    2935:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:78
    int ret;
    __asm__(
    2938:	8b 45 08             	mov    0x8(%ebp),%eax
    293b:	89 c3                	mov    %eax,%ebx
    293d:	b8 07 00 00 00       	mov    $0x7,%eax
    2942:	cd 80                	int    $0x80
    2944:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:84
        "movl $0x07, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    2947:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:85
}
    294a:	83 c4 04             	add    $0x4,%esp
    294d:	5b                   	pop    %ebx
    294e:	5d                   	pop    %ebp
    294f:	c3                   	ret    

00002950 <v>:
v():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:87

int v(int id) {
    2950:	55                   	push   %ebp
    2951:	89 e5                	mov    %esp,%ebp
    2953:	53                   	push   %ebx
    2954:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:89
    int ret;
    __asm__(
    2957:	8b 45 08             	mov    0x8(%ebp),%eax
    295a:	89 c3                	mov    %eax,%ebx
    295c:	b8 08 00 00 00       	mov    $0x8,%eax
    2961:	cd 80                	int    $0x80
    2963:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:95
        "movl $0x08, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    2966:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:96
    2969:	83 c4 04             	add    $0x4,%esp
    296c:	5b                   	pop    %ebx
    296d:	5d                   	pop    %ebp
    296e:	c3                   	ret    
