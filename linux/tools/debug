
tools/system.elf:     file format elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
startup_32():
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e8                	mov    %eax,%gs
       b:	8e e0                	mov    %eax,%fs
       d:	8e d0                	mov    %eax,%ss
       f:	bc b5 04 00 00       	mov    $0x4b5,%esp
      14:	e8 46 00 00 00       	call   5f <setup_idt>
      19:	e8 39 00 00 00       	call   57 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	8e d0                	mov    %eax,%ss
      2d:	bc b5 04 00 00       	mov    $0x4b5,%esp

00000032 <startup_32.tmp>:
startup_32.tmp():
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f0                	je     32 <startup_32.tmp>

00000042 <after_page_table>:
after_page_table():
      42:	6a 00                	push   $0x0
      44:	6a 00                	push   $0x0
      46:	6a 00                	push   $0x0
      48:	68 53 00 00 00       	push   $0x53
      4d:	68 d5 14 00 00       	push   $0x14d5
      52:	c3                   	ret    

00000053 <L6>:
L6():
      53:	eb fe                	jmp    53 <L6>

00000055 <setup_page>:
setup_page():
      55:	eb fe                	jmp    55 <setup_page>

00000057 <setup_gdt>:
setup_gdt():
      57:	0f 01 15 95 00 00 00 	lgdtl  0x95
      5e:	c3                   	ret    

0000005f <setup_idt>:
setup_idt():
      5f:	8d 15 9b 00 00 00    	lea    0x9b,%edx
      65:	b8 00 00 08 00       	mov    $0x80000,%eax
      6a:	66 89 d0             	mov    %dx,%ax
      6d:	66 ba 00 8e          	mov    $0x8e00,%dx
      71:	8d 3d b5 04 00 00    	lea    0x4b5,%edi
      77:	b9 00 01 00 00       	mov    $0x100,%ecx

0000007c <rp_sidt>:
rp_sidt():
      7c:	89 07                	mov    %eax,(%edi)
      7e:	89 57 04             	mov    %edx,0x4(%edi)
      81:	83 c7 08             	add    $0x8,%edi
      84:	49                   	dec    %ecx
      85:	75 f5                	jne    7c <rp_sidt>
      87:	0f 01 1d 8f 00 00 00 	lidtl  0x8f
      8e:	c3                   	ret    

0000008f <IDT_PTR>:
IDT_PTR():
      8f:	ff 07                	incl   (%edi)
      91:	b5 04                	mov    $0x4,%ch
	...

00000095 <GDT_PTR>:
GDT_PTR():
      95:	ff 07                	incl   (%edi)
      97:	b5 0c                	mov    $0xc,%ch
	...

0000009b <ignore_int>:
ignore_int():
      9b:	50                   	push   %eax
      9c:	51                   	push   %ecx
      9d:	52                   	push   %edx
      9e:	1e                   	push   %ds
      9f:	06                   	push   %es
      a0:	0f a0                	push   %fs
      a2:	b8 10 00 00 00       	mov    $0x10,%eax
      a7:	8e d8                	mov    %eax,%ds
      a9:	8e c0                	mov    %eax,%es
      ab:	8e e0                	mov    %eax,%fs
      ad:	0f a1                	pop    %fs
      af:	07                   	pop    %es
      b0:	1f                   	pop    %ds
      b1:	5a                   	pop    %edx
      b2:	59                   	pop    %ecx
      b3:	58                   	pop    %eax
      b4:	cf                   	iret   

000000b5 <tmp_STACK>:
	...

000004b5 <idt>:
	...

00000cb5 <gdt>:
	...
gdt():
     cbd:	ff 0f                	decl   (%edi)
     cbf:	00 00                	add    %al,(%eax)
     cc1:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
     cc7:	00 00                	add    %al,(%eax)
     cc9:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
     ccf:	00 00                	add    %al,(%eax)
     cd1:	00 00                	add    %al,(%eax)
     cd3:	00 00                	add    %al,(%eax)
     cd5:	ff                   	(bad)  
     cd6:	ff 00                	incl   (%eax)
     cd8:	80 0b 92             	orb    $0x92,(%ebx)
     cdb:	00 00                	add    %al,(%eax)
     cdd:	ff 00                	incl   (%eax)
     cdf:	00 00                	add    %al,(%eax)
     ce1:	09 92 00 00 00 00    	or     %edx,0x0(%edx)
	...

000014d5 <main>:
main():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:24
extern PCB_List_T PCB_List[NR_TASKS];


void puti(int number) ;

void main() {
    14d5:	55                   	push   %ebp
    14d6:	89 e5                	mov    %esp,%ebp
    14d8:	83 ec 20             	sub    $0x20,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:26
    //BochsBreak();
    trap_init();
    14db:	e8 fc 03 00 00       	call   18dc <trap_init>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:27
    init_sys_call();
    14e0:	e8 67 0a 00 00       	call   1f4c <init_sys_call>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:28
    sched_init();
    14e5:	e8 be 0a 00 00       	call   1fa8 <sched_init>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:29
    printks("\nnow in protected mode!\n");
    14ea:	68 81 34 00 00       	push   $0x3481
    14ef:	e8 10 05 00 00       	call   1a04 <printks>
    14f4:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:32
    int errno;
    //BochsBreak();
    __asm__ volatile(
    14f7:	b8 00 00 00 00       	mov    $0x0,%eax
    14fc:	cd 80                	int    $0x80
    14fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:37
        "movl $0x0, %%eax\n"
        "int $0x80\n"
        :"=a"(errno):
    );
    char arr[] = "hello!\n";
    1501:	c7 45 e0 68 65 6c 6c 	movl   $0x6c6c6568,-0x20(%ebp)
    1508:	c7 45 e4 6f 21 0a 00 	movl   $0xa216f,-0x1c(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:39

    sti();
    150f:	fb                   	sti    
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:63
    // p(lock);
    // p(lock);
    // p(lock);
    //int mgnum = 1234;
    //int mgnum2 = 5678;
    int id = fork();
    1510:	fa                   	cli    
    1511:	b8 02 00 00 00       	mov    $0x2,%eax
    1516:	cd 80                	int    $0x80
    1518:	89 45 f8             	mov    %eax,-0x8(%ebp)
    151b:	fb                   	sti    
    151c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    151f:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:64
    int lock = getsem(0);
    1522:	6a 00                	push   $0x0
    1524:	e8 3e 13 00 00       	call   2867 <getsem>
    1529:	83 c4 04             	add    $0x4,%esp
    152c:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:65
    if (id == 1) {
    152f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
    1533:	75 42                	jne    1577 <main+0xa2>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:67
        //testPV();
        int id = fork();
    1535:	fa                   	cli    
    1536:	b8 02 00 00 00       	mov    $0x2,%eax
    153b:	cd 80                	int    $0x80
    153d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    1540:	fb                   	sti    
    1541:	8b 45 ec             	mov    -0x14(%ebp),%eax
    1544:	89 45 e8             	mov    %eax,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:68
        if (id == 1) {
    1547:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
    154b:	75 1a                	jne    1567 <main+0x92>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:69
            p(lock);
    154d:	ff 75 f0             	pushl  -0x10(%ebp)
    1550:	e8 62 14 00 00       	call   29b7 <p>
    1555:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:70
            printks("111\n");
    1558:	68 9a 34 00 00       	push   $0x349a
    155d:	e8 a2 04 00 00       	call   1a04 <printks>
    1562:	83 c4 04             	add    $0x4,%esp
    1565:	eb 10                	jmp    1577 <main+0xa2>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:72
        } else {
            printks("222\n");
    1567:	68 9f 34 00 00       	push   $0x349f
    156c:	e8 93 04 00 00       	call   1a04 <printks>
    1571:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:73
            BochsBreak();
    1574:	66 87 db             	xchg   %bx,%bx
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:77 (discriminator 1)
            //v(lock);
        }
    }
    while(1);
    1577:	eb fe                	jmp    1577 <main+0xa2>

00001579 <test_second_process>:
test_second_process():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:81
    return;
}

void test_second_process() {
    1579:	55                   	push   %ebp
    157a:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:101 (discriminator 1)
    // } else {
    //     wait();
    //     printks("888\n");
    // }
    while(1) {
        printks("bb\n");
    157c:	68 a4 34 00 00       	push   $0x34a4
    1581:	e8 7e 04 00 00       	call   1a04 <printks>
    1586:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:107 (discriminator 1)
        // __asm__(
        //     "movl $0x1, %%eax\n"
        //     "int $0x80\n"
        //     ::
        // );
    }
    1589:	eb f1                	jmp    157c <test_second_process+0x3>

0000158b <next>:
next():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:114
int full_lock;
int empty_lock;
int queue[25];
int beg = 0;
int end = 0;
int next(int i) { return (i + 1) % 20; }
    158b:	55                   	push   %ebp
    158c:	89 e5                	mov    %esp,%ebp
    158e:	8b 45 08             	mov    0x8(%ebp),%eax
    1591:	40                   	inc    %eax
    1592:	b9 14 00 00 00       	mov    $0x14,%ecx
    1597:	99                   	cltd   
    1598:	f7 f9                	idiv   %ecx
    159a:	89 d0                	mov    %edx,%eax
    159c:	5d                   	pop    %ebp
    159d:	c3                   	ret    

0000159e <full>:
full():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:115
int full() {
    159e:	55                   	push   %ebp
    159f:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:116
    return next(end) == beg;
    15a1:	a1 a4 40 00 00       	mov    0x40a4,%eax
    15a6:	50                   	push   %eax
    15a7:	e8 df ff ff ff       	call   158b <next>
    15ac:	83 c4 04             	add    $0x4,%esp
    15af:	89 c2                	mov    %eax,%edx
    15b1:	a1 a0 40 00 00       	mov    0x40a0,%eax
    15b6:	39 c2                	cmp    %eax,%edx
    15b8:	0f 94 c0             	sete   %al
    15bb:	0f b6 c0             	movzbl %al,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:117
}
    15be:	c9                   	leave  
    15bf:	c3                   	ret    

000015c0 <empty>:
empty():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:118
int empty() {
    15c0:	55                   	push   %ebp
    15c1:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:119
    return beg == end;
    15c3:	8b 15 a0 40 00 00    	mov    0x40a0,%edx
    15c9:	a1 a4 40 00 00       	mov    0x40a4,%eax
    15ce:	39 c2                	cmp    %eax,%edx
    15d0:	0f 94 c0             	sete   %al
    15d3:	0f b6 c0             	movzbl %al,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:120
}
    15d6:	5d                   	pop    %ebp
    15d7:	c3                   	ret    

000015d8 <push>:
push():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:121
void push() {
    15d8:	55                   	push   %ebp
    15d9:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:122
    end = next(end);
    15db:	a1 a4 40 00 00       	mov    0x40a4,%eax
    15e0:	50                   	push   %eax
    15e1:	e8 a5 ff ff ff       	call   158b <next>
    15e6:	83 c4 04             	add    $0x4,%esp
    15e9:	a3 a4 40 00 00       	mov    %eax,0x40a4
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:123
}
    15ee:	90                   	nop
    15ef:	c9                   	leave  
    15f0:	c3                   	ret    

000015f1 <pop>:
pop():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:124
void pop() {
    15f1:	55                   	push   %ebp
    15f2:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:125
    beg = next(beg);
    15f4:	a1 a0 40 00 00       	mov    0x40a0,%eax
    15f9:	50                   	push   %eax
    15fa:	e8 8c ff ff ff       	call   158b <next>
    15ff:	83 c4 04             	add    $0x4,%esp
    1602:	a3 a0 40 00 00       	mov    %eax,0x40a0
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:126
}
    1607:	90                   	nop
    1608:	c9                   	leave  
    1609:	c3                   	ret    

0000160a <testPV>:
testPV():
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:129
//#define D 1000000
#define D 1000
void testPV() {
    160a:	55                   	push   %ebp
    160b:	89 e5                	mov    %esp,%ebp
    160d:	83 ec 10             	sub    $0x10,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:130
    full_lock = getsem(15);
    1610:	6a 0f                	push   $0xf
    1612:	e8 50 12 00 00       	call   2867 <getsem>
    1617:	83 c4 04             	add    $0x4,%esp
    161a:	a3 64 56 00 00       	mov    %eax,0x5664
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:131
    empty_lock = getsem(0);
    161f:	6a 00                	push   $0x0
    1621:	e8 41 12 00 00       	call   2867 <getsem>
    1626:	83 c4 04             	add    $0x4,%esp
    1629:	a3 68 56 00 00       	mov    %eax,0x5668
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:132
    puti(full_lock);
    162e:	a1 64 56 00 00       	mov    0x5664,%eax
    1633:	50                   	push   %eax
    1634:	e8 6c 12 00 00       	call   28a5 <puti>
    1639:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:133
    puti(empty_lock);
    163c:	a1 68 56 00 00       	mov    0x5668,%eax
    1641:	50                   	push   %eax
    1642:	e8 5e 12 00 00       	call   28a5 <puti>
    1647:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:134
    beg = end = 0;
    164a:	c7 05 a4 40 00 00 00 	movl   $0x0,0x40a4
    1651:	00 00 00 
    1654:	a1 a4 40 00 00       	mov    0x40a4,%eax
    1659:	a3 a0 40 00 00       	mov    %eax,0x40a0
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:135
    int id = fork();
    165e:	fa                   	cli    
    165f:	b8 02 00 00 00       	mov    $0x2,%eax
    1664:	cd 80                	int    $0x80
    1666:	89 45 f4             	mov    %eax,-0xc(%ebp)
    1669:	fb                   	sti    
    166a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    166d:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:136
    if (id == 1) {
    1670:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
    1674:	75 7b                	jne    16f1 <testPV+0xe7>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139
        //while(1);
        while(1) {
            for (int i = 0; i < D; ++i) {}
    1676:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    167d:	eb 03                	jmp    1682 <testPV+0x78>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139 (discriminator 3)
    167f:	ff 45 fc             	incl   -0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:139 (discriminator 1)
    1682:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%ebp)
    1689:	7e f4                	jle    167f <testPV+0x75>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:140
            p(empty_lock);
    168b:	a1 68 56 00 00       	mov    0x5668,%eax
    1690:	50                   	push   %eax
    1691:	e8 21 13 00 00       	call   29b7 <p>
    1696:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:142

            printks("push ");
    1699:	68 a8 34 00 00       	push   $0x34a8
    169e:	e8 61 03 00 00       	call   1a04 <printks>
    16a3:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:144

            push();
    16a6:	e8 2d ff ff ff       	call   15d8 <push>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:146

            puti(beg);
    16ab:	a1 a0 40 00 00       	mov    0x40a0,%eax
    16b0:	50                   	push   %eax
    16b1:	e8 ef 11 00 00       	call   28a5 <puti>
    16b6:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:147
            printks(" ");
    16b9:	68 ae 34 00 00       	push   $0x34ae
    16be:	e8 41 03 00 00       	call   1a04 <printks>
    16c3:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:148
            puti(end);
    16c6:	a1 a4 40 00 00       	mov    0x40a4,%eax
    16cb:	50                   	push   %eax
    16cc:	e8 d4 11 00 00       	call   28a5 <puti>
    16d1:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:149
            printks("\n");
    16d4:	68 b0 34 00 00       	push   $0x34b0
    16d9:	e8 26 03 00 00       	call   1a04 <printks>
    16de:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:151

            v(full_lock);
    16e1:	a1 64 56 00 00       	mov    0x5664,%eax
    16e6:	50                   	push   %eax
    16e7:	e8 ea 12 00 00       	call   29d6 <v>
    16ec:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:153

        }        
    16ef:	eb 85                	jmp    1676 <testPV+0x6c>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157
    } else {
        //while(1);
        while (1) {
            for (int i = 0; i < D; ++i) {}
    16f1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    16f8:	eb 03                	jmp    16fd <testPV+0xf3>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157 (discriminator 3)
    16fa:	ff 45 f8             	incl   -0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:157 (discriminator 1)
    16fd:	81 7d f8 e7 03 00 00 	cmpl   $0x3e7,-0x8(%ebp)
    1704:	7e f4                	jle    16fa <testPV+0xf0>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:158
            p(full_lock);
    1706:	a1 64 56 00 00       	mov    0x5664,%eax
    170b:	50                   	push   %eax
    170c:	e8 a6 12 00 00       	call   29b7 <p>
    1711:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:159
            v(empty_lock);
    1714:	a1 68 56 00 00       	mov    0x5668,%eax
    1719:	50                   	push   %eax
    171a:	e8 b7 12 00 00       	call   29d6 <v>
    171f:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:161

            pop();
    1722:	e8 ca fe ff ff       	call   15f1 <pop>
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:162
            printks("pop ");
    1727:	68 b2 34 00 00       	push   $0x34b2
    172c:	e8 d3 02 00 00       	call   1a04 <printks>
    1731:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:163
            puti(beg);
    1734:	a1 a0 40 00 00       	mov    0x40a0,%eax
    1739:	50                   	push   %eax
    173a:	e8 66 11 00 00       	call   28a5 <puti>
    173f:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:164
            printks(" ");
    1742:	68 ae 34 00 00       	push   $0x34ae
    1747:	e8 b8 02 00 00       	call   1a04 <printks>
    174c:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:165
            puti(end);
    174f:	a1 a4 40 00 00       	mov    0x40a4,%eax
    1754:	50                   	push   %eax
    1755:	e8 4b 11 00 00       	call   28a5 <puti>
    175a:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:166
            printks("\n");
    175d:	68 b0 34 00 00       	push   $0x34b0
    1762:	e8 9d 02 00 00       	call   1a04 <printks>
    1767:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/init/main.c:167
        }
    176a:	eb 85                	jmp    16f1 <testPV+0xe7>
    176c:	66 90                	xchg   %ax,%ax
    176e:	66 90                	xchg   %ax,%ax

00001770 <divide_error>:
divide_error():
    1770:	68 1d 18 00 00       	push   $0x181d

00001775 <no_error_code>:
no_error_code():
    1775:	87 04 24             	xchg   %eax,(%esp)
    1778:	53                   	push   %ebx
    1779:	51                   	push   %ecx
    177a:	52                   	push   %edx
    177b:	57                   	push   %edi
    177c:	56                   	push   %esi
    177d:	55                   	push   %ebp
    177e:	1e                   	push   %ds
    177f:	06                   	push   %es
    1780:	0f a0                	push   %fs
    1782:	6a 00                	push   $0x0
    1784:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    1788:	52                   	push   %edx
    1789:	ba 10 00 00 00       	mov    $0x10,%edx
    178e:	8e da                	mov    %edx,%ds
    1790:	8e c2                	mov    %edx,%es
    1792:	8e e2                	mov    %edx,%fs
    1794:	ff d0                	call   *%eax
    1796:	83 c4 08             	add    $0x8,%esp
    1799:	0f a1                	pop    %fs
    179b:	07                   	pop    %es
    179c:	1f                   	pop    %ds
    179d:	5d                   	pop    %ebp
    179e:	5e                   	pop    %esi
    179f:	5f                   	pop    %edi
    17a0:	5a                   	pop    %edx
    17a1:	59                   	pop    %ecx
    17a2:	5b                   	pop    %ebx
    17a3:	58                   	pop    %eax
    17a4:	cf                   	iret   

000017a5 <debug>:
debug():
    17a5:	68 40 18 00 00       	push   $0x1840
    17aa:	eb c9                	jmp    1775 <no_error_code>

000017ac <int3>:
int3():
    17ac:	68 40 18 00 00       	push   $0x1840
    17b1:	eb c2                	jmp    1775 <no_error_code>

000017b3 <bounds>:
bounds():
    17b3:	68 46 18 00 00       	push   $0x1846
    17b8:	eb bb                	jmp    1775 <no_error_code>

000017ba <double_fault>:
double_fault():
    17ba:	68 78 18 00 00       	push   $0x1878

000017bf <error_code>:
error_code():
    17bf:	87 44 24 04          	xchg   %eax,0x4(%esp)
    17c3:	87 1c 24             	xchg   %ebx,(%esp)
    17c6:	51                   	push   %ecx
    17c7:	52                   	push   %edx
    17c8:	57                   	push   %edi
    17c9:	56                   	push   %esi
    17ca:	55                   	push   %ebp
    17cb:	1e                   	push   %ds
    17cc:	06                   	push   %es
    17cd:	0f a0                	push   %fs
    17cf:	50                   	push   %eax
    17d0:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    17d4:	50                   	push   %eax
    17d5:	b8 10 00 00 00       	mov    $0x10,%eax
    17da:	8e d8                	mov    %eax,%ds
    17dc:	8e c0                	mov    %eax,%es
    17de:	8e e0                	mov    %eax,%fs
    17e0:	ff d3                	call   *%ebx
    17e2:	83 c4 08             	add    $0x8,%esp
    17e5:	0f a1                	pop    %fs
    17e7:	07                   	pop    %es
    17e8:	1f                   	pop    %ds
    17e9:	5d                   	pop    %ebp
    17ea:	5e                   	pop    %esi
    17eb:	5f                   	pop    %edi
    17ec:	5a                   	pop    %edx
    17ed:	59                   	pop    %ecx
    17ee:	5b                   	pop    %ebx
    17ef:	58                   	pop    %eax
    17f0:	cf                   	iret   

000017f1 <general_protection>:
general_protection():
    17f1:	68 5f 18 00 00       	push   $0x185f
    17f6:	eb c7                	jmp    17bf <error_code>

000017f8 <invalid_TSS>:
invalid_TSS():
    17f8:	68 91 18 00 00       	push   $0x1891
    17fd:	eb c0                	jmp    17bf <error_code>

000017ff <segment_not_present>:
segment_not_present():
    17ff:	68 c3 18 00 00       	push   $0x18c3
    1804:	eb b9                	jmp    17bf <error_code>

00001806 <stack_segment>:
stack_segment():
    1806:	68 aa 18 00 00       	push   $0x18aa
    180b:	eb b2                	jmp    17bf <error_code>

0000180d <die>:
die():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:16
void invalid_TSS();
void segment_not_present();
void stack_segment();
int32_t printks(const char* msg);

static void die(char* str, int32_t esp_ptr, int32_t nr) {
    180d:	55                   	push   %ebp
    180e:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:18
    //TODO: not implement. do not have printk
    printks(str);
    1810:	ff 75 08             	pushl  0x8(%ebp)
    1813:	e8 ec 01 00 00       	call   1a04 <printks>
    1818:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:20 (discriminator 1)
    //do_exit(11);
    while(1) {} //TODO: should call do_exit. but not implement
    181b:	eb fe                	jmp    181b <die+0xe>

0000181d <do_divide_error>:
do_divide_error():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:27
/**
 * NOTICE: int32_t esp is actually as pointer to esp.
 * but we still use type int32_t, according to how linux wrote.
 * its type will be cast when necessary
 */
void do_divide_error(int32_t esp, int32_t error_code) {
    181d:	55                   	push   %ebp
    181e:	89 e5                	mov    %esp,%ebp
    1820:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:28
    int32_t magic = 0x77887788; //magic number to check whether jump is correct
    1823:	c7 45 fc 88 77 88 77 	movl   $0x77887788,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:29
    die("divide error", esp, error_code);
    182a:	ff 75 0c             	pushl  0xc(%ebp)
    182d:	ff 75 08             	pushl  0x8(%ebp)
    1830:	68 b7 34 00 00       	push   $0x34b7
    1835:	e8 d3 ff ff ff       	call   180d <die>
    183a:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:30
}
    183d:	90                   	nop
    183e:	c9                   	leave  
    183f:	c3                   	ret    

00001840 <do_int3>:
do_int3():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:42
    int32_t esi,
    int32_t edi,
    int32_t edx,
    int32_t ecx,
    int32_t ebx,
    int32_t eax) {
    1840:	55                   	push   %ebp
    1841:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:44
        //TODO: empty so far.
}
    1843:	90                   	nop
    1844:	5d                   	pop    %ebp
    1845:	c3                   	ret    

00001846 <do_bounds>:
do_bounds():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:46

void do_bounds(int32_t esp, int32_t error_code) {
    1846:	55                   	push   %ebp
    1847:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:47
    die("bounds", esp, error_code);
    1849:	ff 75 0c             	pushl  0xc(%ebp)
    184c:	ff 75 08             	pushl  0x8(%ebp)
    184f:	68 c4 34 00 00       	push   $0x34c4
    1854:	e8 b4 ff ff ff       	call   180d <die>
    1859:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:48
}
    185c:	90                   	nop
    185d:	c9                   	leave  
    185e:	c3                   	ret    

0000185f <do_general_protection>:
do_general_protection():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:50
     
void do_general_protection(int32_t esp, int32_t error_code) {
    185f:	55                   	push   %ebp
    1860:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:51
    die("general protection", esp, error_code);
    1862:	ff 75 0c             	pushl  0xc(%ebp)
    1865:	ff 75 08             	pushl  0x8(%ebp)
    1868:	68 cb 34 00 00       	push   $0x34cb
    186d:	e8 9b ff ff ff       	call   180d <die>
    1872:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:52
}
    1875:	90                   	nop
    1876:	c9                   	leave  
    1877:	c3                   	ret    

00001878 <do_double_fault>:
do_double_fault():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:54
    
void do_double_fault(int32_t esp, int32_t error_code) {
    1878:	55                   	push   %ebp
    1879:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:55
    die("double fault", esp, error_code);
    187b:	ff 75 0c             	pushl  0xc(%ebp)
    187e:	ff 75 08             	pushl  0x8(%ebp)
    1881:	68 de 34 00 00       	push   $0x34de
    1886:	e8 82 ff ff ff       	call   180d <die>
    188b:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:56
}
    188e:	90                   	nop
    188f:	c9                   	leave  
    1890:	c3                   	ret    

00001891 <do_invalid_TSS>:
do_invalid_TSS():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:57
void do_invalid_TSS(int32_t esp, int32_t error_code) {
    1891:	55                   	push   %ebp
    1892:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:58
    die("invalid TSS", esp, error_code);
    1894:	ff 75 0c             	pushl  0xc(%ebp)
    1897:	ff 75 08             	pushl  0x8(%ebp)
    189a:	68 eb 34 00 00       	push   $0x34eb
    189f:	e8 69 ff ff ff       	call   180d <die>
    18a4:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:59
}
    18a7:	90                   	nop
    18a8:	c9                   	leave  
    18a9:	c3                   	ret    

000018aa <do_stack_segment>:
do_stack_segment():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:60
void do_stack_segment(int32_t esp, int32_t error_code) {
    18aa:	55                   	push   %ebp
    18ab:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:61
    die("stack segment", esp, error_code);
    18ad:	ff 75 0c             	pushl  0xc(%ebp)
    18b0:	ff 75 08             	pushl  0x8(%ebp)
    18b3:	68 f7 34 00 00       	push   $0x34f7
    18b8:	e8 50 ff ff ff       	call   180d <die>
    18bd:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:62
}
    18c0:	90                   	nop
    18c1:	c9                   	leave  
    18c2:	c3                   	ret    

000018c3 <do_segment_not_present>:
do_segment_not_present():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:63
void do_segment_not_present(int32_t esp, int32_t error_code) {
    18c3:	55                   	push   %ebp
    18c4:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:64
    die("segment not present", esp, error_code);
    18c6:	ff 75 0c             	pushl  0xc(%ebp)
    18c9:	ff 75 08             	pushl  0x8(%ebp)
    18cc:	68 05 35 00 00       	push   $0x3505
    18d1:	e8 37 ff ff ff       	call   180d <die>
    18d6:	83 c4 0c             	add    $0xc,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:65
}
    18d9:	90                   	nop
    18da:	c9                   	leave  
    18db:	c3                   	ret    

000018dc <trap_init>:
trap_init():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:66
void trap_init() {
    18dc:	55                   	push   %ebp
    18dd:	89 e5                	mov    %esp,%ebp
    18df:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:67
    set_trap_gate(0, &divide_error);
    18e0:	b9 b5 04 00 00       	mov    $0x4b5,%ecx
    18e5:	bb b9 04 00 00       	mov    $0x4b9,%ebx
    18ea:	ba 70 17 00 00       	mov    $0x1770,%edx
    18ef:	b8 00 00 08 00       	mov    $0x80000,%eax
    18f4:	66 89 d0             	mov    %dx,%ax
    18f7:	66 ba 00 8f          	mov    $0x8f00,%dx
    18fb:	89 01                	mov    %eax,(%ecx)
    18fd:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:68
    set_trap_gate(1, &debug);
    18ff:	b9 bd 04 00 00       	mov    $0x4bd,%ecx
    1904:	bb c1 04 00 00       	mov    $0x4c1,%ebx
    1909:	ba a5 17 00 00       	mov    $0x17a5,%edx
    190e:	b8 00 00 08 00       	mov    $0x80000,%eax
    1913:	66 89 d0             	mov    %dx,%ax
    1916:	66 ba 00 8f          	mov    $0x8f00,%dx
    191a:	89 01                	mov    %eax,(%ecx)
    191c:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:69
    set_trap_gate(3, &int3);
    191e:	b9 cd 04 00 00       	mov    $0x4cd,%ecx
    1923:	bb d1 04 00 00       	mov    $0x4d1,%ebx
    1928:	ba ac 17 00 00       	mov    $0x17ac,%edx
    192d:	b8 00 00 08 00       	mov    $0x80000,%eax
    1932:	66 89 d0             	mov    %dx,%ax
    1935:	66 ba 00 8f          	mov    $0x8f00,%dx
    1939:	89 01                	mov    %eax,(%ecx)
    193b:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:70
    set_trap_gate(5, &bounds);
    193d:	b9 dd 04 00 00       	mov    $0x4dd,%ecx
    1942:	bb e1 04 00 00       	mov    $0x4e1,%ebx
    1947:	ba b3 17 00 00       	mov    $0x17b3,%edx
    194c:	b8 00 00 08 00       	mov    $0x80000,%eax
    1951:	66 89 d0             	mov    %dx,%ax
    1954:	66 ba 00 8f          	mov    $0x8f00,%dx
    1958:	89 01                	mov    %eax,(%ecx)
    195a:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:71
    set_trap_gate(8, &double_fault);
    195c:	b9 f5 04 00 00       	mov    $0x4f5,%ecx
    1961:	bb f9 04 00 00       	mov    $0x4f9,%ebx
    1966:	ba ba 17 00 00       	mov    $0x17ba,%edx
    196b:	b8 00 00 08 00       	mov    $0x80000,%eax
    1970:	66 89 d0             	mov    %dx,%ax
    1973:	66 ba 00 8f          	mov    $0x8f00,%dx
    1977:	89 01                	mov    %eax,(%ecx)
    1979:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:72
    set_trap_gate(10, &invalid_TSS);
    197b:	b9 05 05 00 00       	mov    $0x505,%ecx
    1980:	bb 09 05 00 00       	mov    $0x509,%ebx
    1985:	ba f8 17 00 00       	mov    $0x17f8,%edx
    198a:	b8 00 00 08 00       	mov    $0x80000,%eax
    198f:	66 89 d0             	mov    %dx,%ax
    1992:	66 ba 00 8f          	mov    $0x8f00,%dx
    1996:	89 01                	mov    %eax,(%ecx)
    1998:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:73
    set_trap_gate(11, &segment_not_present);
    199a:	b9 0d 05 00 00       	mov    $0x50d,%ecx
    199f:	bb 11 05 00 00       	mov    $0x511,%ebx
    19a4:	ba ff 17 00 00       	mov    $0x17ff,%edx
    19a9:	b8 00 00 08 00       	mov    $0x80000,%eax
    19ae:	66 89 d0             	mov    %dx,%ax
    19b1:	66 ba 00 8f          	mov    $0x8f00,%dx
    19b5:	89 01                	mov    %eax,(%ecx)
    19b7:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:74
    set_trap_gate(12, &stack_segment);
    19b9:	b9 15 05 00 00       	mov    $0x515,%ecx
    19be:	bb 19 05 00 00       	mov    $0x519,%ebx
    19c3:	ba 06 18 00 00       	mov    $0x1806,%edx
    19c8:	b8 00 00 08 00       	mov    $0x80000,%eax
    19cd:	66 89 d0             	mov    %dx,%ax
    19d0:	66 ba 00 8f          	mov    $0x8f00,%dx
    19d4:	89 01                	mov    %eax,(%ecx)
    19d6:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:75
    set_trap_gate(13, &general_protection);
    19d8:	b9 1d 05 00 00       	mov    $0x51d,%ecx
    19dd:	bb 21 05 00 00       	mov    $0x521,%ebx
    19e2:	ba f1 17 00 00       	mov    $0x17f1,%edx
    19e7:	b8 00 00 08 00       	mov    $0x80000,%eax
    19ec:	66 89 d0             	mov    %dx,%ax
    19ef:	66 ba 00 8f          	mov    $0x8f00,%dx
    19f3:	89 01                	mov    %eax,(%ecx)
    19f5:	89 13                	mov    %edx,(%ebx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/traps.c:76
    19f7:	90                   	nop
    19f8:	5b                   	pop    %ebx
    19f9:	5d                   	pop    %ebp
    19fa:	c3                   	ret    
    19fb:	66 90                	xchg   %ax,%ax
    19fd:	66 90                	xchg   %ax,%ax
    19ff:	90                   	nop

00001a00 <test_write>:
test_write():
    1a00:	1e                   	push   %ds
    1a01:	53                   	push   %ebx
    1a02:	1f                   	pop    %ds
    1a03:	c3                   	ret    

00001a04 <printks>:
printks():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:8
 * NOTICE: it is only use as a workaround.
 */
#include <stdint.h>
void putch(char);
void newline();
int32_t printks(const char* str) {
    1a04:	55                   	push   %ebp
    1a05:	89 e5                	mov    %esp,%ebp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:10
 
   while (*str) {
    1a07:	eb 27                	jmp    1a30 <printks+0x2c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:11
        if (*str == '\n') {
    1a09:	8b 45 08             	mov    0x8(%ebp),%eax
    1a0c:	0f b6 00             	movzbl (%eax),%eax
    1a0f:	3c 0a                	cmp    $0xa,%al
    1a11:	75 07                	jne    1a1a <printks+0x16>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:12
            newline();
    1a13:	e8 7a 00 00 00       	call   1a92 <newline>
    1a18:	eb 12                	jmp    1a2c <printks+0x28>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:15
        }
        else {
            putch(*str);
    1a1a:	8b 45 08             	mov    0x8(%ebp),%eax
    1a1d:	0f b6 00             	movzbl (%eax),%eax
    1a20:	0f be c0             	movsbl %al,%eax
    1a23:	50                   	push   %eax
    1a24:	e8 17 00 00 00       	call   1a40 <putch>
    1a29:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:17
        }
        str++;
    1a2c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:10
#include <stdint.h>
void putch(char);
void newline();
int32_t printks(const char* str) {
 
   while (*str) {
    1a30:	8b 45 08             	mov    0x8(%ebp),%eax
    1a33:	0f b6 00             	movzbl (%eax),%eax
    1a36:	84 c0                	test   %al,%al
    1a38:	75 cf                	jne    1a09 <printks+0x5>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/printk.c:19
        else {
            putch(*str);
        }
        str++;
    }
    1a3a:	90                   	nop
    1a3b:	c9                   	leave  
    1a3c:	c3                   	ret    
    1a3d:	66 90                	xchg   %ax,%ax
    1a3f:	90                   	nop

00001a40 <putch>:
putch():
    1a40:	c8 00 00 00          	enter  $0x0,$0x0
    1a44:	53                   	push   %ebx
    1a45:	1e                   	push   %ds
    1a46:	66 56                	push   %si
    1a48:	b8 28 00 00 00       	mov    $0x28,%eax
    1a4d:	8e d8                	mov    %eax,%ds
    1a4f:	66 8b 15 00 00 00 00 	mov    0x0,%dx

00001a56 <putch.ts>:
putch.ts():
    1a56:	66 89 d1             	mov    %dx,%cx
    1a59:	66 41                	inc    %cx
    1a5b:	80 f9 50             	cmp    $0x50,%cl
    1a5e:	75 04                	jne    1a64 <putch.writeback>
    1a60:	b1 00                	mov    $0x0,%cl
    1a62:	fe c5                	inc    %ch

00001a64 <putch.writeback>:
putch.writeback():
    1a64:	66 89 0d 00 00 00 00 	mov    %cx,0x0
    1a6b:	88 f0                	mov    %dh,%al
    1a6d:	b4 a0                	mov    $0xa0,%ah
    1a6f:	f6 e4                	mul    %ah
    1a71:	30 f6                	xor    %dh,%dh
    1a73:	66 01 d0             	add    %dx,%ax
    1a76:	66 01 d0             	add    %dx,%ax
    1a79:	66 89 c6             	mov    %ax,%si
    1a7c:	b8 20 00 00 00       	mov    $0x20,%eax
    1a81:	8e d8                	mov    %eax,%ds
    1a83:	8a 5d 08             	mov    0x8(%ebp),%bl
    1a86:	b7 07                	mov    $0x7,%bh
    1a88:	66 67 89 1c          	mov    %bx,(%si)
    1a8c:	66 5e                	pop    %si
    1a8e:	1f                   	pop    %ds
    1a8f:	5b                   	pop    %ebx
    1a90:	c9                   	leave  
    1a91:	c3                   	ret    

00001a92 <newline>:
newline():
    1a92:	c8 00 00 00          	enter  $0x0,$0x0
    1a96:	1e                   	push   %ds
    1a97:	b8 28 00 00 00       	mov    $0x28,%eax
    1a9c:	8e d8                	mov    %eax,%ds
    1a9e:	66 8b 15 00 00 00 00 	mov    0x0,%dx
    1aa5:	30 d2                	xor    %dl,%dl
    1aa7:	fe c6                	inc    %dh
    1aa9:	80 fe 18             	cmp    $0x18,%dh
    1aac:	75 02                	jne    1ab0 <newline.writeback>
    1aae:	b6 00                	mov    $0x0,%dh

00001ab0 <newline.writeback>:
newline.writeback():
    1ab0:	66 89 15 00 00 00 00 	mov    %dx,0x0
    1ab7:	1f                   	pop    %ds
    1ab8:	c9                   	leave  
    1ab9:	c3                   	ret    

00001aba <I_AM_HERE>:
I_AM_HERE():
    1aba:	c8 00 00 00          	enter  $0x0,$0x0
    1abe:	53                   	push   %ebx
    1abf:	1e                   	push   %ds
    1ac0:	b8 20 00 00 00       	mov    $0x20,%eax
    1ac5:	8e d8                	mov    %eax,%ds
    1ac7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    1aca:	01 db                	add    %ebx,%ebx
    1acc:	fe 03                	incb   (%ebx)
    1ace:	fe 43 01             	incb   0x1(%ebx)
    1ad1:	1f                   	pop    %ds
    1ad2:	5b                   	pop    %ebx
    1ad3:	c9                   	leave  
    1ad4:	c3                   	ret    
    1ad5:	66 90                	xchg   %ax,%ax
    1ad7:	66 90                	xchg   %ax,%ax
    1ad9:	66 90                	xchg   %ax,%ax
    1adb:	66 90                	xchg   %ax,%ax
    1add:	66 90                	xchg   %ax,%ax
    1adf:	90                   	nop

00001ae0 <bad_sys_call>:
bad_sys_call():
    1ae0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1ae5:	cf                   	iret   

00001ae6 <system_call>:
system_call():
    1ae6:	83 f8 48             	cmp    $0x48,%eax
    1ae9:	77 f5                	ja     1ae0 <bad_sys_call>
    1aeb:	50                   	push   %eax
    1aec:	51                   	push   %ecx
    1aed:	52                   	push   %edx
    1aee:	53                   	push   %ebx
    1aef:	6a 00                	push   $0x0
    1af1:	55                   	push   %ebp
    1af2:	56                   	push   %esi
    1af3:	57                   	push   %edi
    1af4:	06                   	push   %es
    1af5:	16                   	push   %ss
    1af6:	1e                   	push   %ds
    1af7:	0f a0                	push   %fs
    1af9:	0f a8                	push   %gs
    1afb:	83 ec 04             	sub    $0x4,%esp
    1afe:	89 24 24             	mov    %esp,(%esp)
    1b01:	e8 79 06 00 00       	call   217f <sys_save>
    1b06:	8b 44 24 34          	mov    0x34(%esp),%eax
    1b0a:	ba 10 00 00 00       	mov    $0x10,%edx
    1b0f:	8e da                	mov    %edx,%ds
    1b11:	8e c2                	mov    %edx,%es
    1b13:	8e e2                	mov    %edx,%fs
    1b15:	8e ea                	mov    %edx,%gs
    1b17:	8b 5c 24 28          	mov    0x28(%esp),%ebx
    1b1b:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    1b1f:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    1b23:	52                   	push   %edx
    1b24:	51                   	push   %ecx
    1b25:	53                   	push   %ebx
    1b26:	ff 14 85 c0 40 00 00 	call   *0x40c0(,%eax,4)
    1b2d:	83 c4 0c             	add    $0xc,%esp
    1b30:	50                   	push   %eax

00001b31 <system_call.final>:
system_call.final():
    1b31:	58                   	pop    %eax
    1b32:	83 c4 04             	add    $0x4,%esp
    1b35:	0f a9                	pop    %gs
    1b37:	0f a1                	pop    %fs
    1b39:	1f                   	pop    %ds
    1b3a:	17                   	pop    %ss
    1b3b:	07                   	pop    %es
    1b3c:	5f                   	pop    %edi
    1b3d:	5e                   	pop    %esi
    1b3e:	5d                   	pop    %ebp
    1b3f:	83 c4 04             	add    $0x4,%esp
    1b42:	5b                   	pop    %ebx
    1b43:	5a                   	pop    %edx
    1b44:	59                   	pop    %ecx
    1b45:	58                   	pop    %eax
    1b46:	8b 44 24 c4          	mov    -0x3c(%esp),%eax
    1b4a:	cf                   	iret   

00001b4b <timer_interrupt>:
timer_interrupt():
    1b4b:	50                   	push   %eax
    1b4c:	51                   	push   %ecx
    1b4d:	52                   	push   %edx
    1b4e:	53                   	push   %ebx
    1b4f:	6a 00                	push   $0x0
    1b51:	55                   	push   %ebp
    1b52:	56                   	push   %esi
    1b53:	57                   	push   %edi
    1b54:	06                   	push   %es
    1b55:	16                   	push   %ss
    1b56:	1e                   	push   %ds
    1b57:	0f a0                	push   %fs
    1b59:	0f a8                	push   %gs
    1b5b:	b8 10 00 00 00       	mov    $0x10,%eax
    1b60:	8e c0                	mov    %eax,%es
    1b62:	8e d0                	mov    %eax,%ss
    1b64:	8e d8                	mov    %eax,%ds
    1b66:	8e e0                	mov    %eax,%fs
    1b68:	8e e8                	mov    %eax,%gs
    1b6a:	83 ec 04             	sub    $0x4,%esp
    1b6d:	89 24 24             	mov    %esp,(%esp)
    1b70:	e8 0a 06 00 00       	call   217f <sys_save>

00001b75 <return_from_timer_interrupt>:
return_from_timer_interrupt():
    1b75:	6a 14                	push   $0x14
    1b77:	e8 3e ff ff ff       	call   1aba <I_AM_HERE>
    1b7c:	83 c4 04             	add    $0x4,%esp
    1b7f:	b0 20                	mov    $0x20,%al
    1b81:	e6 20                	out    %al,$0x20
    1b83:	e8 da 07 00 00       	call   2362 <schedule>
    1b88:	50                   	push   %eax
    1b89:	e8 6d 07 00 00       	call   22fb <sys_restart>

00001b8e <return_from_sys_restart>:
return_from_sys_restart():
    1b8e:	83 c4 04             	add    $0x4,%esp
    1b91:	0f a9                	pop    %gs
    1b93:	0f a1                	pop    %fs
    1b95:	1f                   	pop    %ds
    1b96:	17                   	pop    %ss
    1b97:	07                   	pop    %es
    1b98:	5f                   	pop    %edi
    1b99:	5e                   	pop    %esi
    1b9a:	5d                   	pop    %ebp
    1b9b:	83 c4 04             	add    $0x4,%esp
    1b9e:	5b                   	pop    %ebx
    1b9f:	5a                   	pop    %edx
    1ba0:	59                   	pop    %ecx
    1ba1:	58                   	pop    %eax
    1ba2:	cf                   	iret   

00001ba3 <test_print>:
test_print():
    1ba3:	83 ec 0c             	sub    $0xc,%esp
    1ba6:	83 ec 0c             	sub    $0xc,%esp
    1ba9:	68 19 35 00 00       	push   $0x3519
    1bae:	e8 51 fe ff ff       	call   1a04 <printks>
    1bb3:	83 c4 10             	add    $0x10,%esp
    1bb6:	83 ec 0c             	sub    $0xc,%esp
    1bb9:	68 2f 35 00 00       	push   $0x352f
    1bbe:	e8 41 fe ff ff       	call   1a04 <printks>
    1bc3:	83 c4 10             	add    $0x10,%esp
    1bc6:	b8 00 00 00 00       	mov    $0x0,%eax
    1bcb:	83 c4 0c             	add    $0xc,%esp
    1bce:	c3                   	ret    

00001bcf <print_hello>:
print_hello():
    1bcf:	83 ec 0c             	sub    $0xc,%esp
    1bd2:	83 ec 0c             	sub    $0xc,%esp
    1bd5:	68 80 3f 00 00       	push   $0x3f80
    1bda:	e8 25 fe ff ff       	call   1a04 <printks>
    1bdf:	83 c4 10             	add    $0x10,%esp
    1be2:	0f b6 05 80 3f 00 00 	movzbl 0x3f80,%eax
    1be9:	83 c0 01             	add    $0x1,%eax
    1bec:	a2 80 3f 00 00       	mov    %al,0x3f80
    1bf1:	b8 00 00 00 00       	mov    $0x0,%eax
    1bf6:	83 c4 0c             	add    $0xc,%esp
    1bf9:	c3                   	ret    

00001bfa <sys_fork>:
sys_fork():
    1bfa:	83 ec 1c             	sub    $0x1c,%esp
    1bfd:	83 ec 0c             	sub    $0xc,%esp
    1c00:	68 45 35 00 00       	push   $0x3545
    1c05:	e8 fa fd ff ff       	call   1a04 <printks>
    1c0a:	83 c4 10             	add    $0x10,%esp
    1c0d:	e8 68 08 00 00       	call   247a <first_empty_pcb>
    1c12:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1c16:	83 7c 24 0c ff       	cmpl   $0xffffffff,0xc(%esp)
    1c1b:	75 07                	jne    1c24 <sys_fork+0x2a>
    1c1d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1c22:	eb 2b                	jmp    1c4f <sys_fork+0x55>
    1c24:	a1 e0 55 00 00       	mov    0x55e0,%eax
    1c29:	83 ec 08             	sub    $0x8,%esp
    1c2c:	50                   	push   %eax
    1c2d:	ff 74 24 18          	pushl  0x18(%esp)
    1c31:	e8 a0 08 00 00       	call   24d6 <copy_process>
    1c36:	83 c4 10             	add    $0x10,%esp
    1c39:	a1 e0 55 00 00       	mov    0x55e0,%eax
    1c3e:	c1 e0 02             	shl    $0x2,%eax
    1c41:	89 c2                	mov    %eax,%edx
    1c43:	c1 e2 04             	shl    $0x4,%edx
    1c46:	01 d0                	add    %edx,%eax
    1c48:	05 e0 44 00 00       	add    $0x44e0,%eax
    1c4d:	8b 00                	mov    (%eax),%eax
    1c4f:	83 c4 1c             	add    $0x1c,%esp
    1c52:	c3                   	ret    

00001c53 <sys_wait>:
sys_wait():
    1c53:	a1 e0 55 00 00       	mov    0x55e0,%eax
    1c58:	c1 e0 02             	shl    $0x2,%eax
    1c5b:	89 c2                	mov    %eax,%edx
    1c5d:	c1 e2 04             	shl    $0x4,%edx
    1c60:	01 d0                	add    %edx,%eax
    1c62:	05 1c 45 00 00       	add    $0x451c,%eax
    1c67:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    1c6d:	ea 75 1b 00 00 08 00 	ljmp   $0x8,$0x1b75
    1c74:	b8 01 00 00 00       	mov    $0x1,%eax
    1c79:	c3                   	ret    

00001c7a <sys_exit>:
sys_exit():
    1c7a:	83 ec 10             	sub    $0x10,%esp
    1c7d:	a1 e0 55 00 00       	mov    0x55e0,%eax
    1c82:	c1 e0 02             	shl    $0x2,%eax
    1c85:	89 c2                	mov    %eax,%edx
    1c87:	c1 e2 04             	shl    $0x4,%edx
    1c8a:	01 d0                	add    %edx,%eax
    1c8c:	05 1c 45 00 00       	add    $0x451c,%eax
    1c91:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    1c97:	a1 e0 55 00 00       	mov    0x55e0,%eax
    1c9c:	c1 e0 02             	shl    $0x2,%eax
    1c9f:	89 c2                	mov    %eax,%edx
    1ca1:	c1 e2 04             	shl    $0x4,%edx
    1ca4:	01 d0                	add    %edx,%eax
    1ca6:	05 20 45 00 00       	add    $0x4520,%eax
    1cab:	8b 00                	mov    (%eax),%eax
    1cad:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1cb1:	83 7c 24 0c ff       	cmpl   $0xffffffff,0xc(%esp)
    1cb6:	74 33                	je     1ceb <sys_exit+0x71>
    1cb8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1cbc:	c1 e0 02             	shl    $0x2,%eax
    1cbf:	89 c2                	mov    %eax,%edx
    1cc1:	c1 e2 04             	shl    $0x4,%edx
    1cc4:	01 d0                	add    %edx,%eax
    1cc6:	05 1c 45 00 00       	add    $0x451c,%eax
    1ccb:	8b 00                	mov    (%eax),%eax
    1ccd:	83 f8 02             	cmp    $0x2,%eax
    1cd0:	75 19                	jne    1ceb <sys_exit+0x71>
    1cd2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1cd6:	c1 e0 02             	shl    $0x2,%eax
    1cd9:	89 c2                	mov    %eax,%edx
    1cdb:	c1 e2 04             	shl    $0x4,%edx
    1cde:	01 d0                	add    %edx,%eax
    1ce0:	05 1c 45 00 00       	add    $0x451c,%eax
    1ce5:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1ceb:	ea 75 1b 00 00 08 00 	ljmp   $0x8,$0x1b75
    1cf2:	b8 01 00 00 00       	mov    $0x1,%eax
    1cf7:	83 c4 10             	add    $0x10,%esp
    1cfa:	c3                   	ret    

00001cfb <do_getsem>:
do_getsem():
    1cfb:	83 ec 10             	sub    $0x10,%esp
    1cfe:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    1d05:	00 
    1d06:	eb 60                	jmp    1d68 <do_getsem+0x6d>
    1d08:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d0c:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d12:	05 88 57 00 00       	add    $0x5788,%eax
    1d17:	8b 00                	mov    (%eax),%eax
    1d19:	85 c0                	test   %eax,%eax
    1d1b:	75 46                	jne    1d63 <do_getsem+0x68>
    1d1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d21:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d27:	05 88 57 00 00       	add    $0x5788,%eax
    1d2c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1d32:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d36:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d3c:	8d 90 80 56 00 00    	lea    0x5680(%eax),%edx
    1d42:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d46:	89 02                	mov    %eax,(%edx)
    1d48:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d4c:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d52:	05 84 57 00 00       	add    $0x5784,%eax
    1d57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    1d5d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1d61:	eb 14                	jmp    1d77 <do_getsem+0x7c>
    1d63:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    1d68:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
    1d6f:	00 
    1d70:	7e 96                	jle    1d08 <do_getsem+0xd>
    1d72:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    1d77:	83 c4 10             	add    $0x10,%esp
    1d7a:	c3                   	ret    

00001d7b <do_free_sem>:
do_free_sem():
    1d7b:	8b 44 24 04          	mov    0x4(%esp),%eax
    1d7f:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1d85:	05 88 57 00 00       	add    $0x5788,%eax
    1d8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    1d90:	b8 00 00 00 00       	mov    $0x0,%eax
    1d95:	c3                   	ret    

00001d96 <do_p>:
do_p():
    1d96:	83 ec 10             	sub    $0x10,%esp
    1d99:	fa                   	cli    
    1d9a:	8b 44 24 14          	mov    0x14(%esp),%eax
    1d9e:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1da4:	05 80 56 00 00       	add    $0x5680,%eax
    1da9:	8b 00                	mov    (%eax),%eax
    1dab:	8d 50 ff             	lea    -0x1(%eax),%edx
    1dae:	8b 44 24 14          	mov    0x14(%esp),%eax
    1db2:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1db8:	05 80 56 00 00       	add    $0x5680,%eax
    1dbd:	89 10                	mov    %edx,(%eax)
    1dbf:	8b 44 24 14          	mov    0x14(%esp),%eax
    1dc3:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1dc9:	05 80 56 00 00       	add    $0x5680,%eax
    1dce:	8b 00                	mov    (%eax),%eax
    1dd0:	85 c0                	test   %eax,%eax
    1dd2:	79 60                	jns    1e34 <do_p+0x9e>
    1dd4:	8b 44 24 14          	mov    0x14(%esp),%eax
    1dd8:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1dde:	05 84 57 00 00       	add    $0x5784,%eax
    1de3:	8b 00                	mov    (%eax),%eax
    1de5:	89 44 24 0c          	mov    %eax,0xc(%esp)
    1de9:	a1 e0 55 00 00       	mov    0x55e0,%eax
    1dee:	8b 54 24 14          	mov    0x14(%esp),%edx
    1df2:	6b ca 43             	imul   $0x43,%edx,%ecx
    1df5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    1df9:	01 ca                	add    %ecx,%edx
    1dfb:	89 04 95 84 56 00 00 	mov    %eax,0x5684(,%edx,4)
    1e02:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e06:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e0c:	05 84 57 00 00       	add    $0x5784,%eax
    1e11:	8b 00                	mov    (%eax),%eax
    1e13:	8d 50 01             	lea    0x1(%eax),%edx
    1e16:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e1a:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e20:	05 84 57 00 00       	add    $0x5784,%eax
    1e25:	89 10                	mov    %edx,(%eax)
    1e27:	fa                   	cli    
    1e28:	b8 03 00 00 00       	mov    $0x3,%eax
    1e2d:	cd 80                	int    $0x80
    1e2f:	89 44 24 08          	mov    %eax,0x8(%esp)
    1e33:	fb                   	sti    
    1e34:	fb                   	sti    
    1e35:	b8 00 00 00 00       	mov    $0x0,%eax
    1e3a:	83 c4 10             	add    $0x10,%esp
    1e3d:	c3                   	ret    

00001e3e <do_v>:
do_v():
    1e3e:	83 ec 10             	sub    $0x10,%esp
    1e41:	fa                   	cli    
    1e42:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e46:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e4c:	05 80 56 00 00       	add    $0x5680,%eax
    1e51:	8b 00                	mov    (%eax),%eax
    1e53:	8d 50 01             	lea    0x1(%eax),%edx
    1e56:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e5a:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e60:	05 80 56 00 00       	add    $0x5680,%eax
    1e65:	89 10                	mov    %edx,(%eax)
    1e67:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e6b:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e71:	05 80 56 00 00       	add    $0x5680,%eax
    1e76:	8b 00                	mov    (%eax),%eax
    1e78:	89 44 24 08          	mov    %eax,0x8(%esp)
    1e7c:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e80:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e86:	05 80 56 00 00       	add    $0x5680,%eax
    1e8b:	8b 00                	mov    (%eax),%eax
    1e8d:	85 c0                	test   %eax,%eax
    1e8f:	0f 8f ad 00 00 00    	jg     1f42 <do_v+0x104>
    1e95:	8b 44 24 14          	mov    0x14(%esp),%eax
    1e99:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1e9f:	05 84 57 00 00       	add    $0x5784,%eax
    1ea4:	8b 00                	mov    (%eax),%eax
    1ea6:	89 44 24 04          	mov    %eax,0x4(%esp)
    1eaa:	8b 44 24 14          	mov    0x14(%esp),%eax
    1eae:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1eb4:	05 84 56 00 00       	add    $0x5684,%eax
    1eb9:	8b 00                	mov    (%eax),%eax
    1ebb:	89 04 24             	mov    %eax,(%esp)
    1ebe:	8b 04 24             	mov    (%esp),%eax
    1ec1:	c1 e0 02             	shl    $0x2,%eax
    1ec4:	89 c2                	mov    %eax,%edx
    1ec6:	c1 e2 04             	shl    $0x4,%edx
    1ec9:	01 d0                	add    %edx,%eax
    1ecb:	05 1c 45 00 00       	add    $0x451c,%eax
    1ed0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    1ed6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    1edd:	00 
    1ede:	eb 30                	jmp    1f10 <do_v+0xd2>
    1ee0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    1ee4:	8d 50 01             	lea    0x1(%eax),%edx
    1ee7:	8b 44 24 14          	mov    0x14(%esp),%eax
    1eeb:	6b c0 43             	imul   $0x43,%eax,%eax
    1eee:	01 d0                	add    %edx,%eax
    1ef0:	8b 04 85 84 56 00 00 	mov    0x5684(,%eax,4),%eax
    1ef7:	8b 54 24 14          	mov    0x14(%esp),%edx
    1efb:	6b ca 43             	imul   $0x43,%edx,%ecx
    1efe:	8b 54 24 0c          	mov    0xc(%esp),%edx
    1f02:	01 ca                	add    %ecx,%edx
    1f04:	89 04 95 84 56 00 00 	mov    %eax,0x5684(,%edx,4)
    1f0b:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    1f10:	8b 44 24 04          	mov    0x4(%esp),%eax
    1f14:	83 e8 01             	sub    $0x1,%eax
    1f17:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    1f1b:	7f c3                	jg     1ee0 <do_v+0xa2>
    1f1d:	8b 44 24 14          	mov    0x14(%esp),%eax
    1f21:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1f27:	05 84 57 00 00       	add    $0x5784,%eax
    1f2c:	8b 00                	mov    (%eax),%eax
    1f2e:	8d 50 ff             	lea    -0x1(%eax),%edx
    1f31:	8b 44 24 14          	mov    0x14(%esp),%eax
    1f35:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    1f3b:	05 84 57 00 00       	add    $0x5784,%eax
    1f40:	89 10                	mov    %edx,(%eax)
    1f42:	fb                   	sti    
    1f43:	b8 00 00 00 00       	mov    $0x0,%eax
    1f48:	83 c4 10             	add    $0x10,%esp
    1f4b:	c3                   	ret    

00001f4c <init_sys_call>:
init_sys_call():
    1f4c:	c7 05 c0 40 00 00 a3 	movl   $0x1ba3,0x40c0
    1f53:	1b 00 00 
    1f56:	c7 05 c4 40 00 00 cf 	movl   $0x1bcf,0x40c4
    1f5d:	1b 00 00 
    1f60:	c7 05 c8 40 00 00 fa 	movl   $0x1bfa,0x40c8
    1f67:	1b 00 00 
    1f6a:	c7 05 cc 40 00 00 53 	movl   $0x1c53,0x40cc
    1f71:	1c 00 00 
    1f74:	c7 05 d0 40 00 00 7a 	movl   $0x1c7a,0x40d0
    1f7b:	1c 00 00 
    1f7e:	c7 05 d4 40 00 00 fb 	movl   $0x1cfb,0x40d4
    1f85:	1c 00 00 
    1f88:	c7 05 d8 40 00 00 7b 	movl   $0x1d7b,0x40d8
    1f8f:	1d 00 00 
    1f92:	c7 05 dc 40 00 00 96 	movl   $0x1d96,0x40dc
    1f99:	1d 00 00 
    1f9c:	c7 05 e0 40 00 00 3e 	movl   $0x1e3e,0x40e0
    1fa3:	1e 00 00 
    1fa6:	90                   	nop
    1fa7:	c3                   	ret    

00001fa8 <sched_init>:
sched_init():
    1fa8:	55                   	push   %ebp
    1fa9:	57                   	push   %edi
    1faa:	56                   	push   %esi
    1fab:	53                   	push   %ebx
    1fac:	83 ec 1c             	sub    $0x1c,%esp
    1faf:	c7 05 88 3f 00 00 02 	movl   $0x2,0x3f88
    1fb6:	00 00 00 
    1fb9:	c7 05 e0 55 00 00 00 	movl   $0x0,0x55e0
    1fc0:	00 00 00 
    1fc3:	b8 a0 3f 00 00       	mov    $0x3fa0,%eax
    1fc8:	ba e5 0c 00 00       	mov    $0xce5,%edx
    1fcd:	b9 e7 0c 00 00       	mov    $0xce7,%ecx
    1fd2:	bb e9 0c 00 00       	mov    $0xce9,%ebx
    1fd7:	be ea 0c 00 00       	mov    $0xcea,%esi
    1fdc:	bf eb 0c 00 00       	mov    $0xceb,%edi
    1fe1:	bd ec 0c 00 00       	mov    $0xcec,%ebp
    1fe6:	66 c7 02 68 00       	movw   $0x68,(%edx)
    1feb:	66 89 01             	mov    %ax,(%ecx)
    1fee:	c1 c8 10             	ror    $0x10,%eax
    1ff1:	88 03                	mov    %al,(%ebx)
    1ff3:	c6 06 89             	movb   $0x89,(%esi)
    1ff6:	c6 07 00             	movb   $0x0,(%edi)
    1ff9:	88 65 00             	mov    %ah,0x0(%ebp)
    1ffc:	c1 c8 10             	ror    $0x10,%eax
    1fff:	b8 74 40 00 00       	mov    $0x4074,%eax
    2004:	ba ed 0c 00 00       	mov    $0xced,%edx
    2009:	b9 ef 0c 00 00       	mov    $0xcef,%ecx
    200e:	bb f1 0c 00 00       	mov    $0xcf1,%ebx
    2013:	be f2 0c 00 00       	mov    $0xcf2,%esi
    2018:	bf f3 0c 00 00       	mov    $0xcf3,%edi
    201d:	bd f4 0c 00 00       	mov    $0xcf4,%ebp
    2022:	66 c7 02 68 00       	movw   $0x68,(%edx)
    2027:	66 89 01             	mov    %ax,(%ecx)
    202a:	c1 c8 10             	ror    $0x10,%eax
    202d:	88 03                	mov    %al,(%ebx)
    202f:	c6 06 82             	movb   $0x82,(%esi)
    2032:	c6 07 00             	movb   $0x0,(%edi)
    2035:	88 65 00             	mov    %ah,0x0(%ebp)
    2038:	c1 c8 10             	ror    $0x10,%eax
    203b:	c7 44 24 08 f5 0c 00 	movl   $0xcf5,0x8(%esp)
    2042:	00 
    2043:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    204a:	00 
    204b:	eb 58                	jmp    20a5 <sched_init+0xfd>
    204d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2051:	c1 e0 02             	shl    $0x2,%eax
    2054:	89 c2                	mov    %eax,%edx
    2056:	c1 e2 04             	shl    $0x4,%edx
    2059:	01 d0                	add    %edx,%eax
    205b:	05 1c 45 00 00       	add    $0x451c,%eax
    2060:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
    2066:	8b 44 24 08          	mov    0x8(%esp),%eax
    206a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    2071:	8b 44 24 08          	mov    0x8(%esp),%eax
    2075:	8b 50 04             	mov    0x4(%eax),%edx
    2078:	8b 44 24 08          	mov    0x8(%esp),%eax
    207c:	89 10                	mov    %edx,(%eax)
    207e:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
    2083:	8b 44 24 08          	mov    0x8(%esp),%eax
    2087:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    208e:	8b 44 24 08          	mov    0x8(%esp),%eax
    2092:	8b 50 04             	mov    0x4(%eax),%edx
    2095:	8b 44 24 08          	mov    0x8(%esp),%eax
    2099:	89 10                	mov    %edx,(%eax)
    209b:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
    20a0:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    20a5:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    20aa:	7e a1                	jle    204d <sched_init+0xa5>
    20ac:	9c                   	pushf  
    20ad:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    20b4:	9d                   	popf   
    20b5:	b8 30 00 00 00       	mov    $0x30,%eax
    20ba:	0f 00 d8             	ltr    %ax
    20bd:	b8 38 00 00 00       	mov    $0x38,%eax
    20c2:	0f 00 d0             	lldt   %ax
    20c5:	b8 36 00 00 00       	mov    $0x36,%eax
    20ca:	ba 43 00 00 00       	mov    $0x43,%edx
    20cf:	ee                   	out    %al,(%dx)
    20d0:	eb 00                	jmp    20d2 <sched_init+0x12a>
    20d2:	eb 00                	jmp    20d4 <sched_init+0x12c>
    20d4:	b8 9b 00 00 00       	mov    $0x9b,%eax
    20d9:	ba 40 00 00 00       	mov    $0x40,%edx
    20de:	ee                   	out    %al,(%dx)
    20df:	eb 00                	jmp    20e1 <sched_init+0x139>
    20e1:	eb 00                	jmp    20e3 <sched_init+0x13b>
    20e3:	b8 2e 00 00 00       	mov    $0x2e,%eax
    20e8:	ba 40 00 00 00       	mov    $0x40,%edx
    20ed:	ee                   	out    %al,(%dx)
    20ee:	eb 00                	jmp    20f0 <sched_init+0x148>
    20f0:	eb 00                	jmp    20f2 <sched_init+0x14a>
    20f2:	b9 b5 05 00 00       	mov    $0x5b5,%ecx
    20f7:	bb b9 05 00 00       	mov    $0x5b9,%ebx
    20fc:	ba 4b 1b 00 00       	mov    $0x1b4b,%edx
    2101:	b8 00 00 08 00       	mov    $0x80000,%eax
    2106:	66 89 d0             	mov    %dx,%ax
    2109:	66 ba 00 8e          	mov    $0x8e00,%dx
    210d:	89 01                	mov    %eax,(%ecx)
    210f:	89 13                	mov    %edx,(%ebx)
    2111:	b8 21 00 00 00       	mov    $0x21,%eax
    2116:	89 c2                	mov    %eax,%edx
    2118:	ec                   	in     (%dx),%al
    2119:	eb 00                	jmp    211b <sched_init+0x173>
    211b:	eb 00                	jmp    211d <sched_init+0x175>
    211d:	88 44 24 07          	mov    %al,0x7(%esp)
    2121:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    2126:	0f b6 c0             	movzbl %al,%eax
    2129:	83 e0 fe             	and    $0xfffffffe,%eax
    212c:	ba 21 00 00 00       	mov    $0x21,%edx
    2131:	ee                   	out    %al,(%dx)
    2132:	b9 b5 08 00 00       	mov    $0x8b5,%ecx
    2137:	bb b9 08 00 00       	mov    $0x8b9,%ebx
    213c:	ba e6 1a 00 00       	mov    $0x1ae6,%edx
    2141:	b8 00 00 08 00       	mov    $0x80000,%eax
    2146:	66 89 d0             	mov    %dx,%ax
    2149:	66 ba 00 ef          	mov    $0xef00,%dx
    214d:	89 01                	mov    %eax,(%ecx)
    214f:	89 13                	mov    %edx,(%ebx)
    2151:	e8 09 00 00 00       	call   215f <init_first_process>
    2156:	90                   	nop
    2157:	83 c4 1c             	add    $0x1c,%esp
    215a:	5b                   	pop    %ebx
    215b:	5e                   	pop    %esi
    215c:	5f                   	pop    %edi
    215d:	5d                   	pop    %ebp
    215e:	c3                   	ret    

0000215f <init_first_process>:
init_first_process():
    215f:	c7 05 18 45 00 00 00 	movl   $0x0,0x4518
    2166:	00 00 00 
    2169:	c7 05 1c 45 00 00 00 	movl   $0x0,0x451c
    2170:	00 00 00 
    2173:	c7 05 20 45 00 00 ff 	movl   $0xffffffff,0x4520
    217a:	ff ff ff 
    217d:	90                   	nop
    217e:	c3                   	ret    

0000217f <sys_save>:
sys_save():
    217f:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2184:	c1 e0 02             	shl    $0x2,%eax
    2187:	89 c2                	mov    %eax,%edx
    2189:	c1 e2 04             	shl    $0x4,%edx
    218c:	01 d0                	add    %edx,%eax
    218e:	8d 90 e0 44 00 00    	lea    0x44e0(%eax),%edx
    2194:	8b 44 24 38          	mov    0x38(%esp),%eax
    2198:	89 02                	mov    %eax,(%edx)
    219a:	a1 e0 55 00 00       	mov    0x55e0,%eax
    219f:	c1 e0 02             	shl    $0x2,%eax
    21a2:	89 c2                	mov    %eax,%edx
    21a4:	c1 e2 04             	shl    $0x4,%edx
    21a7:	01 d0                	add    %edx,%eax
    21a9:	8d 90 e4 44 00 00    	lea    0x44e4(%eax),%edx
    21af:	8b 44 24 34          	mov    0x34(%esp),%eax
    21b3:	89 02                	mov    %eax,(%edx)
    21b5:	a1 e0 55 00 00       	mov    0x55e0,%eax
    21ba:	c1 e0 02             	shl    $0x2,%eax
    21bd:	89 c2                	mov    %eax,%edx
    21bf:	c1 e2 04             	shl    $0x4,%edx
    21c2:	01 d0                	add    %edx,%eax
    21c4:	8d 90 e8 44 00 00    	lea    0x44e8(%eax),%edx
    21ca:	8b 44 24 30          	mov    0x30(%esp),%eax
    21ce:	89 02                	mov    %eax,(%edx)
    21d0:	a1 e0 55 00 00       	mov    0x55e0,%eax
    21d5:	c1 e0 02             	shl    $0x2,%eax
    21d8:	89 c2                	mov    %eax,%edx
    21da:	c1 e2 04             	shl    $0x4,%edx
    21dd:	01 d0                	add    %edx,%eax
    21df:	8d 90 ec 44 00 00    	lea    0x44ec(%eax),%edx
    21e5:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    21e9:	89 02                	mov    %eax,(%edx)
    21eb:	a1 e0 55 00 00       	mov    0x55e0,%eax
    21f0:	c1 e0 02             	shl    $0x2,%eax
    21f3:	89 c2                	mov    %eax,%edx
    21f5:	c1 e2 04             	shl    $0x4,%edx
    21f8:	01 d0                	add    %edx,%eax
    21fa:	8d 90 f4 44 00 00    	lea    0x44f4(%eax),%edx
    2200:	8b 44 24 24          	mov    0x24(%esp),%eax
    2204:	89 02                	mov    %eax,(%edx)
    2206:	a1 e0 55 00 00       	mov    0x55e0,%eax
    220b:	c1 e0 02             	shl    $0x2,%eax
    220e:	89 c2                	mov    %eax,%edx
    2210:	c1 e2 04             	shl    $0x4,%edx
    2213:	01 d0                	add    %edx,%eax
    2215:	8d 90 f8 44 00 00    	lea    0x44f8(%eax),%edx
    221b:	8b 44 24 20          	mov    0x20(%esp),%eax
    221f:	89 02                	mov    %eax,(%edx)
    2221:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2226:	c1 e0 02             	shl    $0x2,%eax
    2229:	89 c2                	mov    %eax,%edx
    222b:	c1 e2 04             	shl    $0x4,%edx
    222e:	01 d0                	add    %edx,%eax
    2230:	8d 90 fc 44 00 00    	lea    0x44fc(%eax),%edx
    2236:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    223a:	89 02                	mov    %eax,(%edx)
    223c:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2241:	c1 e0 02             	shl    $0x2,%eax
    2244:	89 c2                	mov    %eax,%edx
    2246:	c1 e2 04             	shl    $0x4,%edx
    2249:	01 d0                	add    %edx,%eax
    224b:	8d 90 00 45 00 00    	lea    0x4500(%eax),%edx
    2251:	8b 44 24 18          	mov    0x18(%esp),%eax
    2255:	89 02                	mov    %eax,(%edx)
    2257:	a1 e0 55 00 00       	mov    0x55e0,%eax
    225c:	c1 e0 02             	shl    $0x2,%eax
    225f:	89 c2                	mov    %eax,%edx
    2261:	c1 e2 04             	shl    $0x4,%edx
    2264:	01 d0                	add    %edx,%eax
    2266:	8d 90 04 45 00 00    	lea    0x4504(%eax),%edx
    226c:	8b 44 24 14          	mov    0x14(%esp),%eax
    2270:	89 02                	mov    %eax,(%edx)
    2272:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2277:	c1 e0 02             	shl    $0x2,%eax
    227a:	89 c2                	mov    %eax,%edx
    227c:	c1 e2 04             	shl    $0x4,%edx
    227f:	01 d0                	add    %edx,%eax
    2281:	8d 90 08 45 00 00    	lea    0x4508(%eax),%edx
    2287:	8b 44 24 10          	mov    0x10(%esp),%eax
    228b:	89 02                	mov    %eax,(%edx)
    228d:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2292:	c1 e0 02             	shl    $0x2,%eax
    2295:	89 c2                	mov    %eax,%edx
    2297:	c1 e2 04             	shl    $0x4,%edx
    229a:	01 d0                	add    %edx,%eax
    229c:	8d 90 0c 45 00 00    	lea    0x450c(%eax),%edx
    22a2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    22a6:	89 02                	mov    %eax,(%edx)
    22a8:	a1 e0 55 00 00       	mov    0x55e0,%eax
    22ad:	c1 e0 02             	shl    $0x2,%eax
    22b0:	89 c2                	mov    %eax,%edx
    22b2:	c1 e2 04             	shl    $0x4,%edx
    22b5:	01 d0                	add    %edx,%eax
    22b7:	8d 90 10 45 00 00    	lea    0x4510(%eax),%edx
    22bd:	8b 44 24 08          	mov    0x8(%esp),%eax
    22c1:	89 02                	mov    %eax,(%edx)
    22c3:	a1 e0 55 00 00       	mov    0x55e0,%eax
    22c8:	c1 e0 02             	shl    $0x2,%eax
    22cb:	89 c2                	mov    %eax,%edx
    22cd:	c1 e2 04             	shl    $0x4,%edx
    22d0:	01 d0                	add    %edx,%eax
    22d2:	8d 90 f0 44 00 00    	lea    0x44f0(%eax),%edx
    22d8:	8b 44 24 04          	mov    0x4(%esp),%eax
    22dc:	89 02                	mov    %eax,(%edx)
    22de:	a1 e0 55 00 00       	mov    0x55e0,%eax
    22e3:	c1 e0 02             	shl    $0x2,%eax
    22e6:	89 c2                	mov    %eax,%edx
    22e8:	c1 e2 04             	shl    $0x4,%edx
    22eb:	01 d0                	add    %edx,%eax
    22ed:	8d 90 14 45 00 00    	lea    0x4514(%eax),%edx
    22f3:	8b 44 24 40          	mov    0x40(%esp),%eax
    22f7:	89 02                	mov    %eax,(%edx)
    22f9:	90                   	nop
    22fa:	c3                   	ret    

000022fb <sys_restart>:
sys_restart():
    22fb:	83 ec 10             	sub    $0x10,%esp
    22fe:	8b 44 24 14          	mov    0x14(%esp),%eax
    2302:	c1 e0 02             	shl    $0x2,%eax
    2305:	89 c2                	mov    %eax,%edx
    2307:	c1 e2 04             	shl    $0x4,%edx
    230a:	01 d0                	add    %edx,%eax
    230c:	05 04 45 00 00       	add    $0x4504,%eax
    2311:	8b 00                	mov    (%eax),%eax
    2313:	89 44 24 0c          	mov    %eax,0xc(%esp)
    2317:	8b 44 24 14          	mov    0x14(%esp),%eax
    231b:	c1 e0 02             	shl    $0x2,%eax
    231e:	89 c2                	mov    %eax,%edx
    2320:	c1 e2 04             	shl    $0x4,%edx
    2323:	01 d0                	add    %edx,%eax
    2325:	05 f0 44 00 00       	add    $0x44f0,%eax
    232a:	8b 00                	mov    (%eax),%eax
    232c:	89 44 24 08          	mov    %eax,0x8(%esp)
    2330:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2335:	c1 e0 02             	shl    $0x2,%eax
    2338:	89 c2                	mov    %eax,%edx
    233a:	c1 e2 04             	shl    $0x4,%edx
    233d:	01 d0                	add    %edx,%eax
    233f:	05 1c 45 00 00       	add    $0x451c,%eax
    2344:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    234a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    234e:	8b 54 24 08          	mov    0x8(%esp),%edx
    2352:	8e d0                	mov    %eax,%ss
    2354:	89 d4                	mov    %edx,%esp
    2356:	ea 8e 1b 00 00 08 00 	ljmp   $0x8,$0x1b8e
    235d:	90                   	nop
    235e:	83 c4 10             	add    $0x10,%esp
    2361:	c3                   	ret    

00002362 <schedule>:
schedule():
    2362:	eb 24                	jmp    2388 <schedule+0x26>
    2364:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2369:	c1 e0 02             	shl    $0x2,%eax
    236c:	89 c2                	mov    %eax,%edx
    236e:	c1 e2 04             	shl    $0x4,%edx
    2371:	01 d0                	add    %edx,%eax
    2373:	05 1c 45 00 00       	add    $0x451c,%eax
    2378:	8b 00                	mov    (%eax),%eax
    237a:	83 f8 01             	cmp    $0x1,%eax
    237d:	74 02                	je     2381 <schedule+0x1f>
    237f:	eb 07                	jmp    2388 <schedule+0x26>
    2381:	a1 e0 55 00 00       	mov    0x55e0,%eax
    2386:	eb 26                	jmp    23ae <schedule+0x4c>
    2388:	a1 e0 55 00 00       	mov    0x55e0,%eax
    238d:	83 c0 01             	add    $0x1,%eax
    2390:	a3 e0 55 00 00       	mov    %eax,0x55e0
    2395:	a1 e0 55 00 00       	mov    0x55e0,%eax
    239a:	83 f8 3f             	cmp    $0x3f,%eax
    239d:	7e c5                	jle    2364 <schedule+0x2>
    239f:	c7 05 e0 55 00 00 00 	movl   $0x0,0x55e0
    23a6:	00 00 00 
    23a9:	b8 00 00 00 00       	mov    $0x0,%eax
    23ae:	c3                   	ret    

000023af <temp_generate_second_process>:
temp_generate_second_process():
    23af:	83 ec 10             	sub    $0x10,%esp
    23b2:	c7 05 58 45 00 00 08 	movl   $0x8,0x4558
    23b9:	00 00 00 
    23bc:	c7 05 48 45 00 00 10 	movl   $0x10,0x4548
    23c3:	00 00 00 
    23c6:	c7 44 24 0c bc 03 02 	movl   $0x203bc,0xc(%esp)
    23cd:	00 
    23ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23d2:	a3 34 45 00 00       	mov    %eax,0x4534
    23d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23db:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    23e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23e5:	83 c0 04             	add    $0x4,%eax
    23e8:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23ee:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23f2:	83 c0 08             	add    $0x8,%eax
    23f5:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    23fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    23ff:	83 c0 0c             	add    $0xc,%eax
    2402:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    2408:	8b 44 24 0c          	mov    0xc(%esp),%eax
    240c:	83 c0 10             	add    $0x10,%eax
    240f:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    2415:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2419:	83 c0 14             	add    $0x14,%eax
    241c:	c7 00 10 00 00 00    	movl   $0x10,(%eax)
    2422:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2426:	83 c0 38             	add    $0x38,%eax
    2429:	ba 79 15 00 00       	mov    $0x1579,%edx
    242e:	89 10                	mov    %edx,(%eax)
    2430:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2434:	83 c0 3c             	add    $0x3c,%eax
    2437:	c7 00 08 00 00 00    	movl   $0x8,(%eax)
    243d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2441:	83 c0 40             	add    $0x40,%eax
    2444:	c7 00 06 02 00 00    	movl   $0x206,(%eax)
    244a:	c7 05 60 45 00 00 01 	movl   $0x1,0x4560
    2451:	00 00 00 
    2454:	c7 05 5c 45 00 00 02 	movl   $0x2,0x455c
    245b:	00 00 00 
    245e:	c7 05 64 45 00 00 ff 	movl   $0xffffffff,0x4564
    2465:	ff ff ff 
    2468:	a1 88 3f 00 00       	mov    0x3f88,%eax
    246d:	83 c0 01             	add    $0x1,%eax
    2470:	a3 88 3f 00 00       	mov    %eax,0x3f88
    2475:	90                   	nop
    2476:	83 c4 10             	add    $0x10,%esp
    2479:	c3                   	ret    

0000247a <first_empty_pcb>:
first_empty_pcb():
    247a:	83 ec 10             	sub    $0x10,%esp
    247d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    2484:	00 
    2485:	eb 3f                	jmp    24c6 <first_empty_pcb+0x4c>
    2487:	8b 44 24 0c          	mov    0xc(%esp),%eax
    248b:	c1 e0 02             	shl    $0x2,%eax
    248e:	89 c2                	mov    %eax,%edx
    2490:	c1 e2 04             	shl    $0x4,%edx
    2493:	01 d0                	add    %edx,%eax
    2495:	05 1c 45 00 00       	add    $0x451c,%eax
    249a:	8b 00                	mov    (%eax),%eax
    249c:	83 f8 03             	cmp    $0x3,%eax
    249f:	74 1a                	je     24bb <first_empty_pcb+0x41>
    24a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    24a5:	c1 e0 02             	shl    $0x2,%eax
    24a8:	89 c2                	mov    %eax,%edx
    24aa:	c1 e2 04             	shl    $0x4,%edx
    24ad:	01 d0                	add    %edx,%eax
    24af:	05 1c 45 00 00       	add    $0x451c,%eax
    24b4:	8b 00                	mov    (%eax),%eax
    24b6:	83 f8 ff             	cmp    $0xffffffff,%eax
    24b9:	75 06                	jne    24c1 <first_empty_pcb+0x47>
    24bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    24bf:	eb 11                	jmp    24d2 <first_empty_pcb+0x58>
    24c1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    24c6:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    24cb:	7e ba                	jle    2487 <first_empty_pcb+0xd>
    24cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    24d2:	83 c4 10             	add    $0x10,%esp
    24d5:	c3                   	ret    

000024d6 <copy_process>:
copy_process():
    24d6:	83 ec 2c             	sub    $0x2c,%esp
    24d9:	8b 44 24 30          	mov    0x30(%esp),%eax
    24dd:	c1 e0 02             	shl    $0x2,%eax
    24e0:	89 c2                	mov    %eax,%edx
    24e2:	c1 e2 04             	shl    $0x4,%edx
    24e5:	01 d0                	add    %edx,%eax
    24e7:	05 e0 44 00 00       	add    $0x44e0,%eax
    24ec:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    24f0:	8b 44 24 34          	mov    0x34(%esp),%eax
    24f4:	c1 e0 02             	shl    $0x2,%eax
    24f7:	89 c2                	mov    %eax,%edx
    24f9:	c1 e2 04             	shl    $0x4,%edx
    24fc:	01 d0                	add    %edx,%eax
    24fe:	05 e0 44 00 00       	add    $0x44e0,%eax
    2503:	89 44 24 18          	mov    %eax,0x18(%esp)
    2507:	a1 88 3f 00 00       	mov    0x3f88,%eax
    250c:	8d 50 01             	lea    0x1(%eax),%edx
    250f:	89 15 88 3f 00 00    	mov    %edx,0x3f88
    2515:	89 44 24 14          	mov    %eax,0x14(%esp)
    2519:	8b 44 24 18          	mov    0x18(%esp),%eax
    251d:	8b 54 24 14          	mov    0x14(%esp),%edx
    2521:	89 10                	mov    %edx,(%eax)
    2523:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2527:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    252d:	8b 44 24 18          	mov    0x18(%esp),%eax
    2531:	8b 50 04             	mov    0x4(%eax),%edx
    2534:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2538:	89 50 04             	mov    %edx,0x4(%eax)
    253b:	8b 44 24 18          	mov    0x18(%esp),%eax
    253f:	8b 50 08             	mov    0x8(%eax),%edx
    2542:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2546:	89 50 08             	mov    %edx,0x8(%eax)
    2549:	8b 44 24 18          	mov    0x18(%esp),%eax
    254d:	8b 50 0c             	mov    0xc(%eax),%edx
    2550:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2554:	89 50 0c             	mov    %edx,0xc(%eax)
    2557:	8b 44 24 18          	mov    0x18(%esp),%eax
    255b:	8b 50 18             	mov    0x18(%eax),%edx
    255e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2562:	89 50 18             	mov    %edx,0x18(%eax)
    2565:	8b 44 24 18          	mov    0x18(%esp),%eax
    2569:	8b 50 1c             	mov    0x1c(%eax),%edx
    256c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2570:	89 50 1c             	mov    %edx,0x1c(%eax)
    2573:	8b 44 24 18          	mov    0x18(%esp),%eax
    2577:	8b 50 20             	mov    0x20(%eax),%edx
    257a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    257e:	89 50 20             	mov    %edx,0x20(%eax)
    2581:	8b 44 24 18          	mov    0x18(%esp),%eax
    2585:	8b 50 24             	mov    0x24(%eax),%edx
    2588:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    258c:	89 50 24             	mov    %edx,0x24(%eax)
    258f:	8b 44 24 18          	mov    0x18(%esp),%eax
    2593:	8b 50 28             	mov    0x28(%eax),%edx
    2596:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    259a:	89 50 28             	mov    %edx,0x28(%eax)
    259d:	8b 44 24 18          	mov    0x18(%esp),%eax
    25a1:	8b 50 2c             	mov    0x2c(%eax),%edx
    25a4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    25a8:	89 50 2c             	mov    %edx,0x2c(%eax)
    25ab:	8b 44 24 18          	mov    0x18(%esp),%eax
    25af:	8b 50 30             	mov    0x30(%eax),%edx
    25b2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    25b6:	89 50 30             	mov    %edx,0x30(%eax)
    25b9:	8b 44 24 18          	mov    0x18(%esp),%eax
    25bd:	8b 50 34             	mov    0x34(%eax),%edx
    25c0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    25c4:	89 50 34             	mov    %edx,0x34(%eax)
    25c7:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    25cc:	74 0e                	je     25dc <copy_process+0x106>
    25ce:	8b 44 24 34          	mov    0x34(%esp),%eax
    25d2:	83 e8 80             	sub    $0xffffff80,%eax
    25d5:	c1 e0 0a             	shl    $0xa,%eax
    25d8:	89 c2                	mov    %eax,%edx
    25da:	eb 05                	jmp    25e1 <copy_process+0x10b>
    25dc:	ba b5 04 00 00       	mov    $0x4b5,%edx
    25e1:	8b 44 24 18          	mov    0x18(%esp),%eax
    25e5:	8b 40 10             	mov    0x10(%eax),%eax
    25e8:	29 c2                	sub    %eax,%edx
    25ea:	89 d0                	mov    %edx,%eax
    25ec:	89 44 24 10          	mov    %eax,0x10(%esp)
    25f0:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    25f5:	74 0e                	je     2605 <copy_process+0x12f>
    25f7:	8b 44 24 34          	mov    0x34(%esp),%eax
    25fb:	83 e8 80             	sub    $0xffffff80,%eax
    25fe:	c1 e0 0a             	shl    $0xa,%eax
    2601:	89 c2                	mov    %eax,%edx
    2603:	eb 05                	jmp    260a <copy_process+0x134>
    2605:	ba b5 04 00 00       	mov    $0x4b5,%edx
    260a:	8b 44 24 18          	mov    0x18(%esp),%eax
    260e:	8b 40 14             	mov    0x14(%eax),%eax
    2611:	29 c2                	sub    %eax,%edx
    2613:	89 d0                	mov    %edx,%eax
    2615:	89 44 24 0c          	mov    %eax,0xc(%esp)
    2619:	83 7c 24 34 00       	cmpl   $0x0,0x34(%esp)
    261e:	74 0e                	je     262e <copy_process+0x158>
    2620:	8b 44 24 34          	mov    0x34(%esp),%eax
    2624:	83 e8 80             	sub    $0xffffff80,%eax
    2627:	c1 e0 0a             	shl    $0xa,%eax
    262a:	89 c2                	mov    %eax,%edx
    262c:	eb 05                	jmp    2633 <copy_process+0x15d>
    262e:	ba b5 04 00 00       	mov    $0x4b5,%edx
    2633:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    2638:	74 0c                	je     2646 <copy_process+0x170>
    263a:	8b 44 24 30          	mov    0x30(%esp),%eax
    263e:	83 e8 80             	sub    $0xffffff80,%eax
    2641:	c1 e0 0a             	shl    $0xa,%eax
    2644:	eb 05                	jmp    264b <copy_process+0x175>
    2646:	b8 b5 04 00 00       	mov    $0x4b5,%eax
    264b:	83 ec 04             	sub    $0x4,%esp
    264e:	68 00 04 00 00       	push   $0x400
    2653:	52                   	push   %edx
    2654:	50                   	push   %eax
    2655:	e8 84 01 00 00       	call   27de <_rev_memcpy>
    265a:	83 c4 10             	add    $0x10,%esp
    265d:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    2662:	74 0e                	je     2672 <copy_process+0x19c>
    2664:	8b 44 24 30          	mov    0x30(%esp),%eax
    2668:	83 e8 80             	sub    $0xffffff80,%eax
    266b:	c1 e0 0a             	shl    $0xa,%eax
    266e:	89 c2                	mov    %eax,%edx
    2670:	eb 05                	jmp    2677 <copy_process+0x1a1>
    2672:	ba b5 04 00 00       	mov    $0x4b5,%edx
    2677:	8b 44 24 10          	mov    0x10(%esp),%eax
    267b:	29 c2                	sub    %eax,%edx
    267d:	89 d0                	mov    %edx,%eax
    267f:	89 c2                	mov    %eax,%edx
    2681:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2685:	89 50 10             	mov    %edx,0x10(%eax)
    2688:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    268d:	74 0e                	je     269d <copy_process+0x1c7>
    268f:	8b 44 24 30          	mov    0x30(%esp),%eax
    2693:	83 e8 80             	sub    $0xffffff80,%eax
    2696:	c1 e0 0a             	shl    $0xa,%eax
    2699:	89 c2                	mov    %eax,%edx
    269b:	eb 05                	jmp    26a2 <copy_process+0x1cc>
    269d:	ba b5 04 00 00       	mov    $0x4b5,%edx
    26a2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    26a6:	29 c2                	sub    %eax,%edx
    26a8:	89 d0                	mov    %edx,%eax
    26aa:	89 c2                	mov    %eax,%edx
    26ac:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26b0:	89 50 14             	mov    %edx,0x14(%eax)
    26b3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26b7:	8b 40 10             	mov    0x10(%eax),%eax
    26ba:	89 44 24 08          	mov    %eax,0x8(%esp)
    26be:	8b 44 24 08          	mov    0x8(%esp),%eax
    26c2:	8d 50 34             	lea    0x34(%eax),%edx
    26c5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26c9:	8b 00                	mov    (%eax),%eax
    26cb:	89 02                	mov    %eax,(%edx)
    26cd:	8b 44 24 08          	mov    0x8(%esp),%eax
    26d1:	8d 50 04             	lea    0x4(%eax),%edx
    26d4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26d8:	8b 40 30             	mov    0x30(%eax),%eax
    26db:	89 02                	mov    %eax,(%edx)
    26dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    26e1:	8d 50 08             	lea    0x8(%eax),%edx
    26e4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26e8:	8b 40 2c             	mov    0x2c(%eax),%eax
    26eb:	89 02                	mov    %eax,(%edx)
    26ed:	8b 44 24 08          	mov    0x8(%esp),%eax
    26f1:	8d 50 0c             	lea    0xc(%eax),%edx
    26f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    26f8:	8b 40 28             	mov    0x28(%eax),%eax
    26fb:	89 02                	mov    %eax,(%edx)
    26fd:	8b 44 24 08          	mov    0x8(%esp),%eax
    2701:	8d 50 10             	lea    0x10(%eax),%edx
    2704:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2708:	8b 40 24             	mov    0x24(%eax),%eax
    270b:	89 02                	mov    %eax,(%edx)
    270d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2711:	8d 50 14             	lea    0x14(%eax),%edx
    2714:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2718:	8b 40 20             	mov    0x20(%eax),%eax
    271b:	89 02                	mov    %eax,(%edx)
    271d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2721:	8d 50 18             	lea    0x18(%eax),%edx
    2724:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2728:	8b 40 1c             	mov    0x1c(%eax),%eax
    272b:	89 02                	mov    %eax,(%edx)
    272d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2731:	8d 50 1c             	lea    0x1c(%eax),%edx
    2734:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2738:	8b 40 18             	mov    0x18(%eax),%eax
    273b:	89 02                	mov    %eax,(%edx)
    273d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2741:	8d 50 20             	lea    0x20(%eax),%edx
    2744:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2748:	8b 40 14             	mov    0x14(%eax),%eax
    274b:	89 02                	mov    %eax,(%edx)
    274d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2751:	8d 50 28             	lea    0x28(%eax),%edx
    2754:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2758:	8b 40 0c             	mov    0xc(%eax),%eax
    275b:	89 02                	mov    %eax,(%edx)
    275d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2761:	8d 50 2c             	lea    0x2c(%eax),%edx
    2764:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2768:	8b 40 08             	mov    0x8(%eax),%eax
    276b:	89 02                	mov    %eax,(%edx)
    276d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2771:	8d 50 30             	lea    0x30(%eax),%edx
    2774:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2778:	8b 40 04             	mov    0x4(%eax),%eax
    277b:	89 02                	mov    %eax,(%edx)
    277d:	8b 44 24 08          	mov    0x8(%esp),%eax
    2781:	8d 50 34             	lea    0x34(%eax),%edx
    2784:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    2788:	8b 00                	mov    (%eax),%eax
    278a:	89 02                	mov    %eax,(%edx)
    278c:	8b 44 24 30          	mov    0x30(%esp),%eax
    2790:	c1 e0 02             	shl    $0x2,%eax
    2793:	89 c2                	mov    %eax,%edx
    2795:	c1 e2 04             	shl    $0x4,%edx
    2798:	01 d0                	add    %edx,%eax
    279a:	05 1c 45 00 00       	add    $0x451c,%eax
    279f:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    27a5:	8b 44 24 30          	mov    0x30(%esp),%eax
    27a9:	c1 e0 02             	shl    $0x2,%eax
    27ac:	89 c2                	mov    %eax,%edx
    27ae:	c1 e2 04             	shl    $0x4,%edx
    27b1:	01 d0                	add    %edx,%eax
    27b3:	8d 90 18 45 00 00    	lea    0x4518(%eax),%edx
    27b9:	8b 44 24 14          	mov    0x14(%esp),%eax
    27bd:	89 02                	mov    %eax,(%edx)
    27bf:	8b 44 24 30          	mov    0x30(%esp),%eax
    27c3:	c1 e0 02             	shl    $0x2,%eax
    27c6:	89 c2                	mov    %eax,%edx
    27c8:	c1 e2 04             	shl    $0x4,%edx
    27cb:	01 d0                	add    %edx,%eax
    27cd:	8d 90 20 45 00 00    	lea    0x4520(%eax),%edx
    27d3:	8b 44 24 34          	mov    0x34(%esp),%eax
    27d7:	89 02                	mov    %eax,(%edx)
    27d9:	90                   	nop
    27da:	83 c4 2c             	add    $0x2c,%esp
    27dd:	c3                   	ret    

000027de <_rev_memcpy>:
_rev_memcpy():
    27de:	83 ec 10             	sub    $0x10,%esp
    27e1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    27e8:	00 
    27e9:	eb 26                	jmp    2811 <_rev_memcpy+0x33>
    27eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    27ef:	f7 d0                	not    %eax
    27f1:	89 c2                	mov    %eax,%edx
    27f3:	8b 44 24 14          	mov    0x14(%esp),%eax
    27f7:	01 c2                	add    %eax,%edx
    27f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    27fd:	f7 d0                	not    %eax
    27ff:	89 c1                	mov    %eax,%ecx
    2801:	8b 44 24 18          	mov    0x18(%esp),%eax
    2805:	01 c8                	add    %ecx,%eax
    2807:	0f b6 00             	movzbl (%eax),%eax
    280a:	88 02                	mov    %al,(%edx)
    280c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    2811:	8b 44 24 0c          	mov    0xc(%esp),%eax
    2815:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
    2819:	7c d0                	jl     27eb <_rev_memcpy+0xd>
    281b:	90                   	nop
    281c:	83 c4 10             	add    $0x10,%esp
    281f:	c3                   	ret    

00002820 <init_semaphore>:
init_semaphore():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:12
extern PCB_List_T PCB_List[NR_TASKS];
int printks(const char*);

Semaphone semaphone_list[NR_SEMAPHORE];

void init_semaphore() {
    2820:	55                   	push   %ebp
    2821:	89 e5                	mov    %esp,%ebp
    2823:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13
    for (int i = 0; i < NR_SEMAPHORE; ++i) {
    2826:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    282d:	eb 2c                	jmp    285b <init_semaphore+0x3b>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:14 (discriminator 3)
        semaphone_list[i].bsize = 0;
    282f:	8b 45 fc             	mov    -0x4(%ebp),%eax
    2832:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    2838:	05 84 57 00 00       	add    $0x5784,%eax
    283d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:15 (discriminator 3)
        semaphone_list[i].used = 0; // false
    2843:	8b 45 fc             	mov    -0x4(%ebp),%eax
    2846:	69 c0 0c 01 00 00    	imul   $0x10c,%eax,%eax
    284c:	05 88 57 00 00       	add    $0x5788,%eax
    2851:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13 (discriminator 3)
int printks(const char*);

Semaphone semaphone_list[NR_SEMAPHORE];

void init_semaphore() {
    for (int i = 0; i < NR_SEMAPHORE; ++i) {
    2857:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:13 (discriminator 1)
    285b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
    2862:	7e cb                	jle    282f <init_semaphore+0xf>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:17
        semaphone_list[i].bsize = 0;
        semaphone_list[i].used = 0; // false
    }
}
    2864:	90                   	nop
    2865:	c9                   	leave  
    2866:	c3                   	ret    

00002867 <getsem>:
getsem():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:19

int getsem(int value) {
    2867:	55                   	push   %ebp
    2868:	89 e5                	mov    %esp,%ebp
    286a:	53                   	push   %ebx
    286b:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:30
    //         return i;
    //     }
    // }
    // return -1;
    int ret;
    __asm__(
    286e:	8b 45 08             	mov    0x8(%ebp),%eax
    2871:	89 c3                	mov    %eax,%ebx
    2873:	b8 05 00 00 00       	mov    $0x5,%eax
    2878:	cd 80                	int    $0x80
    287a:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:36
        "movl $0x05, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(value)
    );
    return ret;
    287d:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:37
}
    2880:	83 c4 04             	add    $0x4,%esp
    2883:	5b                   	pop    %ebx
    2884:	5d                   	pop    %ebp
    2885:	c3                   	ret    

00002886 <freesem>:
freesem():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:39

int freesem(int id) {
    2886:	55                   	push   %ebp
    2887:	89 e5                	mov    %esp,%ebp
    2889:	53                   	push   %ebx
    288a:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:42
    //TODO: should be refine
    int ret;
    __asm__(
    288d:	8b 45 08             	mov    0x8(%ebp),%eax
    2890:	89 c3                	mov    %eax,%ebx
    2892:	b8 06 00 00 00       	mov    $0x6,%eax
    2897:	cd 80                	int    $0x80
    2899:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:48
        "movl $0x06, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    289c:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:49
}
    289f:	83 c4 04             	add    $0x4,%esp
    28a2:	5b                   	pop    %ebx
    28a3:	5d                   	pop    %ebp
    28a4:	c3                   	ret    

000028a5 <puti>:
puti():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:50
void puti(int number) {
    28a5:	55                   	push   %ebp
    28a6:	89 e5                	mov    %esp,%ebp
    28a8:	53                   	push   %ebx
    28a9:	83 ec 28             	sub    $0x28,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:52
    char buffer[20];
    int length = 0;
    28ac:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:53
    int num = number < 0 ? -number : number;
    28b3:	8b 45 08             	mov    0x8(%ebp),%eax
    28b6:	c1 f8 1f             	sar    $0x1f,%eax
    28b9:	89 c2                	mov    %eax,%edx
    28bb:	33 55 08             	xor    0x8(%ebp),%edx
    28be:	29 c2                	sub    %eax,%edx
    28c0:	89 d0                	mov    %edx,%eax
    28c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:54
    while (num) {
    28c5:	eb 50                	jmp    2917 <puti+0x72>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:55
        buffer[length++] = (num % 10) + '0';
    28c7:	8b 5d f8             	mov    -0x8(%ebp),%ebx
    28ca:	8d 43 01             	lea    0x1(%ebx),%eax
    28cd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    28d0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    28d3:	ba 67 66 66 66       	mov    $0x66666667,%edx
    28d8:	89 c8                	mov    %ecx,%eax
    28da:	f7 ea                	imul   %edx
    28dc:	c1 fa 02             	sar    $0x2,%edx
    28df:	89 c8                	mov    %ecx,%eax
    28e1:	c1 f8 1f             	sar    $0x1f,%eax
    28e4:	29 c2                	sub    %eax,%edx
    28e6:	89 d0                	mov    %edx,%eax
    28e8:	c1 e0 02             	shl    $0x2,%eax
    28eb:	01 d0                	add    %edx,%eax
    28ed:	01 c0                	add    %eax,%eax
    28ef:	29 c1                	sub    %eax,%ecx
    28f1:	89 ca                	mov    %ecx,%edx
    28f3:	89 d0                	mov    %edx,%eax
    28f5:	83 c0 30             	add    $0x30,%eax
    28f8:	88 44 1d d4          	mov    %al,-0x2c(%ebp,%ebx,1)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:56
        num /= 10;
    28fc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
    28ff:	ba 67 66 66 66       	mov    $0x66666667,%edx
    2904:	89 c8                	mov    %ecx,%eax
    2906:	f7 ea                	imul   %edx
    2908:	c1 fa 02             	sar    $0x2,%edx
    290b:	89 c8                	mov    %ecx,%eax
    290d:	c1 f8 1f             	sar    $0x1f,%eax
    2910:	29 c2                	sub    %eax,%edx
    2912:	89 d0                	mov    %edx,%eax
    2914:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:54
}
void puti(int number) {
    char buffer[20];
    int length = 0;
    int num = number < 0 ? -number : number;
    while (num) {
    2917:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
    291b:	75 aa                	jne    28c7 <puti+0x22>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:58
        buffer[length++] = (num % 10) + '0';
        num /= 10;
    }
    buffer[length] = 0;
    291d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    2920:	8b 45 f8             	mov    -0x8(%ebp),%eax
    2923:	01 d0                	add    %edx,%eax
    2925:	c6 00 00             	movb   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:59
    int i = 0;
    2928:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:60
    int j = length - 1;
    292f:	8b 45 f8             	mov    -0x8(%ebp),%eax
    2932:	83 e8 01             	sub    $0x1,%eax
    2935:	89 45 ec             	mov    %eax,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:61
    while (i < j) {
    2938:	eb 3d                	jmp    2977 <puti+0xd2>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:62
        int tmp = buffer[i];
    293a:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    293d:	8b 45 f0             	mov    -0x10(%ebp),%eax
    2940:	01 d0                	add    %edx,%eax
    2942:	0f b6 00             	movzbl (%eax),%eax
    2945:	0f be c0             	movsbl %al,%eax
    2948:	89 45 e8             	mov    %eax,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:63
        buffer[i] = buffer[j];
    294b:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    294e:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2951:	01 d0                	add    %edx,%eax
    2953:	0f b6 00             	movzbl (%eax),%eax
    2956:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
    2959:	8b 55 f0             	mov    -0x10(%ebp),%edx
    295c:	01 ca                	add    %ecx,%edx
    295e:	88 02                	mov    %al,(%edx)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:64
        buffer[j] = tmp;
    2960:	8b 45 e8             	mov    -0x18(%ebp),%eax
    2963:	89 c1                	mov    %eax,%ecx
    2965:	8d 55 d4             	lea    -0x2c(%ebp),%edx
    2968:	8b 45 ec             	mov    -0x14(%ebp),%eax
    296b:	01 d0                	add    %edx,%eax
    296d:	88 08                	mov    %cl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:65
        i++;
    296f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:66
        j--;
    2973:	83 6d ec 01          	subl   $0x1,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:61
        num /= 10;
    }
    buffer[length] = 0;
    int i = 0;
    int j = length - 1;
    while (i < j) {
    2977:	8b 45 f0             	mov    -0x10(%ebp),%eax
    297a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
    297d:	7c bb                	jl     293a <puti+0x95>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:68
        buffer[i] = buffer[j];
        buffer[j] = tmp;
        i++;
        j--;
    }
    if (number <0) {
    297f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
    2983:	79 0d                	jns    2992 <puti+0xed>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:69
        printks("-");
    2985:	68 52 35 00 00       	push   $0x3552
    298a:	e8 75 f0 ff ff       	call   1a04 <printks>
    298f:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:71
    }
    printks(buffer);
    2992:	8d 45 d4             	lea    -0x2c(%ebp),%eax
    2995:	50                   	push   %eax
    2996:	e8 69 f0 ff ff       	call   1a04 <printks>
    299b:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:72
    if (number == 0) {
    299e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
    29a2:	75 0d                	jne    29b1 <puti+0x10c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:73
        printks("0");
    29a4:	68 54 35 00 00       	push   $0x3554
    29a9:	e8 56 f0 ff ff       	call   1a04 <printks>
    29ae:	83 c4 04             	add    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:75
    }
}
    29b1:	90                   	nop
    29b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
    29b5:	c9                   	leave  
    29b6:	c3                   	ret    

000029b7 <p>:
p():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:76
int p(int id) {
    29b7:	55                   	push   %ebp
    29b8:	89 e5                	mov    %esp,%ebp
    29ba:	53                   	push   %ebx
    29bb:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:78
    int ret;
    __asm__(
    29be:	8b 45 08             	mov    0x8(%ebp),%eax
    29c1:	89 c3                	mov    %eax,%ebx
    29c3:	b8 07 00 00 00       	mov    $0x7,%eax
    29c8:	cd 80                	int    $0x80
    29ca:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:84
        "movl $0x07, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    29cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:85
}
    29d0:	83 c4 04             	add    $0x4,%esp
    29d3:	5b                   	pop    %ebx
    29d4:	5d                   	pop    %ebp
    29d5:	c3                   	ret    

000029d6 <v>:
v():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:87

int v(int id) {
    29d6:	55                   	push   %ebp
    29d7:	89 e5                	mov    %esp,%ebp
    29d9:	53                   	push   %ebx
    29da:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:89
    int ret;
    __asm__(
    29dd:	8b 45 08             	mov    0x8(%ebp),%eax
    29e0:	89 c3                	mov    %eax,%ebx
    29e2:	b8 08 00 00 00       	mov    $0x8,%eax
    29e7:	cd 80                	int    $0x80
    29e9:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:95
        "movl $0x08, %%eax\n"
        "int $0x80\n"
        :"=r"(ret)
        :"b"(id)
    );
    return ret;
    29ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/semaphore.c:96
    29ef:	83 c4 04             	add    $0x4,%esp
    29f2:	5b                   	pop    %ebx
    29f3:	5d                   	pop    %ebp
    29f4:	c3                   	ret    

000029f5 <skip_atoi>:
skip_atoi():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:19

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
    29f5:	55                   	push   %ebp
    29f6:	89 e5                	mov    %esp,%ebp
    29f8:	53                   	push   %ebx
    29f9:	83 ec 04             	sub    $0x4,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:20
	int i=0;
    29fc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:22

	while (is_digit(**s))
    2a03:	eb 29                	jmp    2a2e <skip_atoi+0x39>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:23
		i = i*10 + *((*s)++) - '0';
    2a05:	8b 55 f8             	mov    -0x8(%ebp),%edx
    2a08:	89 d0                	mov    %edx,%eax
    2a0a:	c1 e0 02             	shl    $0x2,%eax
    2a0d:	01 d0                	add    %edx,%eax
    2a0f:	01 c0                	add    %eax,%eax
    2a11:	89 c3                	mov    %eax,%ebx
    2a13:	8b 45 08             	mov    0x8(%ebp),%eax
    2a16:	8b 00                	mov    (%eax),%eax
    2a18:	8d 48 01             	lea    0x1(%eax),%ecx
    2a1b:	8b 55 08             	mov    0x8(%ebp),%edx
    2a1e:	89 0a                	mov    %ecx,(%edx)
    2a20:	0f b6 00             	movzbl (%eax),%eax
    2a23:	0f be c0             	movsbl %al,%eax
    2a26:	01 d8                	add    %ebx,%eax
    2a28:	83 e8 30             	sub    $0x30,%eax
    2a2b:	89 45 f8             	mov    %eax,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:22

static int skip_atoi(const char **s)
{
	int i=0;

	while (is_digit(**s))
    2a2e:	8b 45 08             	mov    0x8(%ebp),%eax
    2a31:	8b 00                	mov    (%eax),%eax
    2a33:	0f b6 00             	movzbl (%eax),%eax
    2a36:	3c 2f                	cmp    $0x2f,%al
    2a38:	7e 0c                	jle    2a46 <skip_atoi+0x51>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:22 (discriminator 1)
    2a3a:	8b 45 08             	mov    0x8(%ebp),%eax
    2a3d:	8b 00                	mov    (%eax),%eax
    2a3f:	0f b6 00             	movzbl (%eax),%eax
    2a42:	3c 39                	cmp    $0x39,%al
    2a44:	7e bf                	jle    2a05 <skip_atoi+0x10>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:24
		i = i*10 + *((*s)++) - '0';
	return i;
    2a46:	8b 45 f8             	mov    -0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:25
}
    2a49:	83 c4 04             	add    $0x4,%esp
    2a4c:	5b                   	pop    %ebx
    2a4d:	5d                   	pop    %ebp
    2a4e:	c3                   	ret    

00002a4f <number>:
number():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:42
__asm__("divl %4":"=a" (n),"=d" (__res):"0" (n),"1" (0),"r" (base)); \
__res; })

static char * number(char * str, int num, int base, int size, int precision
	,int type)
{
    2a4f:	55                   	push   %ebp
    2a50:	89 e5                	mov    %esp,%ebp
    2a52:	53                   	push   %ebx
    2a53:	83 ec 38             	sub    $0x38,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:44
	char c,sign,tmp[36];
	const char *digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    2a56:	c7 45 f4 58 35 00 00 	movl   $0x3558,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:47
	int i;

	if (type&SMALL) digits="0123456789abcdefghijklmnopqrstuvwxyz";
    2a5d:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2a60:	83 e0 40             	and    $0x40,%eax
    2a63:	85 c0                	test   %eax,%eax
    2a65:	74 07                	je     2a6e <number+0x1f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:47 (discriminator 1)
    2a67:	c7 45 f4 80 35 00 00 	movl   $0x3580,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:48
	if (type&LEFT) type &= ~ZEROPAD;
    2a6e:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2a71:	83 e0 10             	and    $0x10,%eax
    2a74:	85 c0                	test   %eax,%eax
    2a76:	74 04                	je     2a7c <number+0x2d>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:48 (discriminator 1)
    2a78:	83 65 1c fe          	andl   $0xfffffffe,0x1c(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:49
	if (base<2 || base>36)
    2a7c:	83 7d 10 01          	cmpl   $0x1,0x10(%ebp)
    2a80:	7e 06                	jle    2a88 <number+0x39>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:49 (discriminator 1)
    2a82:	83 7d 10 24          	cmpl   $0x24,0x10(%ebp)
    2a86:	7e 0a                	jle    2a92 <number+0x43>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:50
		return 0;
    2a88:	b8 00 00 00 00       	mov    $0x0,%eax
    2a8d:	e9 ed 01 00 00       	jmp    2c7f <number+0x230>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:51
	c = (type & ZEROPAD) ? '0' : ' ' ;
    2a92:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2a95:	83 e0 01             	and    $0x1,%eax
    2a98:	85 c0                	test   %eax,%eax
    2a9a:	74 07                	je     2aa3 <number+0x54>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:51 (discriminator 1)
    2a9c:	b8 30 00 00 00       	mov    $0x30,%eax
    2aa1:	eb 05                	jmp    2aa8 <number+0x59>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:51 (discriminator 2)
    2aa3:	b8 20 00 00 00       	mov    $0x20,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:51 (discriminator 4)
    2aa8:	88 45 ef             	mov    %al,-0x11(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:52 (discriminator 4)
	if (type&SIGN && num<0) {
    2aab:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2aae:	83 e0 02             	and    $0x2,%eax
    2ab1:	85 c0                	test   %eax,%eax
    2ab3:	74 0f                	je     2ac4 <number+0x75>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:52 (discriminator 1)
    2ab5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    2ab9:	79 09                	jns    2ac4 <number+0x75>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:53
		sign='-';
    2abb:	c6 45 fb 2d          	movb   $0x2d,-0x5(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:54
		num = -num;
    2abf:	f7 5d 0c             	negl   0xc(%ebp)
    2ac2:	eb 2a                	jmp    2aee <number+0x9f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:56
	} else
		sign=(type&PLUS) ? '+' : ((type&SPACE) ? ' ' : 0);
    2ac4:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2ac7:	83 e0 04             	and    $0x4,%eax
    2aca:	85 c0                	test   %eax,%eax
    2acc:	75 18                	jne    2ae6 <number+0x97>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:56 (discriminator 1)
    2ace:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2ad1:	83 e0 08             	and    $0x8,%eax
    2ad4:	85 c0                	test   %eax,%eax
    2ad6:	74 07                	je     2adf <number+0x90>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:56 (discriminator 3)
    2ad8:	b8 20 00 00 00       	mov    $0x20,%eax
    2add:	eb 0c                	jmp    2aeb <number+0x9c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:56 (discriminator 4)
    2adf:	b8 00 00 00 00       	mov    $0x0,%eax
    2ae4:	eb 05                	jmp    2aeb <number+0x9c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:56 (discriminator 2)
    2ae6:	b8 2b 00 00 00       	mov    $0x2b,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:56 (discriminator 8)
    2aeb:	88 45 fb             	mov    %al,-0x5(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:57
	if (sign) size--;
    2aee:	80 7d fb 00          	cmpb   $0x0,-0x5(%ebp)
    2af2:	74 04                	je     2af8 <number+0xa9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:57 (discriminator 1)
    2af4:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:58
	if (type&SPECIAL) {
    2af8:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2afb:	83 e0 20             	and    $0x20,%eax
    2afe:	85 c0                	test   %eax,%eax
    2b00:	74 16                	je     2b18 <number+0xc9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:59
		if (base==16) size -= 2;
    2b02:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
    2b06:	75 06                	jne    2b0e <number+0xbf>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:59 (discriminator 1)
    2b08:	83 6d 14 02          	subl   $0x2,0x14(%ebp)
    2b0c:	eb 0a                	jmp    2b18 <number+0xc9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:60
		else if (base==8) size--;
    2b0e:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
    2b12:	75 04                	jne    2b18 <number+0xc9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:60 (discriminator 1)
    2b14:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:62
	}
	i=0;
    2b18:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:63
	if (num==0)
    2b1f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    2b23:	75 3d                	jne    2b62 <number+0x113>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:64
		tmp[i++]='0';
    2b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
    2b28:	8d 50 01             	lea    0x1(%eax),%edx
    2b2b:	89 55 f0             	mov    %edx,-0x10(%ebp)
    2b2e:	c6 44 05 c4 30       	movb   $0x30,-0x3c(%ebp,%eax,1)
    2b33:	eb 33                	jmp    2b68 <number+0x119>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:66
	else while (num!=0)
		tmp[i++]=digits[do_div(num,base)];
    2b35:	8b 4d f0             	mov    -0x10(%ebp),%ecx
    2b38:	8d 41 01             	lea    0x1(%ecx),%eax
    2b3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    2b3e:	8b 45 0c             	mov    0xc(%ebp),%eax
    2b41:	ba 00 00 00 00       	mov    $0x0,%edx
    2b46:	8b 5d 10             	mov    0x10(%ebp),%ebx
    2b49:	f7 f3                	div    %ebx
    2b4b:	89 45 0c             	mov    %eax,0xc(%ebp)
    2b4e:	89 55 e8             	mov    %edx,-0x18(%ebp)
    2b51:	8b 45 e8             	mov    -0x18(%ebp),%eax
    2b54:	89 c2                	mov    %eax,%edx
    2b56:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2b59:	01 d0                	add    %edx,%eax
    2b5b:	0f b6 00             	movzbl (%eax),%eax
    2b5e:	88 44 0d c4          	mov    %al,-0x3c(%ebp,%ecx,1)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:65
		else if (base==8) size--;
	}
	i=0;
	if (num==0)
		tmp[i++]='0';
	else while (num!=0)
    2b62:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
    2b66:	75 cd                	jne    2b35 <number+0xe6>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:67
		tmp[i++]=digits[do_div(num,base)];
	if (i>precision) precision=i;
    2b68:	8b 45 f0             	mov    -0x10(%ebp),%eax
    2b6b:	3b 45 18             	cmp    0x18(%ebp),%eax
    2b6e:	7e 06                	jle    2b76 <number+0x127>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:67 (discriminator 1)
    2b70:	8b 45 f0             	mov    -0x10(%ebp),%eax
    2b73:	89 45 18             	mov    %eax,0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:68
	size -= precision;
    2b76:	8b 45 18             	mov    0x18(%ebp),%eax
    2b79:	29 45 14             	sub    %eax,0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:69
	if (!(type&(ZEROPAD+LEFT)))
    2b7c:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2b7f:	83 e0 11             	and    $0x11,%eax
    2b82:	85 c0                	test   %eax,%eax
    2b84:	75 1b                	jne    2ba1 <number+0x152>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:70
		while(size-->0)
    2b86:	eb 0c                	jmp    2b94 <number+0x145>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:71
			*str++ = ' ';
    2b88:	8b 45 08             	mov    0x8(%ebp),%eax
    2b8b:	8d 50 01             	lea    0x1(%eax),%edx
    2b8e:	89 55 08             	mov    %edx,0x8(%ebp)
    2b91:	c6 00 20             	movb   $0x20,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:70
	else while (num!=0)
		tmp[i++]=digits[do_div(num,base)];
	if (i>precision) precision=i;
	size -= precision;
	if (!(type&(ZEROPAD+LEFT)))
		while(size-->0)
    2b94:	8b 45 14             	mov    0x14(%ebp),%eax
    2b97:	8d 50 ff             	lea    -0x1(%eax),%edx
    2b9a:	89 55 14             	mov    %edx,0x14(%ebp)
    2b9d:	85 c0                	test   %eax,%eax
    2b9f:	7f e7                	jg     2b88 <number+0x139>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:72
			*str++ = ' ';
	if (sign)
    2ba1:	80 7d fb 00          	cmpb   $0x0,-0x5(%ebp)
    2ba5:	74 0f                	je     2bb6 <number+0x167>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:73
		*str++ = sign;
    2ba7:	8b 45 08             	mov    0x8(%ebp),%eax
    2baa:	8d 50 01             	lea    0x1(%eax),%edx
    2bad:	89 55 08             	mov    %edx,0x8(%ebp)
    2bb0:	0f b6 55 fb          	movzbl -0x5(%ebp),%edx
    2bb4:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:74
	if (type&SPECIAL) {
    2bb6:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2bb9:	83 e0 20             	and    $0x20,%eax
    2bbc:	85 c0                	test   %eax,%eax
    2bbe:	74 38                	je     2bf8 <number+0x1a9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:75
		if (base==8)
    2bc0:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
    2bc4:	75 0e                	jne    2bd4 <number+0x185>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:76
			*str++ = '0';
    2bc6:	8b 45 08             	mov    0x8(%ebp),%eax
    2bc9:	8d 50 01             	lea    0x1(%eax),%edx
    2bcc:	89 55 08             	mov    %edx,0x8(%ebp)
    2bcf:	c6 00 30             	movb   $0x30,(%eax)
    2bd2:	eb 24                	jmp    2bf8 <number+0x1a9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:77
		else if (base==16) {
    2bd4:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
    2bd8:	75 1e                	jne    2bf8 <number+0x1a9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:78
			*str++ = '0';
    2bda:	8b 45 08             	mov    0x8(%ebp),%eax
    2bdd:	8d 50 01             	lea    0x1(%eax),%edx
    2be0:	89 55 08             	mov    %edx,0x8(%ebp)
    2be3:	c6 00 30             	movb   $0x30,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:79
			*str++ = digits[33];
    2be6:	8b 45 08             	mov    0x8(%ebp),%eax
    2be9:	8d 50 01             	lea    0x1(%eax),%edx
    2bec:	89 55 08             	mov    %edx,0x8(%ebp)
    2bef:	8b 55 f4             	mov    -0xc(%ebp),%edx
    2bf2:	0f b6 52 21          	movzbl 0x21(%edx),%edx
    2bf6:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:82
		}
	}
	if (!(type&LEFT))
    2bf8:	8b 45 1c             	mov    0x1c(%ebp),%eax
    2bfb:	83 e0 10             	and    $0x10,%eax
    2bfe:	85 c0                	test   %eax,%eax
    2c00:	75 2c                	jne    2c2e <number+0x1df>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:83
		while(size-->0)
    2c02:	eb 0f                	jmp    2c13 <number+0x1c4>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:84
			*str++ = c;
    2c04:	8b 45 08             	mov    0x8(%ebp),%eax
    2c07:	8d 50 01             	lea    0x1(%eax),%edx
    2c0a:	89 55 08             	mov    %edx,0x8(%ebp)
    2c0d:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
    2c11:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:83
			*str++ = '0';
			*str++ = digits[33];
		}
	}
	if (!(type&LEFT))
		while(size-->0)
    2c13:	8b 45 14             	mov    0x14(%ebp),%eax
    2c16:	8d 50 ff             	lea    -0x1(%eax),%edx
    2c19:	89 55 14             	mov    %edx,0x14(%ebp)
    2c1c:	85 c0                	test   %eax,%eax
    2c1e:	7f e4                	jg     2c04 <number+0x1b5>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:85
			*str++ = c;
	while(i<precision--)
    2c20:	eb 0c                	jmp    2c2e <number+0x1df>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:86
		*str++ = '0';
    2c22:	8b 45 08             	mov    0x8(%ebp),%eax
    2c25:	8d 50 01             	lea    0x1(%eax),%edx
    2c28:	89 55 08             	mov    %edx,0x8(%ebp)
    2c2b:	c6 00 30             	movb   $0x30,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:85
		}
	}
	if (!(type&LEFT))
		while(size-->0)
			*str++ = c;
	while(i<precision--)
    2c2e:	8b 45 18             	mov    0x18(%ebp),%eax
    2c31:	8d 50 ff             	lea    -0x1(%eax),%edx
    2c34:	89 55 18             	mov    %edx,0x18(%ebp)
    2c37:	3b 45 f0             	cmp    -0x10(%ebp),%eax
    2c3a:	7f e6                	jg     2c22 <number+0x1d3>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:87
		*str++ = '0';
	while(i-->0)
    2c3c:	eb 16                	jmp    2c54 <number+0x205>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:88
		*str++ = tmp[i];
    2c3e:	8b 45 08             	mov    0x8(%ebp),%eax
    2c41:	8d 50 01             	lea    0x1(%eax),%edx
    2c44:	89 55 08             	mov    %edx,0x8(%ebp)
    2c47:	8d 4d c4             	lea    -0x3c(%ebp),%ecx
    2c4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
    2c4d:	01 ca                	add    %ecx,%edx
    2c4f:	0f b6 12             	movzbl (%edx),%edx
    2c52:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:87
	if (!(type&LEFT))
		while(size-->0)
			*str++ = c;
	while(i<precision--)
		*str++ = '0';
	while(i-->0)
    2c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
    2c57:	8d 50 ff             	lea    -0x1(%eax),%edx
    2c5a:	89 55 f0             	mov    %edx,-0x10(%ebp)
    2c5d:	85 c0                	test   %eax,%eax
    2c5f:	7f dd                	jg     2c3e <number+0x1ef>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:89
		*str++ = tmp[i];
	while(size-->0)
    2c61:	eb 0c                	jmp    2c6f <number+0x220>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:90
		*str++ = ' ';
    2c63:	8b 45 08             	mov    0x8(%ebp),%eax
    2c66:	8d 50 01             	lea    0x1(%eax),%edx
    2c69:	89 55 08             	mov    %edx,0x8(%ebp)
    2c6c:	c6 00 20             	movb   $0x20,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:89
			*str++ = c;
	while(i<precision--)
		*str++ = '0';
	while(i-->0)
		*str++ = tmp[i];
	while(size-->0)
    2c6f:	8b 45 14             	mov    0x14(%ebp),%eax
    2c72:	8d 50 ff             	lea    -0x1(%eax),%edx
    2c75:	89 55 14             	mov    %edx,0x14(%ebp)
    2c78:	85 c0                	test   %eax,%eax
    2c7a:	7f e7                	jg     2c63 <number+0x214>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:91
		*str++ = ' ';
	return str;
    2c7c:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:92 (discriminator 1)
}
    2c7f:	83 c4 38             	add    $0x38,%esp
    2c82:	5b                   	pop    %ebx
    2c83:	5d                   	pop    %ebp
    2c84:	c3                   	ret    

00002c85 <vsprintf>:
vsprintf():
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:105
// 	}
// 	return length;
// }

int vsprintf(char *buf, const char *fmt, va_list args)
{
    2c85:	55                   	push   %ebp
    2c86:	89 e5                	mov    %esp,%ebp
    2c88:	83 ec 24             	sub    $0x24,%esp
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
    2c8b:	8b 45 08             	mov    0x8(%ebp),%eax
    2c8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    2c91:	e9 97 03 00 00       	jmp    302d <vsprintf+0x3a8>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:120
		if (*fmt != '%') {
    2c96:	8b 45 0c             	mov    0xc(%ebp),%eax
    2c99:	0f b6 00             	movzbl (%eax),%eax
    2c9c:	3c 25                	cmp    $0x25,%al
    2c9e:	74 16                	je     2cb6 <vsprintf+0x31>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:121
			*str++ = *fmt;
    2ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2ca3:	8d 50 01             	lea    0x1(%eax),%edx
    2ca6:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2ca9:	8b 55 0c             	mov    0xc(%ebp),%edx
    2cac:	0f b6 12             	movzbl (%edx),%edx
    2caf:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:122
			continue;
    2cb1:	e9 6e 03 00 00       	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:126
		}
			
		/* process flags */
		flags = 0;
    2cb6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:128
		repeat:
			++fmt;		/* this also skips first '%' */
    2cbd:	8b 45 0c             	mov    0xc(%ebp),%eax
    2cc0:	83 c0 01             	add    $0x1,%eax
    2cc3:	89 45 0c             	mov    %eax,0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:129
			switch (*fmt) {
    2cc6:	8b 45 0c             	mov    0xc(%ebp),%eax
    2cc9:	0f b6 00             	movzbl (%eax),%eax
    2ccc:	0f be c0             	movsbl %al,%eax
    2ccf:	83 e8 20             	sub    $0x20,%eax
    2cd2:	83 f8 10             	cmp    $0x10,%eax
    2cd5:	77 27                	ja     2cfe <vsprintf+0x79>
    2cd7:	8b 04 85 a8 35 00 00 	mov    0x35a8(,%eax,4),%eax
    2cde:	ff e0                	jmp    *%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:130
				case '-': flags |= LEFT; goto repeat;
    2ce0:	83 4d ec 10          	orl    $0x10,-0x14(%ebp)
    2ce4:	eb d7                	jmp    2cbd <vsprintf+0x38>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:131
				case '+': flags |= PLUS; goto repeat;
    2ce6:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
    2cea:	eb d1                	jmp    2cbd <vsprintf+0x38>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:132
				case ' ': flags |= SPACE; goto repeat;
    2cec:	83 4d ec 08          	orl    $0x8,-0x14(%ebp)
    2cf0:	eb cb                	jmp    2cbd <vsprintf+0x38>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:133
				case '#': flags |= SPECIAL; goto repeat;
    2cf2:	83 4d ec 20          	orl    $0x20,-0x14(%ebp)
    2cf6:	eb c5                	jmp    2cbd <vsprintf+0x38>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:134
				case '0': flags |= ZEROPAD; goto repeat;
    2cf8:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
    2cfc:	eb bf                	jmp    2cbd <vsprintf+0x38>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:138
				}
		
		/* get field width */
		field_width = -1;
    2cfe:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:139
		if (is_digit(*fmt))
    2d05:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d08:	0f b6 00             	movzbl (%eax),%eax
    2d0b:	3c 2f                	cmp    $0x2f,%al
    2d0d:	7e 1b                	jle    2d2a <vsprintf+0xa5>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:139 (discriminator 1)
    2d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d12:	0f b6 00             	movzbl (%eax),%eax
    2d15:	3c 39                	cmp    $0x39,%al
    2d17:	7f 11                	jg     2d2a <vsprintf+0xa5>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:140
			field_width = skip_atoi(&fmt);
    2d19:	8d 45 0c             	lea    0xc(%ebp),%eax
    2d1c:	50                   	push   %eax
    2d1d:	e8 d3 fc ff ff       	call   29f5 <skip_atoi>
    2d22:	83 c4 04             	add    $0x4,%esp
    2d25:	89 45 e8             	mov    %eax,-0x18(%ebp)
    2d28:	eb 24                	jmp    2d4e <vsprintf+0xc9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:141
		else if (*fmt == '*') {
    2d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d2d:	0f b6 00             	movzbl (%eax),%eax
    2d30:	3c 2a                	cmp    $0x2a,%al
    2d32:	75 1a                	jne    2d4e <vsprintf+0xc9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:143
			/* it's the next argument */
			field_width = va_arg(args, int);
    2d34:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2d38:	8b 45 10             	mov    0x10(%ebp),%eax
    2d3b:	8b 40 fc             	mov    -0x4(%eax),%eax
    2d3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:144
			if (field_width < 0) {
    2d41:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    2d45:	79 07                	jns    2d4e <vsprintf+0xc9>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:145
				field_width = -field_width;
    2d47:	f7 5d e8             	negl   -0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:146
				flags |= LEFT;
    2d4a:	83 4d ec 10          	orl    $0x10,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:151
			}
		}

		/* get the precision */
		precision = -1;
    2d4e:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:152
		if (*fmt == '.') {
    2d55:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d58:	0f b6 00             	movzbl (%eax),%eax
    2d5b:	3c 2e                	cmp    $0x2e,%al
    2d5d:	75 52                	jne    2db1 <vsprintf+0x12c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:153
			++fmt;	
    2d5f:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d62:	83 c0 01             	add    $0x1,%eax
    2d65:	89 45 0c             	mov    %eax,0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:154
			if (is_digit(*fmt))
    2d68:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d6b:	0f b6 00             	movzbl (%eax),%eax
    2d6e:	3c 2f                	cmp    $0x2f,%al
    2d70:	7e 1b                	jle    2d8d <vsprintf+0x108>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:154 (discriminator 1)
    2d72:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d75:	0f b6 00             	movzbl (%eax),%eax
    2d78:	3c 39                	cmp    $0x39,%al
    2d7a:	7f 11                	jg     2d8d <vsprintf+0x108>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:155
				precision = skip_atoi(&fmt);
    2d7c:	8d 45 0c             	lea    0xc(%ebp),%eax
    2d7f:	50                   	push   %eax
    2d80:	e8 70 fc ff ff       	call   29f5 <skip_atoi>
    2d85:	83 c4 04             	add    $0x4,%esp
    2d88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    2d8b:	eb 17                	jmp    2da4 <vsprintf+0x11f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:156
			else if (*fmt == '*') {
    2d8d:	8b 45 0c             	mov    0xc(%ebp),%eax
    2d90:	0f b6 00             	movzbl (%eax),%eax
    2d93:	3c 2a                	cmp    $0x2a,%al
    2d95:	75 0d                	jne    2da4 <vsprintf+0x11f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:158
				/* it's the next argument */
				precision = va_arg(args, int);
    2d97:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2d9b:	8b 45 10             	mov    0x10(%ebp),%eax
    2d9e:	8b 40 fc             	mov    -0x4(%eax),%eax
    2da1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:160
			}
			if (precision < 0)
    2da4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
    2da8:	79 07                	jns    2db1 <vsprintf+0x12c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:161
				precision = 0;
    2daa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:165
		}

		/* get the conversion qualifier */
		qualifier = -1;
    2db1:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:166
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
    2db8:	8b 45 0c             	mov    0xc(%ebp),%eax
    2dbb:	0f b6 00             	movzbl (%eax),%eax
    2dbe:	3c 68                	cmp    $0x68,%al
    2dc0:	74 14                	je     2dd6 <vsprintf+0x151>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:166 (discriminator 1)
    2dc2:	8b 45 0c             	mov    0xc(%ebp),%eax
    2dc5:	0f b6 00             	movzbl (%eax),%eax
    2dc8:	3c 6c                	cmp    $0x6c,%al
    2dca:	74 0a                	je     2dd6 <vsprintf+0x151>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:166 (discriminator 2)
    2dcc:	8b 45 0c             	mov    0xc(%ebp),%eax
    2dcf:	0f b6 00             	movzbl (%eax),%eax
    2dd2:	3c 4c                	cmp    $0x4c,%al
    2dd4:	75 15                	jne    2deb <vsprintf+0x166>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:167
			qualifier = *fmt;
    2dd6:	8b 45 0c             	mov    0xc(%ebp),%eax
    2dd9:	0f b6 00             	movzbl (%eax),%eax
    2ddc:	0f be c0             	movsbl %al,%eax
    2ddf:	89 45 e0             	mov    %eax,-0x20(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:168
			++fmt;
    2de2:	8b 45 0c             	mov    0xc(%ebp),%eax
    2de5:	83 c0 01             	add    $0x1,%eax
    2de8:	89 45 0c             	mov    %eax,0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:171
		}

		switch (*fmt) {
    2deb:	8b 45 0c             	mov    0xc(%ebp),%eax
    2dee:	0f b6 00             	movzbl (%eax),%eax
    2df1:	0f be c0             	movsbl %al,%eax
    2df4:	83 e8 58             	sub    $0x58,%eax
    2df7:	83 f8 20             	cmp    $0x20,%eax
    2dfa:	0f 87 e7 01 00 00    	ja     2fe7 <vsprintf+0x362>
    2e00:	8b 04 85 ec 35 00 00 	mov    0x35ec(,%eax,4),%eax
    2e07:	ff e0                	jmp    *%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:173
		case 'c':
			if (!(flags & LEFT))
    2e09:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2e0c:	83 e0 10             	and    $0x10,%eax
    2e0f:	85 c0                	test   %eax,%eax
    2e11:	75 18                	jne    2e2b <vsprintf+0x1a6>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:174
				while (--field_width > 0)
    2e13:	eb 0c                	jmp    2e21 <vsprintf+0x19c>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:175
					*str++ = ' ';
    2e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2e18:	8d 50 01             	lea    0x1(%eax),%edx
    2e1b:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2e1e:	c6 00 20             	movb   $0x20,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:174
		}

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
    2e21:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
    2e25:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    2e29:	7f ea                	jg     2e15 <vsprintf+0x190>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:176
					*str++ = ' ';
			*str++ = (unsigned char) va_arg(args, int);
    2e2b:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2e32:	8d 50 01             	lea    0x1(%eax),%edx
    2e35:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2e38:	8b 55 10             	mov    0x10(%ebp),%edx
    2e3b:	83 ea 04             	sub    $0x4,%edx
    2e3e:	8b 12                	mov    (%edx),%edx
    2e40:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:177
			while (--field_width > 0)
    2e42:	eb 0c                	jmp    2e50 <vsprintf+0x1cb>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:178
				*str++ = ' ';
    2e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2e47:	8d 50 01             	lea    0x1(%eax),%edx
    2e4a:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2e4d:	c6 00 20             	movb   $0x20,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:177
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char) va_arg(args, int);
			while (--field_width > 0)
    2e50:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
    2e54:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
    2e58:	7f ea                	jg     2e44 <vsprintf+0x1bf>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:179
				*str++ = ' ';
			break;
    2e5a:	e9 c5 01 00 00       	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:182

		case 's':
			s = va_arg(args, char *);
    2e5f:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2e63:	8b 45 10             	mov    0x10(%ebp),%eax
    2e66:	8b 40 fc             	mov    -0x4(%eax),%eax
    2e69:	89 45 f0             	mov    %eax,-0x10(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:183
			len = strlen(s);
    2e6c:	ff 75 f0             	pushl  -0x10(%ebp)
    2e6f:	e8 4e 04 00 00       	call   32c2 <strlen>
    2e74:	83 c4 04             	add    $0x4,%esp
    2e77:	89 45 fc             	mov    %eax,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:184
			if (precision < 0)
    2e7a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
    2e7e:	79 08                	jns    2e88 <vsprintf+0x203>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:185
				precision = len;
    2e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
    2e83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    2e86:	eb 0e                	jmp    2e96 <vsprintf+0x211>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:186
			else if (len > precision)
    2e88:	8b 45 fc             	mov    -0x4(%ebp),%eax
    2e8b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
    2e8e:	7e 06                	jle    2e96 <vsprintf+0x211>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:187
				len = precision;
    2e90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
    2e93:	89 45 fc             	mov    %eax,-0x4(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:189

			if (!(flags & LEFT))
    2e96:	8b 45 ec             	mov    -0x14(%ebp),%eax
    2e99:	83 e0 10             	and    $0x10,%eax
    2e9c:	85 c0                	test   %eax,%eax
    2e9e:	75 1c                	jne    2ebc <vsprintf+0x237>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:190
				while (len < field_width--)
    2ea0:	eb 0c                	jmp    2eae <vsprintf+0x229>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:191
					*str++ = ' ';
    2ea2:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2ea5:	8d 50 01             	lea    0x1(%eax),%edx
    2ea8:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2eab:	c6 00 20             	movb   $0x20,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:190
				precision = len;
			else if (len > precision)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width--)
    2eae:	8b 45 e8             	mov    -0x18(%ebp),%eax
    2eb1:	8d 50 ff             	lea    -0x1(%eax),%edx
    2eb4:	89 55 e8             	mov    %edx,-0x18(%ebp)
    2eb7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
    2eba:	7f e6                	jg     2ea2 <vsprintf+0x21d>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:192
					*str++ = ' ';
			for (i = 0; i < len; ++i)
    2ebc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    2ec3:	eb 1b                	jmp    2ee0 <vsprintf+0x25b>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:193 (discriminator 3)
				*str++ = *s++;
    2ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2ec8:	8d 50 01             	lea    0x1(%eax),%edx
    2ecb:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2ece:	8b 55 f0             	mov    -0x10(%ebp),%edx
    2ed1:	8d 4a 01             	lea    0x1(%edx),%ecx
    2ed4:	89 4d f0             	mov    %ecx,-0x10(%ebp)
    2ed7:	0f b6 12             	movzbl (%edx),%edx
    2eda:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:192 (discriminator 3)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
    2edc:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:192 (discriminator 1)
    2ee0:	8b 45 f8             	mov    -0x8(%ebp),%eax
    2ee3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
    2ee6:	7c dd                	jl     2ec5 <vsprintf+0x240>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:194
				*str++ = *s++;
			while (len < field_width--)
    2ee8:	eb 0c                	jmp    2ef6 <vsprintf+0x271>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:195
				*str++ = ' ';
    2eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2eed:	8d 50 01             	lea    0x1(%eax),%edx
    2ef0:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2ef3:	c6 00 20             	movb   $0x20,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:194
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
    2ef6:	8b 45 e8             	mov    -0x18(%ebp),%eax
    2ef9:	8d 50 ff             	lea    -0x1(%eax),%edx
    2efc:	89 55 e8             	mov    %edx,-0x18(%ebp)
    2eff:	3b 45 fc             	cmp    -0x4(%ebp),%eax
    2f02:	7f e6                	jg     2eea <vsprintf+0x265>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:196
				*str++ = ' ';
			break;
    2f04:	e9 1b 01 00 00       	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:199

		case 'o':
			str = number(str, va_arg(args, unsigned long), 8,
    2f09:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2f0d:	8b 45 10             	mov    0x10(%ebp),%eax
    2f10:	83 e8 04             	sub    $0x4,%eax
    2f13:	8b 00                	mov    (%eax),%eax
    2f15:	ff 75 ec             	pushl  -0x14(%ebp)
    2f18:	ff 75 e4             	pushl  -0x1c(%ebp)
    2f1b:	ff 75 e8             	pushl  -0x18(%ebp)
    2f1e:	6a 08                	push   $0x8
    2f20:	50                   	push   %eax
    2f21:	ff 75 f4             	pushl  -0xc(%ebp)
    2f24:	e8 26 fb ff ff       	call   2a4f <number>
    2f29:	83 c4 18             	add    $0x18,%esp
    2f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:201
				field_width, precision, flags);
			break;
    2f2f:	e9 f0 00 00 00       	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:204

		case 'p':
			if (field_width == -1) {
    2f34:	83 7d e8 ff          	cmpl   $0xffffffff,-0x18(%ebp)
    2f38:	75 0b                	jne    2f45 <vsprintf+0x2c0>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:205
				field_width = 8;
    2f3a:	c7 45 e8 08 00 00 00 	movl   $0x8,-0x18(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:206
				flags |= ZEROPAD;
    2f41:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:209
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
    2f45:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2f49:	8b 45 10             	mov    0x10(%ebp),%eax
    2f4c:	83 e8 04             	sub    $0x4,%eax
    2f4f:	8b 00                	mov    (%eax),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:208
		case 'p':
			if (field_width == -1) {
				field_width = 8;
				flags |= ZEROPAD;
			}
			str = number(str,
    2f51:	ff 75 ec             	pushl  -0x14(%ebp)
    2f54:	ff 75 e4             	pushl  -0x1c(%ebp)
    2f57:	ff 75 e8             	pushl  -0x18(%ebp)
    2f5a:	6a 10                	push   $0x10
    2f5c:	50                   	push   %eax
    2f5d:	ff 75 f4             	pushl  -0xc(%ebp)
    2f60:	e8 ea fa ff ff       	call   2a4f <number>
    2f65:	83 c4 18             	add    $0x18,%esp
    2f68:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:211
				(unsigned long) va_arg(args, void *), 16,
				field_width, precision, flags);
			break;
    2f6b:	e9 b4 00 00 00       	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:214

		case 'x':
			flags |= SMALL;
    2f70:	83 4d ec 40          	orl    $0x40,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:216
		case 'X':
			str = number(str, va_arg(args, unsigned long), 16,
    2f74:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2f78:	8b 45 10             	mov    0x10(%ebp),%eax
    2f7b:	83 e8 04             	sub    $0x4,%eax
    2f7e:	8b 00                	mov    (%eax),%eax
    2f80:	ff 75 ec             	pushl  -0x14(%ebp)
    2f83:	ff 75 e4             	pushl  -0x1c(%ebp)
    2f86:	ff 75 e8             	pushl  -0x18(%ebp)
    2f89:	6a 10                	push   $0x10
    2f8b:	50                   	push   %eax
    2f8c:	ff 75 f4             	pushl  -0xc(%ebp)
    2f8f:	e8 bb fa ff ff       	call   2a4f <number>
    2f94:	83 c4 18             	add    $0x18,%esp
    2f97:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:218
				field_width, precision, flags);
			break;
    2f9a:	e9 85 00 00 00       	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:222

		case 'd':
		case 'i':
			flags |= SIGN;
    2f9f:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:224
		case 'u':
			str = number(str, va_arg(args, unsigned long), 10,
    2fa3:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2fa7:	8b 45 10             	mov    0x10(%ebp),%eax
    2faa:	83 e8 04             	sub    $0x4,%eax
    2fad:	8b 00                	mov    (%eax),%eax
    2faf:	ff 75 ec             	pushl  -0x14(%ebp)
    2fb2:	ff 75 e4             	pushl  -0x1c(%ebp)
    2fb5:	ff 75 e8             	pushl  -0x18(%ebp)
    2fb8:	6a 0a                	push   $0xa
    2fba:	50                   	push   %eax
    2fbb:	ff 75 f4             	pushl  -0xc(%ebp)
    2fbe:	e8 8c fa ff ff       	call   2a4f <number>
    2fc3:	83 c4 18             	add    $0x18,%esp
    2fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:226
				field_width, precision, flags);
			break;
    2fc9:	eb 59                	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:229

		case 'n':
			ip = va_arg(args, int *);
    2fcb:	83 45 10 04          	addl   $0x4,0x10(%ebp)
    2fcf:	8b 45 10             	mov    0x10(%ebp),%eax
    2fd2:	8b 40 fc             	mov    -0x4(%eax),%eax
    2fd5:	89 45 dc             	mov    %eax,-0x24(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:230
			*ip = (str - buf);
    2fd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
    2fdb:	8b 45 08             	mov    0x8(%ebp),%eax
    2fde:	29 c2                	sub    %eax,%edx
    2fe0:	8b 45 dc             	mov    -0x24(%ebp),%eax
    2fe3:	89 10                	mov    %edx,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:231
			break;
    2fe5:	eb 3d                	jmp    3024 <vsprintf+0x39f>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:234

		default:
			if (*fmt != '%')
    2fe7:	8b 45 0c             	mov    0xc(%ebp),%eax
    2fea:	0f b6 00             	movzbl (%eax),%eax
    2fed:	3c 25                	cmp    $0x25,%al
    2fef:	74 0c                	je     2ffd <vsprintf+0x378>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:235
				*str++ = '%';
    2ff1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    2ff4:	8d 50 01             	lea    0x1(%eax),%edx
    2ff7:	89 55 f4             	mov    %edx,-0xc(%ebp)
    2ffa:	c6 00 25             	movb   $0x25,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:236
			if (*fmt)
    2ffd:	8b 45 0c             	mov    0xc(%ebp),%eax
    3000:	0f b6 00             	movzbl (%eax),%eax
    3003:	84 c0                	test   %al,%al
    3005:	74 13                	je     301a <vsprintf+0x395>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:237
				*str++ = *fmt;
    3007:	8b 45 f4             	mov    -0xc(%ebp),%eax
    300a:	8d 50 01             	lea    0x1(%eax),%edx
    300d:	89 55 f4             	mov    %edx,-0xc(%ebp)
    3010:	8b 55 0c             	mov    0xc(%ebp),%edx
    3013:	0f b6 12             	movzbl (%edx),%edx
    3016:	88 10                	mov    %dl,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:240
			else
				--fmt;
			break;
    3018:	eb 09                	jmp    3023 <vsprintf+0x39e>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:239
			if (*fmt != '%')
				*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
    301a:	8b 45 0c             	mov    0xc(%ebp),%eax
    301d:	83 e8 01             	sub    $0x1,%eax
    3020:	89 45 0c             	mov    %eax,0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:240
			break;
    3023:	90                   	nop
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
    3024:	8b 45 0c             	mov    0xc(%ebp),%eax
    3027:	83 c0 01             	add    $0x1,%eax
    302a:	89 45 0c             	mov    %eax,0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:119 (discriminator 1)
    302d:	8b 45 0c             	mov    0xc(%ebp),%eax
    3030:	0f b6 00             	movzbl (%eax),%eax
    3033:	84 c0                	test   %al,%al
    3035:	0f 85 5b fc ff ff    	jne    2c96 <vsprintf+0x11>
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:243
			else
				--fmt;
			break;
		}
	}
	*str = '\0';
    303b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    303e:	c6 00 00             	movb   $0x0,(%eax)
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:244
	return str-buf;
    3041:	8b 55 f4             	mov    -0xc(%ebp),%edx
    3044:	8b 45 08             	mov    0x8(%ebp),%eax
    3047:	29 c2                	sub    %eax,%edx
    3049:	89 d0                	mov    %edx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/kernel/vsprintf.c:245
}
    304b:	c9                   	leave  
    304c:	c3                   	ret    

0000304d <strcpy>:
strcpy():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:17
#define static
#define __LIBRARY__
#include "../include/string.h"

char * strcpy(char * dest,const char *src)
{
    304d:	55                   	push   %ebp
    304e:	89 e5                	mov    %esp,%ebp
    3050:	57                   	push   %edi
    3051:	56                   	push   %esi
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:18
        __asm__("cld\n"
    3052:	8b 45 0c             	mov    0xc(%ebp),%eax
    3055:	8b 55 08             	mov    0x8(%ebp),%edx
    3058:	89 c6                	mov    %eax,%esi
    305a:	89 d7                	mov    %edx,%edi
    305c:	fc                   	cld    
    305d:	ac                   	lods   %ds:(%esi),%al
    305e:	aa                   	stos   %al,%es:(%edi)
    305f:	84 c0                	test   %al,%al
    3061:	75 fa                	jne    305d <strcpy+0x10>
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:24
                "1:\tlodsb\n\t"
                "stosb\n\t"
                "testb %%al,%%al\n\t"
                "jne 1b"
                ::"S" (src),"D" (dest));
        return dest;
    3063:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:25
}
    3066:	5e                   	pop    %esi
    3067:	5f                   	pop    %edi
    3068:	5d                   	pop    %ebp
    3069:	c3                   	ret    

0000306a <strncpy>:
strncpy():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:28

static char * strncpy(char * dest,const char *src,int count)
{
    306a:	55                   	push   %ebp
    306b:	89 e5                	mov    %esp,%ebp
    306d:	57                   	push   %edi
    306e:	56                   	push   %esi
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:29
        __asm__("cld\n"
    306f:	8b 45 0c             	mov    0xc(%ebp),%eax
    3072:	8b 55 08             	mov    0x8(%ebp),%edx
    3075:	8b 4d 10             	mov    0x10(%ebp),%ecx
    3078:	89 c6                	mov    %eax,%esi
    307a:	89 d7                	mov    %edx,%edi
    307c:	fc                   	cld    
    307d:	49                   	dec    %ecx
    307e:	78 08                	js     3088 <strncpy+0x1e>
    3080:	ac                   	lods   %ds:(%esi),%al
    3081:	aa                   	stos   %al,%es:(%edi)
    3082:	84 c0                	test   %al,%al
    3084:	75 f7                	jne    307d <strncpy+0x13>
    3086:	f3 aa                	rep stos %al,%es:(%edi)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:40
                "jne 1b\n\t"
                "rep\n\t"
                "stosb\n"
                "2:"
                ::"S" (src),"D" (dest),"c" (count));
        return dest;
    3088:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:41
}
    308b:	5e                   	pop    %esi
    308c:	5f                   	pop    %edi
    308d:	5d                   	pop    %ebp
    308e:	c3                   	ret    

0000308f <strcat>:
strcat():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:44

char * strcat(char * dest,const char * src)
{
    308f:	55                   	push   %ebp
    3090:	89 e5                	mov    %esp,%ebp
    3092:	57                   	push   %edi
    3093:	56                   	push   %esi
    3094:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:45
        __asm__("cld\n\t"
    3095:	8b 55 0c             	mov    0xc(%ebp),%edx
    3098:	8b 5d 08             	mov    0x8(%ebp),%ebx
    309b:	b8 00 00 00 00       	mov    $0x0,%eax
    30a0:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    30a5:	89 d6                	mov    %edx,%esi
    30a7:	89 df                	mov    %ebx,%edi
    30a9:	fc                   	cld    
    30aa:	f2 ae                	repnz scas %es:(%edi),%al
    30ac:	4f                   	dec    %edi
    30ad:	ac                   	lods   %ds:(%esi),%al
    30ae:	aa                   	stos   %al,%es:(%edi)
    30af:	84 c0                	test   %al,%al
    30b1:	75 fa                	jne    30ad <strcat+0x1e>
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:54
                "1:\tlodsb\n\t"
                "stosb\n\t"
                "testb %%al,%%al\n\t"
                "jne 1b"
                ::"S" (src),"D" (dest),"a" (0),"c" (0xffffffff));
        return dest;
    30b3:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:55
}
    30b6:	5b                   	pop    %ebx
    30b7:	5e                   	pop    %esi
    30b8:	5f                   	pop    %edi
    30b9:	5d                   	pop    %ebp
    30ba:	c3                   	ret    

000030bb <strncat>:
strncat():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:58

static char * strncat(char * dest,const char * src,int count)
{
    30bb:	55                   	push   %ebp
    30bc:	89 e5                	mov    %esp,%ebp
    30be:	57                   	push   %edi
    30bf:	56                   	push   %esi
    30c0:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:59
        __asm__("cld\n\t"
    30c1:	8b 55 0c             	mov    0xc(%ebp),%edx
    30c4:	8b 5d 08             	mov    0x8(%ebp),%ebx
    30c7:	b8 00 00 00 00       	mov    $0x0,%eax
    30cc:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    30d1:	89 d6                	mov    %edx,%esi
    30d3:	89 df                	mov    %ebx,%edi
    30d5:	fc                   	cld    
    30d6:	f2 ae                	repnz scas %es:(%edi),%al
    30d8:	4f                   	dec    %edi
    30d9:	8b 4d 10             	mov    0x10(%ebp),%ecx
    30dc:	49                   	dec    %ecx
    30dd:	78 06                	js     30e5 <strncat+0x2a>
    30df:	ac                   	lods   %ds:(%esi),%al
    30e0:	aa                   	stos   %al,%es:(%edi)
    30e1:	84 c0                	test   %al,%al
    30e3:	75 f7                	jne    30dc <strncat+0x21>
    30e5:	31 c0                	xor    %eax,%eax
    30e7:	aa                   	stos   %al,%es:(%edi)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:74
                "jne 1b\n"
                "2:\txorl %2,%2\n\t"
                "stosb"
                ::"S" (src),"D" (dest),"a" (0),"c" (0xffffffff),"g" (count)
                );
        return dest;
    30e8:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:75
}
    30eb:	5b                   	pop    %ebx
    30ec:	5e                   	pop    %esi
    30ed:	5f                   	pop    %edi
    30ee:	5d                   	pop    %ebp
    30ef:	c3                   	ret    

000030f0 <strcmp>:
strcmp():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:78

int strcmp(const char * cs,const char * ct)
{
    30f0:	55                   	push   %ebp
    30f1:	89 e5                	mov    %esp,%ebp
    30f3:	57                   	push   %edi
    30f4:	56                   	push   %esi
    30f5:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:80
        register int __res ;
        __asm__("cld\n"
    30f6:	8b 45 08             	mov    0x8(%ebp),%eax
    30f9:	8b 55 0c             	mov    0xc(%ebp),%edx
    30fc:	89 c7                	mov    %eax,%edi
    30fe:	89 d6                	mov    %edx,%esi
    3100:	fc                   	cld    
    3101:	ac                   	lods   %ds:(%esi),%al
    3102:	ae                   	scas   %es:(%edi),%al
    3103:	75 08                	jne    310d <strcmp+0x1d>
    3105:	84 c0                	test   %al,%al
    3107:	75 f8                	jne    3101 <strcmp+0x11>
    3109:	31 c0                	xor    %eax,%eax
    310b:	eb 09                	jmp    3116 <strcmp+0x26>
    310d:	b8 01 00 00 00       	mov    $0x1,%eax
    3112:	7c 02                	jl     3116 <strcmp+0x26>
    3114:	f7 d8                	neg    %eax
    3116:	89 c3                	mov    %eax,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:93
                "2:\tmovl $1,%%eax\n\t"
                "jl 3f\n\t"
                "negl %%eax\n"
                "3:"
                :"=a" (__res):"D" (cs),"S" (ct));
        return __res;
    3118:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:94
}
    311a:	5b                   	pop    %ebx
    311b:	5e                   	pop    %esi
    311c:	5f                   	pop    %edi
    311d:	5d                   	pop    %ebp
    311e:	c3                   	ret    

0000311f <strncmp>:
strncmp():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:98


static int strncmp(const char * cs,const char * ct,int count)
{
    311f:	55                   	push   %ebp
    3120:	89 e5                	mov    %esp,%ebp
    3122:	57                   	push   %edi
    3123:	56                   	push   %esi
    3124:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:100
        register int __res ;
        __asm__("cld\n"
    3125:	8b 45 08             	mov    0x8(%ebp),%eax
    3128:	8b 55 0c             	mov    0xc(%ebp),%edx
    312b:	8b 4d 10             	mov    0x10(%ebp),%ecx
    312e:	89 c7                	mov    %eax,%edi
    3130:	89 d6                	mov    %edx,%esi
    3132:	fc                   	cld    
    3133:	49                   	dec    %ecx
    3134:	78 08                	js     313e <strncmp+0x1f>
    3136:	ac                   	lods   %ds:(%esi),%al
    3137:	ae                   	scas   %es:(%edi),%al
    3138:	75 08                	jne    3142 <strncmp+0x23>
    313a:	84 c0                	test   %al,%al
    313c:	75 f5                	jne    3133 <strncmp+0x14>
    313e:	31 c0                	xor    %eax,%eax
    3140:	eb 09                	jmp    314b <strncmp+0x2c>
    3142:	b8 01 00 00 00       	mov    $0x1,%eax
    3147:	7c 02                	jl     314b <strncmp+0x2c>
    3149:	f7 d8                	neg    %eax
    314b:	89 c3                	mov    %eax,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:115
                "3:\tmovl $1,%%eax\n\t"
                "jl 4f\n\t"
                "negl %%eax\n"
                "4:"
                :"=a" (__res):"D" (cs),"S" (ct),"c" (count));
        return __res;
    314d:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:116
}
    314f:	5b                   	pop    %ebx
    3150:	5e                   	pop    %esi
    3151:	5f                   	pop    %edi
    3152:	5d                   	pop    %ebp
    3153:	c3                   	ret    

00003154 <strchr>:
strchr():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:119

static char * strchr(const char * s,char c)
{
    3154:	55                   	push   %ebp
    3155:	89 e5                	mov    %esp,%ebp
    3157:	56                   	push   %esi
    3158:	53                   	push   %ebx
    3159:	83 ec 04             	sub    $0x4,%esp
    315c:	8b 45 0c             	mov    0xc(%ebp),%eax
    315f:	88 45 f4             	mov    %al,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:121
        register char * __res ;
        __asm__("cld\n\t"
    3162:	8b 55 08             	mov    0x8(%ebp),%edx
    3165:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
    3169:	89 d6                	mov    %edx,%esi
    316b:	fc                   	cld    
    316c:	88 c4                	mov    %al,%ah
    316e:	ac                   	lods   %ds:(%esi),%al
    316f:	38 e0                	cmp    %ah,%al
    3171:	74 09                	je     317c <strchr+0x28>
    3173:	84 c0                	test   %al,%al
    3175:	75 f7                	jne    316e <strchr+0x1a>
    3177:	be 01 00 00 00       	mov    $0x1,%esi
    317c:	89 f0                	mov    %esi,%eax
    317e:	48                   	dec    %eax
    317f:	89 c3                	mov    %eax,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:132
                "jne 1b\n\t"
                "movl $1,%1\n"
                "2:\tmovl %1,%0\n\t"
                "decl %0"
                :"=a" (__res):"S" (s),"0" (c));
        return __res;
    3181:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:133
}
    3183:	83 c4 04             	add    $0x4,%esp
    3186:	5b                   	pop    %ebx
    3187:	5e                   	pop    %esi
    3188:	5d                   	pop    %ebp
    3189:	c3                   	ret    

0000318a <strrchr>:
strrchr():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:136

static char * strrchr(const char * s,char c)
{
    318a:	55                   	push   %ebp
    318b:	89 e5                	mov    %esp,%ebp
    318d:	56                   	push   %esi
    318e:	53                   	push   %ebx
    318f:	83 ec 04             	sub    $0x4,%esp
    3192:	8b 45 0c             	mov    0xc(%ebp),%eax
    3195:	88 45 f4             	mov    %al,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:138
        register char * __res; 
        __asm__("cld\n\t"
    3198:	ba 00 00 00 00       	mov    $0x0,%edx
    319d:	8b 4d 08             	mov    0x8(%ebp),%ecx
    31a0:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
    31a4:	89 ce                	mov    %ecx,%esi
    31a6:	fc                   	cld    
    31a7:	88 c4                	mov    %al,%ah
    31a9:	ac                   	lods   %ds:(%esi),%al
    31aa:	38 e0                	cmp    %ah,%al
    31ac:	75 03                	jne    31b1 <strrchr+0x27>
    31ae:	89 f2                	mov    %esi,%edx
    31b0:	4a                   	dec    %edx
    31b1:	84 c0                	test   %al,%al
    31b3:	75 f4                	jne    31a9 <strrchr+0x1f>
    31b5:	89 d3                	mov    %edx,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:148
                "movl %%esi,%0\n\t"
                "decl %0\n"
                "2:\ttestb %%al,%%al\n\t"
                "jne 1b"
                :"=d" (__res):"0" (0),"S" (s),"a" (c));
        return __res;
    31b7:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:149
}
    31b9:	83 c4 04             	add    $0x4,%esp
    31bc:	5b                   	pop    %ebx
    31bd:	5e                   	pop    %esi
    31be:	5d                   	pop    %ebp
    31bf:	c3                   	ret    

000031c0 <strspn>:
strspn():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:152

 int strspn(const char * cs, const char * ct)
{
    31c0:	55                   	push   %ebp
    31c1:	89 e5                	mov    %esp,%ebp
    31c3:	56                   	push   %esi
    31c4:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:154
        register char * __res;
        __asm__("cld\n\t"
    31c5:	bb 00 00 00 00       	mov    $0x0,%ebx
    31ca:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    31cf:	8b 45 08             	mov    0x8(%ebp),%eax
    31d2:	89 c2                	mov    %eax,%edx
    31d4:	89 d6                	mov    %edx,%esi
    31d6:	89 d8                	mov    %ebx,%eax
    31d8:	fc                   	cld    
    31d9:	8b 7d 0c             	mov    0xc(%ebp),%edi
    31dc:	f2 ae                	repnz scas %es:(%edi),%al
    31de:	f7 d1                	not    %ecx
    31e0:	49                   	dec    %ecx
    31e1:	89 ca                	mov    %ecx,%edx
    31e3:	ac                   	lods   %ds:(%esi),%al
    31e4:	84 c0                	test   %al,%al
    31e6:	74 09                	je     31f1 <strspn+0x31>
    31e8:	8b 7d 0c             	mov    0xc(%ebp),%edi
    31eb:	89 d1                	mov    %edx,%ecx
    31ed:	f2 ae                	repnz scas %es:(%edi),%al
    31ef:	74 f2                	je     31e3 <strspn+0x23>
    31f1:	4e                   	dec    %esi
    31f2:	89 f2                	mov    %esi,%edx
    31f4:	89 d3                	mov    %edx,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:172
                "scasb\n\t"
                "je 1b\n"
                "2:\tdecl %0"
                :"=S" (__res):"a" (0),"c" (0xffffffff),"0" (cs),"g" (ct)
                );
        return __res-cs;
    31f6:	89 da                	mov    %ebx,%edx
    31f8:	8b 45 08             	mov    0x8(%ebp),%eax
    31fb:	29 c2                	sub    %eax,%edx
    31fd:	89 d0                	mov    %edx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:173
}
    31ff:	5b                   	pop    %ebx
    3200:	5e                   	pop    %esi
    3201:	5d                   	pop    %ebp
    3202:	c3                   	ret    

00003203 <strcspn>:
strcspn():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:176

int strcspn(const char * cs, const char * ct)
{
    3203:	55                   	push   %ebp
    3204:	89 e5                	mov    %esp,%ebp
    3206:	56                   	push   %esi
    3207:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:178
        register char * __res;
        __asm__("cld\n\t"
    3208:	bb 00 00 00 00       	mov    $0x0,%ebx
    320d:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    3212:	8b 45 08             	mov    0x8(%ebp),%eax
    3215:	89 c2                	mov    %eax,%edx
    3217:	89 d6                	mov    %edx,%esi
    3219:	89 d8                	mov    %ebx,%eax
    321b:	fc                   	cld    
    321c:	8b 7d 0c             	mov    0xc(%ebp),%edi
    321f:	f2 ae                	repnz scas %es:(%edi),%al
    3221:	f7 d1                	not    %ecx
    3223:	49                   	dec    %ecx
    3224:	89 ca                	mov    %ecx,%edx
    3226:	ac                   	lods   %ds:(%esi),%al
    3227:	84 c0                	test   %al,%al
    3229:	74 09                	je     3234 <strcspn+0x31>
    322b:	8b 7d 0c             	mov    0xc(%ebp),%edi
    322e:	89 d1                	mov    %edx,%ecx
    3230:	f2 ae                	repnz scas %es:(%edi),%al
    3232:	75 f2                	jne    3226 <strcspn+0x23>
    3234:	4e                   	dec    %esi
    3235:	89 f2                	mov    %esi,%edx
    3237:	89 d3                	mov    %edx,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:196
                "scasb\n\t"
                "jne 1b\n"
                "2:\tdecl %0"
                :"=S" (__res):"a" (0),"c" (0xffffffff),"0" (cs),"g" (ct)
                );
        return __res-cs;
    3239:	89 da                	mov    %ebx,%edx
    323b:	8b 45 08             	mov    0x8(%ebp),%eax
    323e:	29 c2                	sub    %eax,%edx
    3240:	89 d0                	mov    %edx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:197
}
    3242:	5b                   	pop    %ebx
    3243:	5e                   	pop    %esi
    3244:	5d                   	pop    %ebp
    3245:	c3                   	ret    

00003246 <strpbrk>:
strpbrk():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:200

 char * strpbrk(const char * cs,const char * ct)
{
    3246:	55                   	push   %ebp
    3247:	89 e5                	mov    %esp,%ebp
    3249:	56                   	push   %esi
    324a:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:202
        register char * __res ;
        __asm__("cld\n\t"
    324b:	bb 00 00 00 00       	mov    $0x0,%ebx
    3250:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    3255:	8b 45 08             	mov    0x8(%ebp),%eax
    3258:	89 c2                	mov    %eax,%edx
    325a:	89 d6                	mov    %edx,%esi
    325c:	89 d8                	mov    %ebx,%eax
    325e:	fc                   	cld    
    325f:	8b 7d 0c             	mov    0xc(%ebp),%edi
    3262:	f2 ae                	repnz scas %es:(%edi),%al
    3264:	f7 d1                	not    %ecx
    3266:	49                   	dec    %ecx
    3267:	89 ca                	mov    %ecx,%edx
    3269:	ac                   	lods   %ds:(%esi),%al
    326a:	84 c0                	test   %al,%al
    326c:	74 0c                	je     327a <strpbrk+0x34>
    326e:	8b 7d 0c             	mov    0xc(%ebp),%edi
    3271:	89 d1                	mov    %edx,%ecx
    3273:	f2 ae                	repnz scas %es:(%edi),%al
    3275:	75 f2                	jne    3269 <strpbrk+0x23>
    3277:	4e                   	dec    %esi
    3278:	eb 02                	jmp    327c <strpbrk+0x36>
    327a:	31 f6                	xor    %esi,%esi
    327c:	89 f2                	mov    %esi,%edx
    327e:	89 d3                	mov    %edx,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:223
                "jmp 3f\n"
                "2:\txorl %0,%0\n"
                "3:"
                :"=S" (__res):"a" (0),"c" (0xffffffff),"0" (cs),"g" (ct)
                );
        return __res;
    3280:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:224
}
    3282:	5b                   	pop    %ebx
    3283:	5e                   	pop    %esi
    3284:	5d                   	pop    %ebp
    3285:	c3                   	ret    

00003286 <strstr>:
strstr():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:227

 char * strstr(const char * cs,const char * ct)
{
    3286:	55                   	push   %ebp
    3287:	89 e5                	mov    %esp,%ebp
    3289:	56                   	push   %esi
    328a:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:229
        register char * __res ;
        __asm__("cld\n\t" \
    328b:	b8 00 00 00 00       	mov    $0x0,%eax
    3290:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    3295:	8b 55 08             	mov    0x8(%ebp),%edx
    3298:	89 d6                	mov    %edx,%esi
    329a:	fc                   	cld    
    329b:	8b 7d 0c             	mov    0xc(%ebp),%edi
    329e:	f2 ae                	repnz scas %es:(%edi),%al
    32a0:	f7 d1                	not    %ecx
    32a2:	49                   	dec    %ecx
    32a3:	89 ca                	mov    %ecx,%edx
    32a5:	8b 7d 0c             	mov    0xc(%ebp),%edi
    32a8:	89 f0                	mov    %esi,%eax
    32aa:	89 d1                	mov    %edx,%ecx
    32ac:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
    32ae:	74 0a                	je     32ba <strstr+0x34>
    32b0:	96                   	xchg   %eax,%esi
    32b1:	46                   	inc    %esi
    32b2:	80 78 ff 00          	cmpb   $0x0,-0x1(%eax)
    32b6:	75 ed                	jne    32a5 <strstr+0x1f>
    32b8:	31 c0                	xor    %eax,%eax
    32ba:	89 c3                	mov    %eax,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:250
                "jne 1b\n\t"
                "xorl %%eax,%%eax\n\t"
                "2:"
                :"=a" (__res):"0" (0),"c" (0xffffffff),"S" (cs),"g" (ct)
                );
        return __res;
    32bc:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:251
}
    32be:	5b                   	pop    %ebx
    32bf:	5e                   	pop    %esi
    32c0:	5d                   	pop    %ebp
    32c1:	c3                   	ret    

000032c2 <strlen>:
strlen():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:254

 int strlen(const char * s)
{
    32c2:	55                   	push   %ebp
    32c3:	89 e5                	mov    %esp,%ebp
    32c5:	57                   	push   %edi
    32c6:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:256
        register int __res ;
        __asm__("cld\n\t"
    32c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
    32ca:	b8 00 00 00 00       	mov    $0x0,%eax
    32cf:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    32d4:	89 d1                	mov    %edx,%ecx
    32d6:	89 df                	mov    %ebx,%edi
    32d8:	fc                   	cld    
    32d9:	f2 ae                	repnz scas %es:(%edi),%al
    32db:	f7 d1                	not    %ecx
    32dd:	49                   	dec    %ecx
    32de:	89 ca                	mov    %ecx,%edx
    32e0:	89 d3                	mov    %edx,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:262
                "repne\n\t"
                "scasb\n\t"
                "notl %0\n\t"
                "decl %0"
                :"=c" (__res):"D" (s),"a" (0),"0" (0xffffffff));
        return __res;
    32e2:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:263
}
    32e4:	5b                   	pop    %ebx
    32e5:	5f                   	pop    %edi
    32e6:	5d                   	pop    %ebp
    32e7:	c3                   	ret    

000032e8 <strtok>:
strtok():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:266

 char * strtok(char * s,const char * ct)
{
    32e8:	55                   	push   %ebp
    32e9:	89 e5                	mov    %esp,%ebp
    32eb:	56                   	push   %esi
    32ec:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:268
        register char * __res ;
        __asm__("testl %1,%1\n\t"
    32ed:	8b 15 80 62 01 00    	mov    0x16280,%edx
    32f3:	8b 45 08             	mov    0x8(%ebp),%eax
    32f6:	89 d3                	mov    %edx,%ebx
    32f8:	89 c6                	mov    %eax,%esi
    32fa:	85 f6                	test   %esi,%esi
    32fc:	75 06                	jne    3304 <strtok+0x1c>
    32fe:	85 db                	test   %ebx,%ebx
    3300:	74 57                	je     3359 <strtok+0x71>
    3302:	89 de                	mov    %ebx,%esi
    3304:	31 db                	xor    %ebx,%ebx
    3306:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    330b:	31 c0                	xor    %eax,%eax
    330d:	fc                   	cld    
    330e:	8b 7d 0c             	mov    0xc(%ebp),%edi
    3311:	f2 ae                	repnz scas %es:(%edi),%al
    3313:	f7 d1                	not    %ecx
    3315:	49                   	dec    %ecx
    3316:	74 3b                	je     3353 <strtok+0x6b>
    3318:	89 ca                	mov    %ecx,%edx
    331a:	ac                   	lods   %ds:(%esi),%al
    331b:	84 c0                	test   %al,%al
    331d:	74 34                	je     3353 <strtok+0x6b>
    331f:	8b 7d 0c             	mov    0xc(%ebp),%edi
    3322:	89 d1                	mov    %edx,%ecx
    3324:	f2 ae                	repnz scas %es:(%edi),%al
    3326:	74 f2                	je     331a <strtok+0x32>
    3328:	4e                   	dec    %esi
    3329:	80 3e 00             	cmpb   $0x0,(%esi)
    332c:	74 25                	je     3353 <strtok+0x6b>
    332e:	89 f3                	mov    %esi,%ebx
    3330:	ac                   	lods   %ds:(%esi),%al
    3331:	84 c0                	test   %al,%al
    3333:	74 15                	je     334a <strtok+0x62>
    3335:	8b 7d 0c             	mov    0xc(%ebp),%edi
    3338:	89 d1                	mov    %edx,%ecx
    333a:	f2 ae                	repnz scas %es:(%edi),%al
    333c:	75 f2                	jne    3330 <strtok+0x48>
    333e:	4e                   	dec    %esi
    333f:	80 3e 00             	cmpb   $0x0,(%esi)
    3342:	74 06                	je     334a <strtok+0x62>
    3344:	c6 06 00             	movb   $0x0,(%esi)
    3347:	46                   	inc    %esi
    3348:	eb 02                	jmp    334c <strtok+0x64>
    334a:	31 f6                	xor    %esi,%esi
    334c:	80 3b 00             	cmpb   $0x0,(%ebx)
    334f:	75 02                	jne    3353 <strtok+0x6b>
    3351:	31 db                	xor    %ebx,%ebx
    3353:	85 db                	test   %ebx,%ebx
    3355:	75 02                	jne    3359 <strtok+0x71>
    3357:	89 de                	mov    %ebx,%esi
    3359:	89 f0                	mov    %esi,%eax
    335b:	89 da                	mov    %ebx,%edx
    335d:	89 d3                	mov    %edx,%ebx
    335f:	a3 80 62 01 00       	mov    %eax,0x16280
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:321
                "movl %0,%1\n"
                "8:"
                :"=b" (__res),"=S" (___strtok)
                :"0" (___strtok),"1" (s),"g" (ct)
                );
        return __res;
    3364:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:322
}
    3366:	5b                   	pop    %ebx
    3367:	5e                   	pop    %esi
    3368:	5d                   	pop    %ebp
    3369:	c3                   	ret    

0000336a <memcpy>:
memcpy():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:325

 void * memcpy(void * dest,const void * src, int n)
{
    336a:	55                   	push   %ebp
    336b:	89 e5                	mov    %esp,%ebp
    336d:	57                   	push   %edi
    336e:	56                   	push   %esi
    336f:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:326
        __asm__ ("cld\n\t"
    3370:	8b 45 10             	mov    0x10(%ebp),%eax
    3373:	8b 55 0c             	mov    0xc(%ebp),%edx
    3376:	8b 5d 08             	mov    0x8(%ebp),%ebx
    3379:	89 c1                	mov    %eax,%ecx
    337b:	89 d6                	mov    %edx,%esi
    337d:	89 df                	mov    %ebx,%edi
    337f:	fc                   	cld    
    3380:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:331
                 "rep\n\t"
                 "movsb"
                 ::"c" (n),"S" (src),"D" (dest)
                );
        return dest;
    3382:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:332
}
    3385:	5b                   	pop    %ebx
    3386:	5e                   	pop    %esi
    3387:	5f                   	pop    %edi
    3388:	5d                   	pop    %ebp
    3389:	c3                   	ret    

0000338a <memmove>:
memmove():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:335

 void * memmove(void * dest,const void * src, int n)
{
    338a:	55                   	push   %ebp
    338b:	89 e5                	mov    %esp,%ebp
    338d:	57                   	push   %edi
    338e:	56                   	push   %esi
    338f:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:336
        if (dest<src)
    3390:	8b 45 08             	mov    0x8(%ebp),%eax
    3393:	3b 45 0c             	cmp    0xc(%ebp),%eax
    3396:	73 14                	jae    33ac <memmove+0x22>
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:337
                __asm__("cld\n\t"
    3398:	8b 45 10             	mov    0x10(%ebp),%eax
    339b:	8b 55 0c             	mov    0xc(%ebp),%edx
    339e:	8b 5d 08             	mov    0x8(%ebp),%ebx
    33a1:	89 c1                	mov    %eax,%ecx
    33a3:	89 d6                	mov    %edx,%esi
    33a5:	89 df                	mov    %ebx,%edi
    33a7:	fc                   	cld    
    33a8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
    33aa:	eb 23                	jmp    33cf <memmove+0x45>
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:346
                        );
        else
                __asm__("std\n\t"
                        "rep\n\t"
                        "movsb"
                        ::"c" (n),"S" (src+n-1),"D" (dest+n-1)
    33ac:	8b 45 10             	mov    0x10(%ebp),%eax
    33af:	8d 50 ff             	lea    -0x1(%eax),%edx
    33b2:	8b 45 0c             	mov    0xc(%ebp),%eax
    33b5:	01 c2                	add    %eax,%edx
    33b7:	8b 45 10             	mov    0x10(%ebp),%eax
    33ba:	8d 48 ff             	lea    -0x1(%eax),%ecx
    33bd:	8b 45 08             	mov    0x8(%ebp),%eax
    33c0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:343
                        "rep\n\t"
                        "movsb"
                        ::"c" (n),"S" (src),"D" (dest)
                        );
        else
                __asm__("std\n\t"
    33c3:	8b 45 10             	mov    0x10(%ebp),%eax
    33c6:	89 c1                	mov    %eax,%ecx
    33c8:	89 d6                	mov    %edx,%esi
    33ca:	89 df                	mov    %ebx,%edi
    33cc:	fd                   	std    
    33cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:348
                        "rep\n\t"
                        "movsb"
                        ::"c" (n),"S" (src+n-1),"D" (dest+n-1)
                        );
        return dest;
    33cf:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:349
}
    33d2:	5b                   	pop    %ebx
    33d3:	5e                   	pop    %esi
    33d4:	5f                   	pop    %edi
    33d5:	5d                   	pop    %ebp
    33d6:	c3                   	ret    

000033d7 <memcmp>:
memcmp():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:352

static  int memcmp(const void * cs,const void * ct,int count)
{
    33d7:	55                   	push   %ebp
    33d8:	89 e5                	mov    %esp,%ebp
    33da:	57                   	push   %edi
    33db:	56                   	push   %esi
    33dc:	53                   	push   %ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:354
        register int __res ;
        __asm__("cld\n\t"
    33dd:	b8 00 00 00 00       	mov    $0x0,%eax
    33e2:	8b 55 08             	mov    0x8(%ebp),%edx
    33e5:	8b 5d 0c             	mov    0xc(%ebp),%ebx
    33e8:	8b 4d 10             	mov    0x10(%ebp),%ecx
    33eb:	89 d7                	mov    %edx,%edi
    33ed:	89 de                	mov    %ebx,%esi
    33ef:	fc                   	cld    
    33f0:	f3 a6                	repz cmpsb %es:(%edi),%ds:(%esi)
    33f2:	74 09                	je     33fd <memcmp+0x26>
    33f4:	b8 01 00 00 00       	mov    $0x1,%eax
    33f9:	7c 02                	jl     33fd <memcmp+0x26>
    33fb:	f7 d8                	neg    %eax
    33fd:	89 c3                	mov    %eax,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:364
                "jl 1f\n\t"
                "negl %%eax\n"
                "1:"
                :"=a" (__res):"0" (0),"D" (cs),"S" (ct),"c" (count)
                );
        return __res;
    33ff:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:365
}
    3401:	5b                   	pop    %ebx
    3402:	5e                   	pop    %esi
    3403:	5f                   	pop    %edi
    3404:	5d                   	pop    %ebp
    3405:	c3                   	ret    

00003406 <memchr>:
memchr():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:368

 void * memchr(const void * cs,char c,int count)
{
    3406:	55                   	push   %ebp
    3407:	89 e5                	mov    %esp,%ebp
    3409:	57                   	push   %edi
    340a:	53                   	push   %ebx
    340b:	83 ec 04             	sub    $0x4,%esp
    340e:	8b 45 0c             	mov    0xc(%ebp),%eax
    3411:	88 45 f4             	mov    %al,-0xc(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:370
        register void * __res ;
        if (!count)
    3414:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
    3418:	75 07                	jne    3421 <memchr+0x1b>
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:371
                return NULL;
    341a:	b8 00 00 00 00       	mov    $0x0,%eax
    341f:	eb 1d                	jmp    343e <memchr+0x38>
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:372
        __asm__("cld\n\t"
    3421:	0f b6 45 f4          	movzbl -0xc(%ebp),%eax
    3425:	8b 55 08             	mov    0x8(%ebp),%edx
    3428:	8b 4d 10             	mov    0x10(%ebp),%ecx
    342b:	89 d7                	mov    %edx,%edi
    342d:	fc                   	cld    
    342e:	f2 ae                	repnz scas %es:(%edi),%al
    3430:	74 05                	je     3437 <memchr+0x31>
    3432:	bf 01 00 00 00       	mov    $0x1,%edi
    3437:	4f                   	dec    %edi
    3438:	89 f8                	mov    %edi,%eax
    343a:	89 c3                	mov    %eax,%ebx
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:380
                "je 1f\n\t"
                "movl $1,%0\n"
                "1:\tdecl %0"
                :"=D" (__res):"a" (c),"D" (cs),"c" (count)
                );
        return __res;
    343c:	89 d8                	mov    %ebx,%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:381
}
    343e:	83 c4 04             	add    $0x4,%esp
    3441:	5b                   	pop    %ebx
    3442:	5f                   	pop    %edi
    3443:	5d                   	pop    %ebp
    3444:	c3                   	ret    

00003445 <memset>:
memset():
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:384

static  void * memset(void * s,char c,int count)
{
    3445:	55                   	push   %ebp
    3446:	89 e5                	mov    %esp,%ebp
    3448:	57                   	push   %edi
    3449:	83 ec 04             	sub    $0x4,%esp
    344c:	8b 45 0c             	mov    0xc(%ebp),%eax
    344f:	88 45 f8             	mov    %al,-0x8(%ebp)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:385
        __asm__("cld\n\t"
    3452:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
    3456:	8b 55 08             	mov    0x8(%ebp),%edx
    3459:	8b 4d 10             	mov    0x10(%ebp),%ecx
    345c:	89 d7                	mov    %edx,%edi
    345e:	fc                   	cld    
    345f:	f3 aa                	rep stos %al,%es:(%edi)
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:390
                "rep\n\t"
                "stosb"
                ::"a" (c),"D" (s),"c" (count)
                );
        return s;
    3461:	8b 45 08             	mov    0x8(%ebp),%eax
/home/yb/Documents/Projects/OperatingSystem/linux/lib/string.c:391
    3464:	83 c4 04             	add    $0x4,%esp
    3467:	5f                   	pop    %edi
    3468:	5d                   	pop    %ebp
    3469:	c3                   	ret    
